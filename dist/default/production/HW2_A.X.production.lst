

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Nov 06 22:14:37 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.45
    80                           ; Generated 16/11/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4620 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  0034A8                     __pidataCOMRAM:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _LCD_INIT_STRING
   119  0034A8  28                 	db	40
   120  0034A9  0C                 	db	12
   121  0034AA  01                 	db	1
   122  0034AB  06                 	db	6
   123                           
   124                           ;initializer for _AI1
   125  0034AC  00                 	db	0
   126  0034AD  70                 	db	112
   127  0034AE  42                 	db	66
   128                           
   129                           ;initializer for _Hs
   130  0034AF  FFFF               	dw	65535
   131                           
   132                           ;initializer for _mode_counter
   133  0034B1  FFFF               	dw	65535
   134                           
   135                           	psect	mediumconst
   136  00FE7A                     __pmediumconst:
   137                           	opt stack 0
   138  00FE7A  00                 	db	0
   139  00FE7B                     _dpowers:
   140                           	opt stack 0
   141  00FE7B  0001               	dw	1
   142  00FE7D  0000               	dw	0
   143  00FE7F  000A               	dw	10
   144  00FE81  0000               	dw	0
   145  00FE83  0064               	dw	100
   146  00FE85  0000               	dw	0
   147  00FE87  03E8               	dw	1000
   148  00FE89  0000               	dw	0
   149  00FE8B  2710               	dw	10000
   150  00FE8D  0000               	dw	0
   151  00FE8F  86A0               	dw	34464
   152  00FE91  0001               	dw	1
   153  00FE93  4240               	dw	16960
   154  00FE95  000F               	dw	15
   155  00FE97  9680               	dw	38528
   156  00FE99  0098               	dw	152
   157  00FE9B  E100               	dw	57600
   158  00FE9D  05F5               	dw	1525
   159  00FE9F  CA00               	dw	51712
   160  00FEA1  3B9A               	dw	15258
   161  00FEA3                     __end_of_dpowers:
   162                           	opt stack 0
   163  00FEA3                     __powers_:
   164                           	opt stack 0
   165  00FEA3  00                 	db	0
   166  00FEA4  80                 	db	128
   167  00FEA5  3F                 	db	63
   168  00FEA6  00                 	db	0
   169  00FEA7  20                 	db	32
   170  00FEA8  41                 	db	65
   171  00FEA9  00                 	db	0
   172  00FEAA  C8                 	db	200
   173  00FEAB  42                 	db	66
   174  00FEAC  00                 	db	0
   175  00FEAD  7A                 	db	122
   176  00FEAE  44                 	db	68
   177  00FEAF  40                 	db	64
   178  00FEB0  1C                 	db	28
   179  00FEB1  46                 	db	70
   180  00FEB2  50                 	db	80
   181  00FEB3  C3                 	db	195
   182  00FEB4  47                 	db	71
   183  00FEB5  24                 	db	36
   184  00FEB6  74                 	db	116
   185  00FEB7  49                 	db	73
   186  00FEB8  97                 	db	151
   187  00FEB9  18                 	db	24
   188  00FEBA  4B                 	db	75
   189  00FEBB  BC                 	db	188
   190  00FEBC  BE                 	db	190
   191  00FEBD  4C                 	db	76
   192  00FEBE  6B                 	db	107
   193  00FEBF  6E                 	db	110
   194  00FEC0  4E                 	db	78
   195  00FEC1  03                 	db	3
   196  00FEC2  15                 	db	21
   197  00FEC3  50                 	db	80
   198  00FEC4  79                 	db	121
   199  00FEC5  AD                 	db	173
   200  00FEC6  60                 	db	96
   201  00FEC7  F3                 	db	243
   202  00FEC8  49                 	db	73
   203  00FEC9  71                 	db	113
   204  00FECA                     __end_of__powers_:
   205                           	opt stack 0
   206  00FECA                     __npowers_:
   207                           	opt stack 0
   208  00FECA  00                 	db	0
   209  00FECB  80                 	db	128
   210  00FECC  3F                 	db	63
   211  00FECD  CD                 	db	205
   212  00FECE  CC                 	db	204
   213  00FECF  3D                 	db	61
   214  00FED0  D7                 	db	215
   215  00FED1  23                 	db	35
   216  00FED2  3C                 	db	60
   217  00FED3  12                 	db	18
   218  00FED4  83                 	db	131
   219  00FED5  3A                 	db	58
   220  00FED6  B7                 	db	183
   221  00FED7  D1                 	db	209
   222  00FED8  38                 	db	56
   223  00FED9  C6                 	db	198
   224  00FEDA  27                 	db	39
   225  00FEDB  37                 	db	55
   226  00FEDC  38                 	db	56
   227  00FEDD  86                 	db	134
   228  00FEDE  35                 	db	53
   229  00FEDF  C0                 	db	192
   230  00FEE0  D6                 	db	214
   231  00FEE1  33                 	db	51
   232  00FEE2  CC                 	db	204
   233  00FEE3  2B                 	db	43
   234  00FEE4  32                 	db	50
   235  00FEE5  70                 	db	112
   236  00FEE6  89                 	db	137
   237  00FEE7  30                 	db	48
   238  00FEE8  E7                 	db	231
   239  00FEE9  DB                 	db	219
   240  00FEEA  2E                 	db	46
   241  00FEEB  E5                 	db	229
   242  00FEEC  3C                 	db	60
   243  00FEED  1E                 	db	30
   244  00FEEE  42                 	db	66
   245  00FEEF  A2                 	db	162
   246  00FEF0  0D                 	db	13
   247  00FEF1                     __end_of__npowers_:
   248                           	opt stack 0
   249  0000                     _TMR3	set	4018
   250  0000                     _TXREG	set	4013
   251  0000                     _RCREG	set	4014
   252  0000                     _RCSTAbits	set	4011
   253  0000                     _RCSTA	set	4011
   254  0000                     _TXSTAbits	set	4012
   255  0000                     _SPBRGH	set	4016
   256  0000                     _SPBRG	set	4015
   257  0000                     _TXSTA	set	4012
   258  0000                     _BAUDCONbits	set	4024
   259  0000                     _CCP1CONbits	set	4029
   260  0000                     _CCPR1L	set	4030
   261  0000                     _TRISCbits	set	3988
   262  0000                     _T2CONbits	set	4042
   263  0000                     _T2CON	set	4042
   264  0000                     _PR2	set	4043
   265  0000                     _ADRESL	set	4035
   266  0000                     _ADRESH	set	4036
   267  0000                     _ADCON2	set	4032
   268  0000                     _ADCON0bits	set	4034
   269  0000                     _PORTEbits	set	3972
   270  0000                     _PIR1bits	set	3998
   271  0000                     _CCP1CON	set	4029
   272  0000                     _CCPR2L	set	4027
   273  0000                     _CCPR2H	set	4028
   274  0000                     _PIE2bits	set	4000
   275  0000                     _PIE1	set	3997
   276  0000                     _PORTDbits	set	3971
   277  0000                     _PORTCbits	set	3970
   278  0000                     _TRISE	set	3990
   279  0000                     _TRISD	set	3989
   280  0000                     _TRISC	set	3988
   281  0000                     _TRISB	set	3987
   282  0000                     _TRISA	set	3986
   283  0000                     _LATE	set	3981
   284  0000                     _LATD	set	3980
   285  0000                     _LATC	set	3979
   286  0000                     _LATB	set	3978
   287  0000                     _LATA	set	3977
   288  0000                     _ADCON1	set	4033
   289  0000                     _ADCON0	set	4034
   290  0000                     _T3CONbits	set	4017
   291  0000                     _T3CON	set	4017
   292  0000                     _CCP2CON	set	4026
   293  0000                     _IPR2	set	4002
   294  0000                     _PIR2	set	4001
   295  0000                     _PIE2	set	4000
   296  0000                     _RCON	set	4048
   297  0000                     _INTCON	set	4082
   298  0000                     _INTCON3	set	4080
   299  0000                     _INTCON2	set	4081
   300  0000                     _PIR2bits	set	4001
   301  0000                     _INTCONbits	set	4082
   302  0000                     _INTCON3bits	set	4080
   303  0000                     _RB3	set	31755
   304  00FEF1                     STR_15:
   305  00FEF1  0A                 	db	10
   306  00FEF2  52                 	db	82	;'R'
   307  00FEF3  54                 	db	84	;'T'
   308  00FEF4  3A                 	db	58	;':'
   309  00FEF5  25                 	db	37
   310  00FEF6  34                 	db	52	;'4'
   311  00FEF7  2E                 	db	46
   312  00FEF8  31                 	db	49	;'1'
   313  00FEF9  66                 	db	102	;'f'
   314  00FEFA  20                 	db	32
   315  00FEFB  4F                 	db	79	;'O'
   316  00FEFC  54                 	db	84	;'T'
   317  00FEFD  3A                 	db	58	;':'
   318  00FEFE  25                 	db	37
   319  00FEFF  34                 	db	52	;'4'
   320  00FF00  2E                 	db	46
   321  00FF01  31                 	db	49	;'1'
   322  00FF02  66                 	db	102	;'f'
   323  00FF03  20                 	db	32
   324  00FF04  53                 	db	83	;'S'
   325  00FF05  50                 	db	80	;'P'
   326  00FF06  3A                 	db	58	;':'
   327  00FF07  25                 	db	37
   328  00FF08  34                 	db	52	;'4'
   329  00FF09  2E                 	db	46
   330  00FF0A  31                 	db	49	;'1'
   331  00FF0B  66                 	db	102	;'f'
   332  00FF0C  00                 	db	0
   333  00FF0D                     STR_6:
   334  00FF0D  4F                 	db	79	;'O'
   335  00FF0E  54                 	db	84	;'T'
   336  00FF0F  3A                 	db	58	;':'
   337  00FF10  20                 	db	32
   338  00FF11  25                 	db	37
   339  00FF12  34                 	db	52	;'4'
   340  00FF13  2E                 	db	46
   341  00FF14  31                 	db	49	;'1'
   342  00FF15  66                 	db	102	;'f'
   343  00FF16  43                 	db	67	;'C'
   344  00FF17  20                 	db	32
   345  00FF18  43                 	db	67	;'C'
   346  00FF19  3A                 	db	58	;':'
   347  00FF1A  20                 	db	32
   348  00FF1B  25                 	db	37
   349  00FF1C  32                 	db	50	;'2'
   350  00FF1D  2E                 	db	46
   351  00FF1E  31                 	db	49	;'1'
   352  00FF1F  66                 	db	102	;'f'
   353  00FF20  25                 	db	37
   354  00FF21  25                 	db	37
   355  00FF22  00                 	db	0
   356  00FF23                     STR_9:
   357  00FF23  4F                 	db	79	;'O'
   358  00FF24  54                 	db	84	;'T'
   359  00FF25  3A                 	db	58	;':'
   360  00FF26  20                 	db	32
   361  00FF27  25                 	db	37
   362  00FF28  34                 	db	52	;'4'
   363  00FF29  2E                 	db	46
   364  00FF2A  31                 	db	49	;'1'
   365  00FF2B  66                 	db	102	;'f'
   366  00FF2C  43                 	db	67	;'C'
   367  00FF2D  20                 	db	32
   368  00FF2E  48                 	db	72	;'H'
   369  00FF2F  3A                 	db	58	;':'
   370  00FF30  20                 	db	32
   371  00FF31  25                 	db	37
   372  00FF32  32                 	db	50	;'2'
   373  00FF33  2E                 	db	46
   374  00FF34  31                 	db	49	;'1'
   375  00FF35  66                 	db	102	;'f'
   376  00FF36  25                 	db	37
   377  00FF37  25                 	db	37
   378  00FF38  00                 	db	0
   379  00FF39  4D                 	db	77	;'M'
   380  00FF3A  44                 	db	68	;'D'
   381  00FF3B  3A                 	db	58	;':'
   382  00FF3C  20                 	db	32
   383  00FF3D  41                 	db	65	;'A'
   384  00FF3E  75                 	db	117	;'u'
   385  00FF3F  74                 	db	116	;'t'
   386  00FF40  6F                 	db	111	;'o'
   387  00FF41  20                 	db	32
   388  00FF42  48                 	db	72	;'H'
   389  00FF43  65                 	db	101	;'e'
   390  00FF44  61                 	db	97	;'a'
   391  00FF45  74                 	db	116	;'t'
   392  00FF46  20                 	db	32
   393  00FF47  20                 	db	32
   394  00FF48  20                 	db	32
   395  00FF49  20                 	db	32
   396  00FF4A  20                 	db	32
   397  00FF4B  20                 	db	32
   398  00FF4C  00                 	db	0
   399  00FF4D                     STR_3:
   400  00FF4D  4F                 	db	79	;'O'
   401  00FF4E  54                 	db	84	;'T'
   402  00FF4F  3A                 	db	58	;':'
   403  00FF50  20                 	db	32
   404  00FF51  25                 	db	37
   405  00FF52  34                 	db	52	;'4'
   406  00FF53  2E                 	db	46
   407  00FF54  31                 	db	49	;'1'
   408  00FF55  66                 	db	102	;'f'
   409  00FF56  43                 	db	67	;'C'
   410  00FF57  20                 	db	32
   411  00FF58  52                 	db	82	;'R'
   412  00FF59  3A                 	db	58	;':'
   413  00FF5A  20                 	db	32
   414  00FF5B  30                 	db	48	;'0'
   415  00FF5C  2E                 	db	46
   416  00FF5D  30                 	db	48	;'0'
   417  00FF5E  00                 	db	0
   418  00FF5F                     STR_14:
   419  00FF5F  52                 	db	82	;'R'
   420  00FF60  54                 	db	84	;'T'
   421  00FF61  3A                 	db	58	;':'
   422  00FF62  20                 	db	32
   423  00FF63  25                 	db	37
   424  00FF64  34                 	db	52	;'4'
   425  00FF65  2E                 	db	46
   426  00FF66  31                 	db	49	;'1'
   427  00FF67  66                 	db	102	;'f'
   428  00FF68  43                 	db	67	;'C'
   429  00FF69  20                 	db	32
   430  00FF6A  20                 	db	32
   431  00FF6B  20                 	db	32
   432  00FF6C  20                 	db	32
   433  00FF6D  48                 	db	72	;'H'
   434  00FF6E  20                 	db	32
   435  00FF6F  43                 	db	67	;'C'
   436  00FF70  00                 	db	0
   437  00FF71                     STR_10:
   438  00FF71  53                 	db	83	;'S'
   439  00FF72  50                 	db	80	;'P'
   440  00FF73  3A                 	db	58	;':'
   441  00FF74  20                 	db	32
   442  00FF75  25                 	db	37
   443  00FF76  34                 	db	52	;'4'
   444  00FF77  2E                 	db	46
   445  00FF78  31                 	db	49	;'1'
   446  00FF79  66                 	db	102	;'f'
   447  00FF7A  43                 	db	67	;'C'
   448  00FF7B  20                 	db	32
   449  00FF7C  20                 	db	32
   450  00FF7D  20                 	db	32
   451  00FF7E  20                 	db	32
   452  00FF7F  4E                 	db	78	;'N'
   453  00FF80  20                 	db	32
   454  00FF81  4E                 	db	78	;'N'
   455  00FF82  00                 	db	0
   456  00FF83                     STR_4:
   457  00FF83  53                 	db	83	;'S'
   458  00FF84  50                 	db	80	;'P'
   459  00FF85  3A                 	db	58	;':'
   460  00FF86  20                 	db	32
   461  00FF87  25                 	db	37
   462  00FF88  34                 	db	52	;'4'
   463  00FF89  2E                 	db	46
   464  00FF8A  31                 	db	49	;'1'
   465  00FF8B  66                 	db	102	;'f'
   466  00FF8C  43                 	db	67	;'C'
   467  00FF8D  20                 	db	32
   468  00FF8E  20                 	db	32
   469  00FF8F  20                 	db	32
   470  00FF90  20                 	db	32
   471  00FF91  59                 	db	89	;'Y'
   472  00FF92  20                 	db	32
   473  00FF93  4E                 	db	78	;'N'
   474  00FF94  00                 	db	0
   475  00FF95                     STR_7:
   476  00FF95  53                 	db	83	;'S'
   477  00FF96  50                 	db	80	;'P'
   478  00FF97  3A                 	db	58	;':'
   479  00FF98  20                 	db	32
   480  00FF99  25                 	db	37
   481  00FF9A  34                 	db	52	;'4'
   482  00FF9B  2E                 	db	46
   483  00FF9C  31                 	db	49	;'1'
   484  00FF9D  66                 	db	102	;'f'
   485  00FF9E  43                 	db	67	;'C'
   486  00FF9F  20                 	db	32
   487  00FFA0  20                 	db	32
   488  00FFA1  20                 	db	32
   489  00FFA2  20                 	db	32
   490  00FFA3  4E                 	db	78	;'N'
   491  00FFA4  20                 	db	32
   492  00FFA5  59                 	db	89	;'Y'
   493  00FFA6  00                 	db	0
   494  00FFA7                     STR_1:
   495  00FFA7  53                 	db	83	;'S'
   496  00FFA8  50                 	db	80	;'P'
   497  00FFA9  3A                 	db	58	;':'
   498  00FFAA  20                 	db	32
   499  00FFAB  25                 	db	37
   500  00FFAC  34                 	db	52	;'4'
   501  00FFAD  2E                 	db	46
   502  00FFAE  31                 	db	49	;'1'
   503  00FFAF  66                 	db	102	;'f'
   504  00FFB0  43                 	db	67	;'C'
   505  00FFB1  20                 	db	32
   506  00FFB2  20                 	db	32
   507  00FFB3  20                 	db	32
   508  00FFB4  20                 	db	32
   509  00FFB5  59                 	db	89	;'Y'
   510  00FFB6  20                 	db	32
   511  00FFB7  59                 	db	89	;'Y'
   512  00FFB8  00                 	db	0
   513  00FFB9                     STR_11:
   514  00FFB9  4D                 	db	77	;'M'
   515  00FFBA  44                 	db	68	;'D'
   516  00FFBB  3A                 	db	58	;':'
   517  00FFBC  41                 	db	65	;'A'
   518  00FFBD  75                 	db	117	;'u'
   519  00FFBE  74                 	db	116	;'t'
   520  00FFBF  6F                 	db	111	;'o'
   521  00FFC0  20                 	db	32
   522  00FFC1  48                 	db	72	;'H'
   523  00FFC2  43                 	db	67	;'C'
   524  00FFC3  20                 	db	32
   525  00FFC4  48                 	db	72	;'H'
   526  00FFC5  53                 	db	83	;'S'
   527  00FFC6  3A                 	db	58	;':'
   528  00FFC7  20                 	db	32
   529  00FFC8  25                 	db	37
   530  00FFC9  64                 	db	100	;'d'
   531  00FFCA  00                 	db	0
   532  00FFCB                     STR_2:
   533  00FFCB  4D                 	db	77	;'M'
   534  00FFCC  44                 	db	68	;'D'
   535  00FFCD  3A                 	db	58	;':'
   536  00FFCE  4F                 	db	79	;'O'
   537  00FFCF  46                 	db	70	;'F'
   538  00FFD0  46                 	db	70	;'F'
   539  00FFD1  20                 	db	32
   540  00FFD2  20                 	db	32
   541  00FFD3  20                 	db	32
   542  00FFD4  20                 	db	32
   543  00FFD5  20                 	db	32
   544  00FFD6  20                 	db	32
   545  00FFD7  20                 	db	32
   546  00FFD8  20                 	db	32
   547  00FFD9  20                 	db	32
   548  00FFDA  20                 	db	32
   549  00FFDB  00                 	db	0
   550  00FFDC                     STR_5:
   551  00FFDC  4D                 	db	77	;'M'
   552  00FFDD  44                 	db	68	;'D'
   553  00FFDE  3A                 	db	58	;':'
   554  00FFDF  43                 	db	67	;'C'
   555  00FFE0  6F                 	db	111	;'o'
   556  00FFE1  6F                 	db	111	;'o'
   557  00FFE2  6C                 	db	108	;'l'
   558  00FFE3  20                 	db	32
   559  00FFE4  20                 	db	32
   560  00FFE5  20                 	db	32
   561  00FFE6  20                 	db	32
   562  00FFE7  20                 	db	32
   563  00FFE8  20                 	db	32
   564  00FFE9  20                 	db	32
   565  00FFEA  20                 	db	32
   566  00FFEB  20                 	db	32
   567  00FFEC  00                 	db	0
   568  00FFED                     STR_8:
   569  00FFED  4D                 	db	77	;'M'
   570  00FFEE  44                 	db	68	;'D'
   571  00FFEF  3A                 	db	58	;':'
   572  00FFF0  48                 	db	72	;'H'
   573  00FFF1  65                 	db	101	;'e'
   574  00FFF2  61                 	db	97	;'a'
   575  00FFF3  74                 	db	116	;'t'
   576  00FFF4  20                 	db	32
   577  00FFF5  20                 	db	32
   578  00FFF6  20                 	db	32
   579  00FFF7  20                 	db	32
   580  00FFF8  20                 	db	32
   581  00FFF9  20                 	db	32
   582  00FFFA  20                 	db	32
   583  00FFFB  20                 	db	32
   584  00FFFC  20                 	db	32
   585  00FFFD  00                 	db	0
   586  0000                     
   587                           ; #config settings
   588  00FFFE  00                 	db	0	; dummy byte at the end
   589  0000                     
   590                           	psect	cinit
   591  003046                     __pcinit:
   592                           	opt stack 0
   593  003046                     start_initialization:
   594                           	opt stack 0
   595  003046                     __initialization:
   596                           	opt stack 0
   597                           
   598                           ; Initialize objects allocated to COMRAM (11 bytes)
   599                           ; load TBLPTR registers with __pidataCOMRAM
   600  003046  0EA8               	movlw	low __pidataCOMRAM
   601  003048  6EF6               	movwf	tblptrl,c
   602  00304A  0E34               	movlw	high __pidataCOMRAM
   603  00304C  6EF7               	movwf	tblptrh,c
   604  00304E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   605  003050  6EF8               	movwf	tblptru,c
   606  003052  EE00  F041         	lfsr	0,__pdataCOMRAM
   607  003056  EE10 F00B          	lfsr	1,11
   608  00305A                     copy_data0:
   609  00305A  0009               	tblrd		*+
   610  00305C  CFF5 FFEE          	movff	tablat,postinc0
   611  003060  50E5               	movf	postdec1,w,c
   612  003062  50E1               	movf	fsr1l,w,c
   613  003064  E1FA               	bnz	copy_data0
   614                           
   615                           ; Clear objects allocated to BANK1 (32 bytes)
   616  003066  EE01  F000         	lfsr	0,__pbssBANK1
   617  00306A  0E20               	movlw	32
   618  00306C                     clear_0:
   619  00306C  6AEE               	clrf	postinc0,c
   620  00306E  06E8               	decf	wreg,f,c
   621  003070  E1FD               	bnz	clear_0
   622                           
   623                           ; Clear objects allocated to BANK0 (22 bytes)
   624  003072  EE00  F0E9         	lfsr	0,__pbssBANK0
   625  003076  0E16               	movlw	22
   626  003078                     clear_1:
   627  003078  6AEE               	clrf	postinc0,c
   628  00307A  06E8               	decf	wreg,f,c
   629  00307C  E1FD               	bnz	clear_1
   630                           
   631                           ; Clear objects allocated to COMRAM (10 bytes)
   632  00307E  EE00  F04C         	lfsr	0,__pbssCOMRAM
   633  003082  0E0A               	movlw	10
   634  003084                     clear_2:
   635  003084  6AEE               	clrf	postinc0,c
   636  003086  06E8               	decf	wreg,f,c
   637  003088  E1FD               	bnz	clear_2
   638  00308A                     end_of_initialization:
   639                           	opt stack 0
   640  00308A                     __end_of__initialization:
   641                           	opt stack 0
   642  00308A  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   643  00308C  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   644  00308E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   645  003090  6EF8               	movwf	tblptru,c
   646  003092  0100               	movlb	0
   647  003094  EFD6  F00B         	goto	_main	;jump to C main() function
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssCOMRAM
   658  00004C                     __pbssCOMRAM:
   659                           	opt stack 0
   660  00004C                     _SSP:
   661                           	opt stack 0
   662  00004C                     	ds	3
   663  00004F                     _TT:
   664                           	opt stack 0
   665  00004F                     	ds	3
   666  000052                     _AnalogInput2:
   667                           	opt stack 0
   668  000052                     	ds	3
   669  000055                     _current_mode:
   670                           	opt stack 0
   671  000055                     	ds	1
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           postdec1	equ	0xFE5
   679                           fsr1l	equ	0xFE1
   680                           
   681                           	psect	dataCOMRAM
   682  000041                     __pdataCOMRAM:
   683                           	opt stack 0
   684  000041                     _LCD_INIT_STRING:
   685                           	opt stack 0
   686  000041                     	ds	4
   687  000045                     _AI1:
   688                           	opt stack 0
   689  000045                     	ds	3
   690  000048                     _Hs:
   691                           	opt stack 0
   692  000048                     	ds	2
   693  00004A                     _mode_counter:
   694                           	opt stack 0
   695  00004A                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           	psect	bssBANK0
   706  0000E9                     __pbssBANK0:
   707                           	opt stack 0
   708  0000E9                     _OT:
   709                           	opt stack 0
   710  0000E9                     	ds	3
   711  0000EC                     _AnalogInput1:
   712                           	opt stack 0
   713  0000EC                     	ds	3
   714  0000EF                     _AnalogInput0:
   715                           	opt stack 0
   716  0000EF                     	ds	3
   717  0000F2                     _SerialFlag:
   718                           	opt stack 0
   719  0000F2                     	ds	2
   720  0000F4                     _raw_value:
   721                           	opt stack 0
   722  0000F4                     	ds	2
   723  0000F6                     _AI3:
   724                           	opt stack 0
   725  0000F6                     	ds	3
   726  0000F9                     _AI2:
   727                           	opt stack 0
   728  0000F9                     	ds	3
   729  0000FC                     _AI0:
   730                           	opt stack 0
   731  0000FC                     	ds	3
   732                           tblptru	equ	0xFF8
   733                           tblptrh	equ	0xFF7
   734                           tblptrl	equ	0xFF6
   735                           tablat	equ	0xFF5
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           postdec1	equ	0xFE5
   739                           fsr1l	equ	0xFE1
   740                           
   741                           	psect	bssBANK1
   742  000100                     __pbssBANK1:
   743                           	opt stack 0
   744  000100                     _Buffer:
   745                           	opt stack 0
   746  000100                     	ds	32
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           postdec1	equ	0xFE5
   754                           fsr1l	equ	0xFE1
   755                           
   756                           	psect	cstackBANK1
   757  000120                     __pcstackBANK1:
   758                           	opt stack 0
   759  000120                     autoCool@coolError:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0x0
   763  000120                     	ds	3
   764  000123                     autoCool@heatError:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0x3
   768  000123                     	ds	3
   769  000126                     autoCool@compare_value:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x6
   773  000126                     	ds	2
   774  000128                     _autoCool$1898:
   775                           	opt stack 0
   776                           
   777                           ; 3 bytes @ 0x8
   778  000128                     	ds	3
   779  00012B                     autoCool@percent_value:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0xB
   783  00012B                     	ds	3
   784  00012E                     autoCool@percent_heat:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0xE
   788  00012E                     	ds	3
   789  000131                     autoCool@SP:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x11
   793  000131                     	ds	3
   794  000134                     autoCool@T:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x14
   798  000134                     	ds	3
   799  000137                     _autoCool$1899:
   800                           	opt stack 0
   801                           
   802                           ; 3 bytes @ 0x17
   803  000137                     	ds	3
   804                           tblptru	equ	0xFF8
   805                           tblptrh	equ	0xFF7
   806                           tblptrl	equ	0xFF6
   807                           tablat	equ	0xFF5
   808                           postinc0	equ	0xFEE
   809                           wreg	equ	0xFE8
   810                           postdec1	equ	0xFE5
   811                           fsr1l	equ	0xFE1
   812                           
   813                           	psect	cstackBANK0
   814  000080                     __pcstackBANK0:
   815                           	opt stack 0
   816  000080                     ?___ftmul:
   817                           	opt stack 0
   818  000080                     ?___ftneg:
   819                           	opt stack 0
   820  000080                     ___ftmul@f1:
   821                           	opt stack 0
   822  000080                     ___ftneg@f1:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x0
   826  000080                     	ds	3
   827  000083                     ___ftmul@f2:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x3
   831  000083                     	ds	3
   832  000086                     ___ftmul@exp:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x6
   836  000086                     	ds	1
   837  000087                     ___ftmul@f3_as_product:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x7
   841  000087                     	ds	3
   842  00008A                     ___ftmul@cntr:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0xA
   846  00008A                     	ds	1
   847  00008B                     ___ftmul@sign:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0xB
   851  00008B                     	ds	1
   852  00008C                     ?___ftdiv:
   853                           	opt stack 0
   854  00008C                     ?_fround:
   855                           	opt stack 0
   856  00008C                     ?_scale:
   857                           	opt stack 0
   858  00008C                     ___ftdiv@f1:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0xC
   862  00008C                     	ds	3
   863  00008F                     ___ftdiv@f2:
   864                           	opt stack 0
   865  00008F                     _fround$1905:
   866                           	opt stack 0
   867  00008F                     _scale$1906:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0xF
   871  00008F                     	ds	3
   872  000092                     ??___ftdiv:
   873  000092                     scale@scl:
   874                           	opt stack 0
   875  000092                     _fround$1904:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0x12
   879  000092                     	ds	3
   880  000095                     fround@prec:
   881                           	opt stack 0
   882  000095                     ___ftdiv@cntr:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x15
   886  000095                     	ds	1
   887  000096                     ?___ftadd:
   888                           	opt stack 0
   889  000096                     ___ftadd@f1:
   890                           	opt stack 0
   891  000096                     ___ftdiv@f3:
   892                           	opt stack 0
   893                           
   894                           ; 3 bytes @ 0x16
   895  000096                     	ds	3
   896  000099                     ___ftdiv@exp:
   897                           	opt stack 0
   898  000099                     ___ftadd@f2:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0x19
   902  000099                     	ds	1
   903  00009A                     ___ftdiv@sign:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x1A
   907  00009A                     	ds	1
   908  00009B                     ?_read_adc_voltage:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0x1B
   912  00009B                     	ds	1
   913  00009C                     ??___ftadd:
   914                           
   915                           ; 1 bytes @ 0x1C
   916  00009C                     	ds	2
   917  00009E                     read_adc_voltage@voltage:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x1E
   921  00009E                     	ds	1
   922  00009F                     ___ftadd@sign:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x1F
   926  00009F                     	ds	1
   927  0000A0                     ___ftadd@exp2:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x20
   931  0000A0                     	ds	1
   932  0000A1                     read_adc_voltage@channel:
   933                           	opt stack 0
   934  0000A1                     ___ftadd@exp1:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x21
   938  0000A1                     	ds	1
   939  0000A2                     ?___ftsub:
   940                           	opt stack 0
   941  0000A2                     ?___fttol:
   942                           	opt stack 0
   943  0000A2                     read_adc_voltage@raw_value:
   944                           	opt stack 0
   945  0000A2                     ___ftge@ff1:
   946                           	opt stack 0
   947  0000A2                     ___ftsub@f1:
   948                           	opt stack 0
   949  0000A2                     ___fttol@f1:
   950                           	opt stack 0
   951                           
   952                           ; 3 bytes @ 0x22
   953  0000A2                     	ds	3
   954  0000A5                     ___ftge@ff2:
   955                           	opt stack 0
   956  0000A5                     ___ftsub@f2:
   957                           	opt stack 0
   958                           
   959                           ; 3 bytes @ 0x25
   960  0000A5                     	ds	1
   961  0000A6                     ??___fttol:
   962                           
   963                           ; 1 bytes @ 0x26
   964  0000A6                     	ds	2
   965  0000A8                     ??___ftge:
   966                           
   967                           ; 1 bytes @ 0x28
   968  0000A8                     	ds	3
   969  0000AB                     ___fttol@sign1:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x2B
   973  0000AB                     	ds	1
   974  0000AC                     ___fttol@lval:
   975                           	opt stack 0
   976                           
   977                           ; 4 bytes @ 0x2C
   978  0000AC                     	ds	4
   979  0000B0                     ___fttol@exp1:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x30
   983  0000B0                     	ds	1
   984  0000B1                     ?_sprintf:
   985                           	opt stack 0
   986  0000B1                     sprintf@sp:
   987                           	opt stack 0
   988  0000B1                     set_pwm1_percent@value:
   989                           	opt stack 0
   990                           
   991                           ; 3 bytes @ 0x31
   992  0000B1                     	ds	2
   993  0000B3                     sprintf@f:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x33
   997  0000B3                     	ds	1
   998  0000B4                     set_pwm1_percent@tmp:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0x34
  1002  0000B4                     	ds	3
  1003  0000B7                     set_pwm1_percent@raw_val:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x37
  1007  0000B7                     	ds	7
  1008  0000BE                     ??_sprintf:
  1009                           
  1010                           ; 1 bytes @ 0x3E
  1011  0000BE                     	ds	6
  1012  0000C4                     _sprintf$1907:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0x44
  1016  0000C4                     	ds	3
  1017  0000C7                     sprintf@cp:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x47
  1021  0000C7                     	ds	2
  1022  0000C9                     sprintf@ap:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x49
  1026  0000C9                     	ds	2
  1027  0000CB                     sprintf@len:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x4B
  1031  0000CB                     	ds	2
  1032  0000CD                     sprintf@flag:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x4D
  1036  0000CD                     	ds	2
  1037  0000CF                     sprintf@tmpval:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x4F
  1041  0000CF                     	ds	4
  1042  0000D3                     sprintf@val:
  1043                           	opt stack 0
  1044                           
  1045                           ; 4 bytes @ 0x53
  1046  0000D3                     	ds	4
  1047  0000D7                     sprintf@exp:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x57
  1051  0000D7                     	ds	2
  1052  0000D9                     sprintf@width:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x59
  1056  0000D9                     	ds	2
  1057  0000DB                     sprintf@fval:
  1058                           	opt stack 0
  1059                           
  1060                           ; 3 bytes @ 0x5B
  1061  0000DB                     	ds	3
  1062  0000DE                     sprintf@prec:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x5E
  1066  0000DE                     	ds	2
  1067  0000E0                     sprintf@c:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x60
  1071  0000E0                     	ds	1
  1072  0000E1                     heatMode@compare_value:
  1073                           	opt stack 0
  1074  0000E1                     _OffMode$1895:
  1075                           	opt stack 0
  1076  0000E1                     _CoolMode$1896:
  1077                           	opt stack 0
  1078  0000E1                     _printingOnScreen$1901:
  1079                           	opt stack 0
  1080  0000E1                     _SerialHandler$1903:
  1081                           	opt stack 0
  1082                           
  1083                           ; 3 bytes @ 0x61
  1084  0000E1                     	ds	2
  1085  0000E3                     _heatMode$1897:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x63
  1089  0000E3                     	ds	1
  1090  0000E4                     SerialHandler@received:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x64
  1094  0000E4                     	ds	2
  1095  0000E6                     _main$1902:
  1096                           	opt stack 0
  1097                           
  1098                           ; 3 bytes @ 0x66
  1099  0000E6                     	ds	3
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           postdec1	equ	0xFE5
  1107                           fsr1l	equ	0xFE1
  1108                           
  1109                           	psect	cstackCOMRAM
  1110  000001                     __pcstackCOMRAM:
  1111                           	opt stack 0
  1112  000001                     ??i2_Int0ISR:
  1113  000001                     ?i2___ftpack:
  1114                           	opt stack 0
  1115  000001                     i2___ftpack@arg:
  1116                           	opt stack 0
  1117                           
  1118                           ; 3 bytes @ 0x0
  1119  000001                     	ds	3
  1120  000004                     i2___ftpack@exp:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x3
  1124  000004                     	ds	1
  1125  000005                     i2___ftpack@sign:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x4
  1129  000005                     	ds	1
  1130  000006                     ??i2___ftpack:
  1131                           
  1132                           ; 1 bytes @ 0x5
  1133  000006                     	ds	3
  1134  000009                     ?i2___ftadd:
  1135                           	opt stack 0
  1136  000009                     i2___ftadd@f1:
  1137                           	opt stack 0
  1138                           
  1139                           ; 3 bytes @ 0x8
  1140  000009                     	ds	3
  1141  00000C                     i2___ftadd@f2:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0xB
  1145  00000C                     	ds	3
  1146  00000F                     ??i2___ftadd:
  1147                           
  1148                           ; 1 bytes @ 0xE
  1149  00000F                     	ds	3
  1150  000012                     i2___ftadd@sign:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x11
  1154  000012                     	ds	1
  1155  000013                     i2___ftadd@exp2:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x12
  1159  000013                     	ds	1
  1160  000014                     i2___ftadd@exp1:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x13
  1164  000014                     	ds	1
  1165  000015                     ??_Int2ISR:
  1166  000015                     ??_dec:
  1167                           
  1168                           ; 1 bytes @ 0x14
  1169  000015                     	ds	2
  1170  000017                     ??_highIsr:
  1171                           
  1172                           ; 1 bytes @ 0x16
  1173  000017                     	ds	18
  1174  000029                     ??_Int0ISR:
  1175  000029                     ??_isdigit:
  1176  000029                     ??_delay_cycles:
  1177  000029                     ?_read_adc_raw_no_lib:
  1178                           	opt stack 0
  1179  000029                     ?___awmod:
  1180                           	opt stack 0
  1181  000029                     ?___ftpack:
  1182                           	opt stack 0
  1183  000029                     ?__tdiv_to_l_:
  1184                           	opt stack 0
  1185  000029                     ?__div_to_l_:
  1186                           	opt stack 0
  1187  000029                     ?___lldiv:
  1188                           	opt stack 0
  1189  000029                     setupSerial@dummy:
  1190                           	opt stack 0
  1191  000029                     read_byte_no_lib@c:
  1192                           	opt stack 0
  1193  000029                     send_byte_no_lib@c:
  1194                           	opt stack 0
  1195  000029                     delay_ms@n:
  1196                           	opt stack 0
  1197  000029                     set_pwm1_raw@raw_value:
  1198                           	opt stack 0
  1199  000029                     ___awmod@dividend:
  1200                           	opt stack 0
  1201  000029                     __div_to_l_@f1:
  1202                           	opt stack 0
  1203  000029                     ___ftpack@arg:
  1204                           	opt stack 0
  1205  000029                     __tdiv_to_l_@f1:
  1206                           	opt stack 0
  1207  000029                     ___lldiv@dividend:
  1208                           	opt stack 0
  1209                           
  1210                           ; 4 bytes @ 0x28
  1211  000029                     	ds	1
  1212  00002A                     _isdigit$1517:
  1213                           	opt stack 0
  1214  00002A                     send_string_no_lib@p:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x29
  1218  00002A                     	ds	1
  1219  00002B                     ??_read_adc_raw_no_lib:
  1220  00002B                     ??_set_pwm1_raw:
  1221  00002B                     isdigit@c:
  1222                           	opt stack 0
  1223  00002B                     delay_ms@x:
  1224                           	opt stack 0
  1225  00002B                     ___awmod@divisor:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x2A
  1229  00002B                     	ds	1
  1230  00002C                     delay_cycles@n:
  1231                           	opt stack 0
  1232  00002C                     ___ftpack@exp:
  1233                           	opt stack 0
  1234  00002C                     __div_to_l_@f2:
  1235                           	opt stack 0
  1236  00002C                     __tdiv_to_l_@f2:
  1237                           	opt stack 0
  1238                           
  1239                           ; 3 bytes @ 0x2B
  1240  00002C                     	ds	1
  1241  00002D                     read_adc_raw_no_lib@channel:
  1242                           	opt stack 0
  1243  00002D                     ___awmod@counter:
  1244                           	opt stack 0
  1245  00002D                     ___ftpack@sign:
  1246                           	opt stack 0
  1247  00002D                     delay_cycles@x:
  1248                           	opt stack 0
  1249  00002D                     ___lldiv@divisor:
  1250                           	opt stack 0
  1251                           
  1252                           ; 4 bytes @ 0x2C
  1253  00002D                     	ds	1
  1254  00002E                     ??___ftpack:
  1255  00002E                     ___awmod@sign:
  1256                           	opt stack 0
  1257  00002E                     read_adc_raw_no_lib@raw_value:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x2D
  1261  00002E                     	ds	1
  1262  00002F                     ??__tdiv_to_l_:
  1263  00002F                     ??_lcd_send_nibble:
  1264  00002F                     ?___awdiv:
  1265                           	opt stack 0
  1266  00002F                     ___awdiv@dividend:
  1267                           	opt stack 0
  1268  00002F                     __div_to_l_@quot:
  1269                           	opt stack 0
  1270                           
  1271                           ; 4 bytes @ 0x2E
  1272  00002F                     	ds	1
  1273  000030                     lcd_send_nibble@n:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x2F
  1277  000030                     	ds	1
  1278  000031                     ?___lltoft:
  1279                           	opt stack 0
  1280  000031                     lcd_send_byte@n:
  1281                           	opt stack 0
  1282  000031                     ___awdiv@divisor:
  1283                           	opt stack 0
  1284  000031                     ___lldiv@quotient:
  1285                           	opt stack 0
  1286  000031                     ___lltoft@c:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x30
  1290  000031                     	ds	1
  1291  000032                     lcd_send_byte@cm_data:
  1292                           	opt stack 0
  1293  000032                     __tdiv_to_l_@quot:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0x31
  1297  000032                     	ds	1
  1298  000033                     lcd_init@i:
  1299                           	opt stack 0
  1300  000033                     lcd_gotoxy@y:
  1301                           	opt stack 0
  1302  000033                     ___awdiv@counter:
  1303                           	opt stack 0
  1304  000033                     __div_to_l_@cntr:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x32
  1308  000033                     	ds	1
  1309  000034                     lcd_gotoxy@x:
  1310                           	opt stack 0
  1311  000034                     ___awdiv@sign:
  1312                           	opt stack 0
  1313  000034                     __div_to_l_@exp1:
  1314                           	opt stack 0
  1315                           
  1316                           ; 1 bytes @ 0x33
  1317  000034                     	ds	1
  1318  000035                     ??___lltoft:
  1319  000035                     lcd_gotoxy@address:
  1320                           	opt stack 0
  1321  000035                     ___lldiv@counter:
  1322                           	opt stack 0
  1323  000035                     ___awdiv@quotient:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x34
  1327  000035                     	ds	1
  1328  000036                     ?___llmod:
  1329                           	opt stack 0
  1330  000036                     lcd_putc@c:
  1331                           	opt stack 0
  1332  000036                     __tdiv_to_l_@cntr:
  1333                           	opt stack 0
  1334  000036                     ___llmod@dividend:
  1335                           	opt stack 0
  1336                           
  1337                           ; 4 bytes @ 0x35
  1338  000036                     	ds	1
  1339  000037                     ?___wmul:
  1340                           	opt stack 0
  1341  000037                     __tdiv_to_l_@exp1:
  1342                           	opt stack 0
  1343  000037                     lcd_puts@s:
  1344                           	opt stack 0
  1345  000037                     ___wmul@multiplier:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x36
  1349  000037                     	ds	2
  1350  000039                     ___lltoft@exp:
  1351                           	opt stack 0
  1352  000039                     ___wmul@multiplicand:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x38
  1356  000039                     	ds	1
  1357  00003A                     ___llmod@divisor:
  1358                           	opt stack 0
  1359                           
  1360                           ; 4 bytes @ 0x39
  1361  00003A                     	ds	1
  1362  00003B                     ___wmul@product:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x3A
  1366  00003B                     	ds	2
  1367  00003D                     ??___ftmul:
  1368  00003D                     ?___awtoft:
  1369                           	opt stack 0
  1370  00003D                     ___awtoft@c:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x3C
  1374  00003D                     	ds	1
  1375  00003E                     ___llmod@counter:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x3D
  1379  00003E                     	ds	2
  1380  000040                     ___awtoft@sign:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x3F
  1384  000040                     	ds	1
  1385  000041                     tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1l	equ	0xFE1
  1393                           
  1394                           ; 1 bytes @ 0x40
  1395 ;;
  1396 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1397 ;;
  1398 ;; *************** function _main *****************
  1399 ;; Defined at:
  1400 ;;		line 411 in file "HW2_A.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;		None
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;		None
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;Total ram usage:        3 bytes
  1419 ;; Hardware stack levels required when called:   11
  1420 ;; This function calls:
  1421 ;;		_CoolMode
  1422 ;;		_Int0ISR
  1423 ;;		_OffMode
  1424 ;;		_SerialHandler
  1425 ;;		___awtoft
  1426 ;;		___ftdiv
  1427 ;;		___ftge
  1428 ;;		___ftmul
  1429 ;;		_autoCool
  1430 ;;		_heatMode
  1431 ;;		_printingOnScreen
  1432 ;;		_read_adc_raw_no_lib
  1433 ;;		_read_adc_voltage
  1434 ;;		_setupAllThings
  1435 ;;		_setupSerial
  1436 ;; This function is called by:
  1437 ;;		Startup code after reset
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text0
  1442  0017AC                     __ptext0:
  1443                           	opt stack 0
  1444  0017AC                     _main:
  1445                           	opt stack 20
  1446                           
  1447                           ;HW2_A.c: 413: setupSerial();
  1448                           
  1449                           ;incstack = 0
  1450  0017AC  ECB5  F019         	call	_setupSerial	;wreg free
  1451                           
  1452                           ;HW2_A.c: 414: setupAllThings();
  1453  0017B0  EC2B  F01A         	call	_setupAllThings	;wreg free
  1454                           
  1455                           ;HW2_A.c: 415: current_mode=OFF;
  1456  0017B4  0E00               	movlw	0
  1457  0017B6  6E55               	movwf	_current_mode,c
  1458  0017B8                     
  1459                           ;HW2_A.c: 417: {
  1460                           ;HW2_A.c: 418: AI3 = read_adc_raw_no_lib(1);
  1461  0017B8  0E01               	movlw	1
  1462  0017BA  ECFE  F018         	call	_read_adc_raw_no_lib
  1463  0017BE  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  1464  0017C2  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  1465  0017C6  EC1B  F019         	call	___awtoft	;wreg free
  1466  0017CA  C03D  F0F6         	movff	?___awtoft,_AI3
  1467  0017CE  C03E  F0F7         	movff	?___awtoft+1,_AI3+1
  1468  0017D2  C03F  F0F8         	movff	?___awtoft+2,_AI3+2
  1469                           
  1470                           ;HW2_A.c: 419: OT=(AI3*5.0*100.0)/1023.0/5.0;
  1471  0017D6  0EC0               	movlw	192
  1472  0017D8  0100               	movlb	0	; () banked
  1473  0017DA  6F8F               	movwf	___ftdiv@f2& (0+255),b
  1474  0017DC  0E7F               	movlw	127
  1475  0017DE  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  1476  0017E0  0E44               	movlw	68
  1477  0017E2  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  1478  0017E4  0E00               	movlw	0
  1479  0017E6  6F83               	movwf	___ftmul@f2& (0+255),b
  1480  0017E8  0EFA               	movlw	250
  1481  0017EA  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  1482  0017EC  0E43               	movlw	67
  1483  0017EE  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  1484  0017F0  C0F6  F080         	movff	_AI3,___ftmul@f1
  1485  0017F4  C0F7  F081         	movff	_AI3+1,___ftmul@f1+1
  1486  0017F8  C0F8  F082         	movff	_AI3+2,___ftmul@f1+2
  1487  0017FC  ECC8  F012         	call	___ftmul	;wreg free
  1488  001800  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  1489  001804  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  1490  001808  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  1491  00180C  EC43  F013         	call	___ftdiv	;wreg free
  1492  001810  C08C  F0E6         	movff	?___ftdiv,_main$1902
  1493  001814  C08D  F0E7         	movff	?___ftdiv+1,_main$1902+1
  1494  001818  C08E  F0E8         	movff	?___ftdiv+2,_main$1902+2
  1495                           
  1496                           ;HW2_A.c: 419: OT=(AI3*5.0*100.0)/1023.0/5.0;
  1497  00181C  C0E6  F08C         	movff	_main$1902,___ftdiv@f1
  1498  001820  C0E7  F08D         	movff	_main$1902+1,___ftdiv@f1+1
  1499  001824  C0E8  F08E         	movff	_main$1902+2,___ftdiv@f1+2
  1500  001828  0E00               	movlw	0
  1501  00182A  0100               	movlb	0	; () banked
  1502  00182C  6F8F               	movwf	___ftdiv@f2& (0+255),b
  1503  00182E  0EA0               	movlw	160
  1504  001830  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  1505  001832  0E40               	movlw	64
  1506  001834  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  1507  001836  EC43  F013         	call	___ftdiv	;wreg free
  1508  00183A  C08C  F0E9         	movff	?___ftdiv,_OT
  1509  00183E  C08D  F0EA         	movff	?___ftdiv+1,_OT+1
  1510  001842  C08E  F0EB         	movff	?___ftdiv+2,_OT+2
  1511                           
  1512                           ;HW2_A.c: 421: AnalogInput1 = read_adc_voltage(1);
  1513  001846  0E01               	movlw	1
  1514  001848  ECFA  F016         	call	_read_adc_voltage
  1515  00184C  C09B  F0EC         	movff	?_read_adc_voltage,_AnalogInput1
  1516  001850  C09C  F0ED         	movff	?_read_adc_voltage+1,_AnalogInput1+1
  1517  001854  C09D  F0EE         	movff	?_read_adc_voltage+2,_AnalogInput1+2
  1518                           
  1519                           ;HW2_A.c: 422: AnalogInput2 = read_adc_voltage(2);
  1520  001858  0E02               	movlw	2
  1521  00185A  ECFA  F016         	call	_read_adc_voltage
  1522  00185E  C09B  F052         	movff	?_read_adc_voltage,_AnalogInput2
  1523  001862  C09C  F053         	movff	?_read_adc_voltage+1,_AnalogInput2+1
  1524  001866  C09D  F054         	movff	?_read_adc_voltage+2,_AnalogInput2+2
  1525                           
  1526                           ;HW2_A.c: 423: AnalogInput0 = read_adc_voltage(0);
  1527  00186A  0E00               	movlw	0
  1528  00186C  ECFA  F016         	call	_read_adc_voltage
  1529  001870  C09B  F0EF         	movff	?_read_adc_voltage,_AnalogInput0
  1530  001874  C09C  F0F0         	movff	?_read_adc_voltage+1,_AnalogInput0+1
  1531  001878  C09D  F0F1         	movff	?_read_adc_voltage+2,_AnalogInput0+2
  1532                           
  1533                           ;HW2_A.c: 426: if (INTCONbits.INT0IF) Int0ISR();
  1534  00187C  B2F2               	btfsc	intcon,1,c	;volatile
  1535  00187E  EC4C  F018         	call	_Int0ISR	;wreg free
  1536                           
  1537                           ;HW2_A.c: 427: if (PIR1bits.RCIF) SerialFlag = 1;
  1538  001882  AA9E               	btfss	3998,5,c	;volatile
  1539  001884  D005               	goto	l239
  1540  001886  0E00               	movlw	0
  1541  001888  0100               	movlb	0	; () banked
  1542  00188A  6FF3               	movwf	(_SerialFlag+1)& (0+255),b	;volatile
  1543  00188C  0E01               	movlw	1
  1544  00188E  6FF2               	movwf	_SerialFlag& (0+255),b	;volatile
  1545  001890                     l239:
  1546                           
  1547                           ;HW2_A.c: 430: TT = AnalogInput2 * 100;
  1548                           
  1549                           ; BSR set to: 0
  1550  001890  C052  F080         	movff	_AnalogInput2,___ftmul@f1
  1551  001894  C053  F081         	movff	_AnalogInput2+1,___ftmul@f1+1
  1552  001898  C054  F082         	movff	_AnalogInput2+2,___ftmul@f1+2
  1553  00189C  0E00               	movlw	0
  1554  00189E  0100               	movlb	0	; () banked
  1555  0018A0  6F83               	movwf	___ftmul@f2& (0+255),b
  1556  0018A2  0EC8               	movlw	200
  1557  0018A4  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  1558  0018A6  0E42               	movlw	66
  1559  0018A8  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  1560  0018AA  ECC8  F012         	call	___ftmul	;wreg free
  1561  0018AE  C080  F04F         	movff	?___ftmul,_TT
  1562  0018B2  C081  F050         	movff	?___ftmul+1,_TT+1
  1563  0018B6  C082  F051         	movff	?___ftmul+2,_TT+2
  1564                           
  1565                           ;HW2_A.c: 431: SSP = AnalogInput0 * 100 / 5;
  1566  0018BA  0E00               	movlw	0
  1567  0018BC  0100               	movlb	0	; () banked
  1568  0018BE  6F83               	movwf	___ftmul@f2& (0+255),b
  1569  0018C0  0EC8               	movlw	200
  1570  0018C2  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  1571  0018C4  0E42               	movlw	66
  1572  0018C6  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  1573  0018C8  C0EF  F080         	movff	_AnalogInput0,___ftmul@f1
  1574  0018CC  C0F0  F081         	movff	_AnalogInput0+1,___ftmul@f1+1
  1575  0018D0  C0F1  F082         	movff	_AnalogInput0+2,___ftmul@f1+2
  1576  0018D4  ECC8  F012         	call	___ftmul	;wreg free
  1577  0018D8  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  1578  0018DC  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  1579  0018E0  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  1580  0018E4  0E00               	movlw	0
  1581  0018E6  0100               	movlb	0	; () banked
  1582  0018E8  6F8F               	movwf	___ftdiv@f2& (0+255),b
  1583  0018EA  0EA0               	movlw	160
  1584  0018EC  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  1585  0018EE  0E40               	movlw	64
  1586  0018F0  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  1587  0018F2  EC43  F013         	call	___ftdiv	;wreg free
  1588  0018F6  C08C  F04C         	movff	?___ftdiv,_SSP
  1589  0018FA  C08D  F04D         	movff	?___ftdiv+1,_SSP+1
  1590  0018FE  C08E  F04E         	movff	?___ftdiv+2,_SSP+2
  1591                           
  1592                           ;HW2_A.c: 434: if(OT>60 || OT<40){
  1593  001902  0E00               	movlw	0
  1594  001904  0100               	movlb	0	; () banked
  1595  001906  6FA2               	movwf	___ftge@ff1& (0+255),b
  1596  001908  0E70               	movlw	112
  1597  00190A  6FA3               	movwf	(___ftge@ff1+1)& (0+255),b
  1598  00190C  0E42               	movlw	66
  1599  00190E  6FA4               	movwf	(___ftge@ff1+2)& (0+255),b
  1600  001910  C0E9  F0A5         	movff	_OT,___ftge@ff2
  1601  001914  C0EA  F0A6         	movff	_OT+1,___ftge@ff2+1
  1602  001918  C0EB  F0A7         	movff	_OT+2,___ftge@ff2+2
  1603  00191C  ECBE  F015         	call	___ftge	;wreg free
  1604  001920  0100               	movlb	0	; () banked
  1605  001922  A0D8               	btfss	status,0,c
  1606  001924  D011               	goto	u6610
  1607                           
  1608                           ; BSR set to: 0
  1609  001926  C0E9  F0A2         	movff	_OT,___ftge@ff1
  1610  00192A  C0EA  F0A3         	movff	_OT+1,___ftge@ff1+1
  1611  00192E  C0EB  F0A4         	movff	_OT+2,___ftge@ff1+2
  1612  001932  0E00               	movlw	0
  1613  001934  6FA5               	movwf	___ftge@ff2& (0+255),b
  1614  001936  0E20               	movlw	32
  1615  001938  6FA6               	movwf	(___ftge@ff2+1)& (0+255),b
  1616  00193A  0E42               	movlw	66
  1617  00193C  6FA7               	movwf	(___ftge@ff2+2)& (0+255),b
  1618  00193E  ECBE  F015         	call	___ftge	;wreg free
  1619  001942  0100               	movlb	0	; () banked
  1620  001944  B0D8               	btfsc	status,0,c
  1621  001946  D002               	goto	l240
  1622  001948                     u6610:
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;HW2_A.c: 435: current_mode = AUTO_COOL_HEAT;
  1626                           
  1627                           ; BSR set to: 0
  1628  001948  0E03               	movlw	3
  1629  00194A  6E55               	movwf	_current_mode,c
  1630  00194C                     l240:
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;HW2_A.c: 436: }
  1634                           ;HW2_A.c: 438: if(RB3==0){
  1635                           
  1636                           ; BSR set to: 0
  1637  00194C  B681               	btfsc	3969,3,c	;volatile
  1638  00194E  D002               	goto	l243
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;HW2_A.c: 440: current_mode = OFF;
  1642  001950  0E00               	movlw	0
  1643  001952  6E55               	movwf	_current_mode,c
  1644  001954                     l243:
  1645                           
  1646                           ; BSR set to: 0
  1647  001954  0004               	clrwdt		;# 
  1648                           
  1649                           ;HW2_A.c: 444: printingOnScreen();
  1650  001956  EC1E  F015         	call	_printingOnScreen	;wreg free
  1651                           
  1652                           ;HW2_A.c: 446: if (current_mode == OFF) {
  1653  00195A  5055               	movf	_current_mode,w,c
  1654  00195C  A4D8               	btfss	status,2,c
  1655  00195E  D003               	goto	l244
  1656                           
  1657                           ;HW2_A.c: 447: OffMode();
  1658  001960  EC97  F00E         	call	_OffMode	;wreg free
  1659                           
  1660                           ;HW2_A.c: 448: }
  1661  001964  D012               	goto	l250
  1662  001966                     l244:
  1663                           
  1664                           ;HW2_A.c: 449: else if (current_mode == COOL) {
  1665  001966  0455               	decf	_current_mode,w,c
  1666  001968  A4D8               	btfss	status,2,c
  1667  00196A  D003               	goto	l246
  1668                           
  1669                           ;HW2_A.c: 450: CoolMode();
  1670  00196C  ECD2  F00C         	call	_CoolMode	;wreg free
  1671                           
  1672                           ;HW2_A.c: 451: }
  1673  001970  D00C               	goto	l250
  1674  001972                     l246:
  1675                           
  1676                           ;HW2_A.c: 452: else if (current_mode == HEAT) {
  1677  001972  0E02               	movlw	2
  1678  001974  1855               	xorwf	_current_mode,w,c
  1679  001976  A4D8               	btfss	status,2,c
  1680  001978  D003               	goto	l248
  1681                           
  1682                           ;HW2_A.c: 453: heatMode();
  1683  00197A  ECB7  F00D         	call	_heatMode	;wreg free
  1684                           
  1685                           ;HW2_A.c: 454: }
  1686  00197E  D005               	goto	l250
  1687  001980                     l248:
  1688                           
  1689                           ;HW2_A.c: 455: else if (current_mode == AUTO_COOL_HEAT) {
  1690  001980  0E03               	movlw	3
  1691  001982  1855               	xorwf	_current_mode,w,c
  1692  001984  B4D8               	btfsc	status,2,c
  1693                           
  1694                           ;HW2_A.c: 456: autoCool();
  1695  001986  EC33  F005         	call	_autoCool	;wreg free
  1696  00198A                     l250:
  1697                           
  1698                           ;HW2_A.c: 457: }
  1699                           ;HW2_A.c: 459: if (SerialFlag) {
  1700  00198A  0100               	movlb	0	; () banked
  1701  00198C  51F2               	movf	_SerialFlag& (0+255),w,b	;volatile
  1702  00198E  11F3               	iorwf	(_SerialFlag+1)& (0+255),w,b	;volatile
  1703  001990  B4D8               	btfsc	status,2,c
  1704  001992  D712               	goto	l237
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;HW2_A.c: 460: SerialHandler();
  1708  001994  EC19  F014         	call	_SerialHandler	;wreg free
  1709                           
  1710                           ;HW2_A.c: 461: SerialFlag = 0;
  1711  001998  0E00               	movlw	0
  1712  00199A  0100               	movlb	0	; () banked
  1713  00199C  6FF3               	movwf	(_SerialFlag+1)& (0+255),b	;volatile
  1714  00199E  0E00               	movlw	0
  1715  0019A0  6FF2               	movwf	_SerialFlag& (0+255),b	;volatile
  1716                           
  1717                           ; BSR set to: 0
  1718                           
  1719                           ; BSR set to: 0
  1720  0019A2  D70A               	goto	l237
  1721  0019A4                     __end_of_main:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           intcon	equ	0xFF2
  1728                           postinc0	equ	0xFEE
  1729                           wreg	equ	0xFE8
  1730                           postdec1	equ	0xFE5
  1731                           fsr1l	equ	0xFE1
  1732                           status	equ	0xFD8
  1733                           
  1734 ;; *************** function _setupSerial *****************
  1735 ;; Defined at:
  1736 ;;		line 3 in file "my_ser.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  dummy           1   40[COMRAM] unsigned char 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, status,2
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;Total ram usage:        1 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    4
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text1
  1765  00336A                     __ptext1:
  1766                           	opt stack 0
  1767  00336A                     _setupSerial:
  1768                           	opt stack 26
  1769                           
  1770                           ;my_ser.c: 4: unsigned char dummy;
  1771                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 0;
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;incstack = 0
  1775  00336A  96B8               	bcf	4024,3,c	;volatile
  1776                           
  1777                           ;my_ser.c: 6: TXSTA = 0;
  1778  00336C  0E00               	movlw	0
  1779  00336E  6EAC               	movwf	4012,c	;volatile
  1780                           
  1781                           ;my_ser.c: 7: SPBRG = 25;
  1782  003370  0E19               	movlw	25
  1783  003372  6EAF               	movwf	4015,c	;volatile
  1784                           
  1785                           ;my_ser.c: 8: SPBRGH = 0;
  1786  003374  0E00               	movlw	0
  1787  003376  6EB0               	movwf	4016,c	;volatile
  1788                           
  1789                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
  1790  003378  84AC               	bsf	4012,2,c	;volatile
  1791                           
  1792                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
  1793  00337A  8AAC               	bsf	4012,5,c	;volatile
  1794                           
  1795                           ;my_ser.c: 12: RCSTA = 0;
  1796  00337C  0E00               	movlw	0
  1797  00337E  6EAB               	movwf	4011,c	;volatile
  1798                           
  1799                           ;my_ser.c: 13: RCSTAbits.CREN = 1;
  1800  003380  88AB               	bsf	4011,4,c	;volatile
  1801                           
  1802                           ;my_ser.c: 14: RCSTAbits.SPEN = 1;
  1803  003382  8EAB               	bsf	4011,7,c	;volatile
  1804                           
  1805                           ;my_ser.c: 15: ;
  1806                           ;my_ser.c: 16: dummy = RCREG;
  1807  003384  CFAE F029          	movff	4014,setupSerial@dummy	;volatile
  1808                           
  1809                           ;my_ser.c: 17: dummy = RCREG;
  1810  003388  CFAE F029          	movff	4014,setupSerial@dummy	;volatile
  1811  00338C  0012               	return	
  1812  00338E                     __end_of_setupSerial:
  1813                           	opt stack 0
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           intcon	equ	0xFF2
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           postdec1	equ	0xFE5
  1822                           fsr1l	equ	0xFE1
  1823                           status	equ	0xFD8
  1824                           
  1825 ;; *************** function _setupAllThings *****************
  1826 ;; Defined at:
  1827 ;;		line 202 in file "HW2_A.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;Total ram usage:        0 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    8
  1848 ;; This function calls:
  1849 ;;		_initPorts
  1850 ;;		_init_adc_no_lib
  1851 ;;		_lcd_init
  1852 ;;		_setupInterpurts
  1853 ;;		_setup_compare
  1854 ;; This function is called by:
  1855 ;;		_main
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text2
  1860  003456                     __ptext2:
  1861                           	opt stack 0
  1862  003456                     _setupAllThings:
  1863                           	opt stack 22
  1864                           
  1865                           ;HW2_A.c: 203: initPorts();
  1866                           
  1867                           ;incstack = 0
  1868  003456  EC37  F019         	call	_initPorts	;wreg free
  1869                           
  1870                           ;HW2_A.c: 204: setupInterpurts();
  1871  00345A  EC0D  F01A         	call	_setupInterpurts	;wreg free
  1872                           
  1873                           ;HW2_A.c: 205: lcd_init();
  1874  00345E  EC99  F017         	call	_lcd_init	;wreg free
  1875                           
  1876                           ;HW2_A.c: 206: init_adc_no_lib();
  1877  003462  EC4E  F01A         	call	_init_adc_no_lib	;wreg free
  1878                           
  1879                           ;HW2_A.c: 207: setup_compare();
  1880  003466  ECEB  F019         	call	_setup_compare	;wreg free
  1881  00346A  0012               	return		;funcret
  1882  00346C                     __end_of_setupAllThings:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _setup_compare *****************
  1896 ;; Defined at:
  1897 ;;		line 181 in file "HW2_A.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg, status,2
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    4
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_setupAllThings
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text3
  1926  0033D6                     __ptext3:
  1927                           	opt stack 0
  1928  0033D6                     _setup_compare:
  1929                           	opt stack 25
  1930                           
  1931                           ;HW2_A.c: 182: CCP2CON = 9;
  1932                           
  1933                           ;incstack = 0
  1934  0033D6  0E09               	movlw	9
  1935  0033D8  6EBA               	movwf	4026,c	;volatile
  1936                           
  1937                           ;HW2_A.c: 183: T3CON = 0x00;
  1938  0033DA  0E00               	movlw	0
  1939  0033DC  6EB1               	movwf	4017,c	;volatile
  1940                           
  1941                           ;HW2_A.c: 184: T3CONbits.TMR3CS = 0;
  1942  0033DE  92B1               	bcf	4017,1,c	;volatile
  1943                           
  1944                           ;HW2_A.c: 185: T3CONbits.T3CKPS = 0b10;
  1945  0033E0  50B1               	movf	4017,w,c	;volatile
  1946  0033E2  0BCF               	andlw	-49
  1947  0033E4  0920               	iorlw	32
  1948  0033E6  6EB1               	movwf	4017,c	;volatile
  1949                           
  1950                           ;HW2_A.c: 186: T3CONbits.T3CCP2 = 0;
  1951  0033E8  9CB1               	bcf	4017,6,c	;volatile
  1952                           
  1953                           ;HW2_A.c: 187: T3CONbits.T3CCP1 = 1;
  1954  0033EA  86B1               	bsf	4017,3,c	;volatile
  1955                           
  1956                           ;HW2_A.c: 188: TMR3 = 0;
  1957  0033EC  0E00               	movlw	0
  1958  0033EE  6EB3               	movwf	4019,c	;volatile
  1959  0033F0  0E00               	movlw	0
  1960  0033F2  6EB2               	movwf	4018,c	;volatile
  1961                           
  1962                           ;HW2_A.c: 189: T3CONbits.TMR3ON = 1;
  1963  0033F4  80B1               	bsf	4017,0,c	;volatile
  1964  0033F6  0012               	return		;funcret
  1965  0033F8                     __end_of_setup_compare:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           intcon	equ	0xFF2
  1972                           postinc0	equ	0xFEE
  1973                           wreg	equ	0xFE8
  1974                           postdec1	equ	0xFE5
  1975                           fsr1l	equ	0xFE1
  1976                           status	equ	0xFD8
  1977                           
  1978 ;; *************** function _setupInterpurts *****************
  1979 ;; Defined at:
  1980 ;;		line 171 in file "HW2_A.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;		None
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  1    wreg      void 
  1987 ;; Registers used:
  1988 ;;		wreg, status,2
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;Total ram usage:        0 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    4
  2001 ;; This function calls:
  2002 ;;		Nothing
  2003 ;; This function is called by:
  2004 ;;		_setupAllThings
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text4
  2009  00341A                     __ptext4:
  2010                           	opt stack 0
  2011  00341A                     _setupInterpurts:
  2012                           	opt stack 25
  2013                           
  2014                           ;HW2_A.c: 172: INTCON2 = 0b01010001;
  2015                           
  2016                           ;incstack = 0
  2017  00341A  0E51               	movlw	81
  2018  00341C  6EF1               	movwf	intcon2,c	;volatile
  2019                           
  2020                           ;HW2_A.c: 173: INTCON3 = 0b00011000;
  2021  00341E  0E18               	movlw	24
  2022  003420  6EF0               	movwf	intcon3,c	;volatile
  2023                           
  2024                           ;HW2_A.c: 174: INTCON = 0b11010000;
  2025  003422  0ED0               	movlw	208
  2026  003424  6EF2               	movwf	intcon,c	;volatile
  2027                           
  2028                           ;HW2_A.c: 175: RCON = 0b00000000;
  2029  003426  0E00               	movlw	0
  2030  003428  6ED0               	movwf	4048,c	;volatile
  2031                           
  2032                           ;HW2_A.c: 176: PIE2 = 0b00001001;
  2033  00342A  0E09               	movlw	9
  2034  00342C  6EA0               	movwf	4000,c	;volatile
  2035                           
  2036                           ;HW2_A.c: 177: PIR2 = 0b00000000;
  2037  00342E  0E00               	movlw	0
  2038  003430  6EA1               	movwf	4001,c	;volatile
  2039                           
  2040                           ;HW2_A.c: 178: IPR2 = 0b00000000;
  2041  003432  0E00               	movlw	0
  2042  003434  6EA2               	movwf	4002,c	;volatile
  2043  003436  0012               	return		;funcret
  2044  003438                     __end_of_setupInterpurts:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           intcon	equ	0xFF2
  2051                           intcon2	equ	0xFF1
  2052                           intcon3	equ	0xFF0
  2053                           postinc0	equ	0xFEE
  2054                           wreg	equ	0xFE8
  2055                           postdec1	equ	0xFE5
  2056                           fsr1l	equ	0xFE1
  2057                           status	equ	0xFD8
  2058                           
  2059 ;; *************** function _lcd_init *****************
  2060 ;; Defined at:
  2061 ;;		line 56 in file "lcd_x8.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;		None
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;  i               1   50[COMRAM] unsigned char 
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;Total ram usage:        1 bytes
  2080 ;; Hardware stack levels used:    1
  2081 ;; Hardware stack levels required when called:    7
  2082 ;; This function calls:
  2083 ;;		_delay_ms
  2084 ;;		_lcd_send_byte
  2085 ;;		_lcd_send_nibble
  2086 ;; This function is called by:
  2087 ;;		_setupAllThings
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	text5
  2092  002F32                     __ptext5:
  2093                           	opt stack 0
  2094  002F32                     _lcd_init:
  2095                           	opt stack 22
  2096                           
  2097                           ;lcd_x8.c: 58: unsigned char i;
  2098                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2099                           
  2100                           ;incstack = 0
  2101  002F32  9484               	bcf	3972,2,c	;volatile
  2102                           
  2103                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2104  002F34  9284               	bcf	3972,1,c	;volatile
  2105                           
  2106                           ;lcd_x8.c: 65: delay_ms(25);
  2107  002F36  0E00               	movlw	0
  2108  002F38  6E2A               	movwf	delay_ms@n+1,c
  2109  002F3A  0E19               	movlw	25
  2110  002F3C  6E29               	movwf	delay_ms@n,c
  2111  002F3E  ECA2  F019         	call	_delay_ms	;wreg free
  2112                           
  2113                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  2114  002F42  0E01               	movlw	1
  2115  002F44  6E33               	movwf	lcd_init@i,c
  2116  002F46                     l5253:
  2117  002F46  0E03               	movlw	3
  2118  002F48  6433               	cpfsgt	lcd_init@i,c
  2119  002F4A  D001               	goto	l291
  2120  002F4C  D00B               	goto	u5820
  2121  002F4E                     l291:
  2122                           
  2123                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  2124  002F4E  0E03               	movlw	3
  2125  002F50  ECFC  F019         	call	_lcd_send_nibble
  2126                           
  2127                           ;lcd_x8.c: 69: delay_ms(6);
  2128  002F54  0E00               	movlw	0
  2129  002F56  6E2A               	movwf	delay_ms@n+1,c
  2130  002F58  0E06               	movlw	6
  2131  002F5A  6E29               	movwf	delay_ms@n,c
  2132  002F5C  ECA2  F019         	call	_delay_ms	;wreg free
  2133  002F60  2A33               	incf	lcd_init@i,f,c
  2134  002F62  D7F1               	goto	l5253
  2135  002F64                     u5820:
  2136                           
  2137                           ;lcd_x8.c: 70: }
  2138                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  2139  002F64  0E02               	movlw	2
  2140  002F66  ECFC  F019         	call	_lcd_send_nibble
  2141                           
  2142                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  2143  002F6A  0E00               	movlw	0
  2144  002F6C  6E33               	movwf	lcd_init@i,c
  2145  002F6E                     l5267:
  2146  002F6E  0E03               	movlw	3
  2147  002F70  6433               	cpfsgt	lcd_init@i,c
  2148  002F72  D001               	goto	l293
  2149  002F74  0012               	return	
  2150  002F76                     l293:
  2151                           
  2152                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2153  002F76  5033               	movf	lcd_init@i,w,c
  2154  002F78  0D01               	mullw	1
  2155  002F7A  0E41               	movlw	low _LCD_INIT_STRING
  2156  002F7C  24F3               	addwf	prodl,w,c
  2157  002F7E  6ED9               	movwf	fsr2l,c
  2158  002F80  0E00               	movlw	high _LCD_INIT_STRING
  2159  002F82  20F4               	addwfc	prodh,w,c
  2160  002F84  6EDA               	movwf	fsr2h,c
  2161  002F86  50DF               	movf	indf2,w,c
  2162  002F88  6E31               	movwf	lcd_send_byte@n,c
  2163  002F8A  0E00               	movlw	0
  2164  002F8C  EC98  F018         	call	_lcd_send_byte
  2165  002F90  2A33               	incf	lcd_init@i,f,c
  2166  002F92  D7ED               	goto	l5267
  2167  002F94                     __end_of_lcd_init:
  2168                           	opt stack 0
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           prodh	equ	0xFF4
  2174                           prodl	equ	0xFF3
  2175                           intcon	equ	0xFF2
  2176                           intcon2	equ	0xFF1
  2177                           intcon3	equ	0xFF0
  2178                           postinc0	equ	0xFEE
  2179                           wreg	equ	0xFE8
  2180                           postdec1	equ	0xFE5
  2181                           fsr1l	equ	0xFE1
  2182                           indf2	equ	0xFDF
  2183                           fsr2h	equ	0xFDA
  2184                           fsr2l	equ	0xFD9
  2185                           status	equ	0xFD8
  2186                           
  2187 ;; *************** function _init_adc_no_lib *****************
  2188 ;; Defined at:
  2189 ;;		line 11 in file "my_adc.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;		None
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;		None
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, status,2
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;Total ram usage:        0 bytes
  2208 ;; Hardware stack levels used:    1
  2209 ;; Hardware stack levels required when called:    4
  2210 ;; This function calls:
  2211 ;;		Nothing
  2212 ;; This function is called by:
  2213 ;;		_setupAllThings
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text6
  2218  00349C                     __ptext6:
  2219                           	opt stack 0
  2220  00349C                     _init_adc_no_lib:
  2221                           	opt stack 25
  2222                           
  2223                           ;my_adc.c: 14: ADCON0 = 0;
  2224                           
  2225                           ;incstack = 0
  2226  00349C  0E00               	movlw	0
  2227  00349E  6EC2               	movwf	4034,c	;volatile
  2228                           
  2229                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  2230  0034A0  80C2               	bsf	4034,0,c	;volatile
  2231                           
  2232                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  2233  0034A2  0E89               	movlw	137
  2234  0034A4  6EC0               	movwf	4032,c	;volatile
  2235  0034A6  0012               	return		;funcret
  2236  0034A8                     __end_of_init_adc_no_lib:
  2237                           	opt stack 0
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           tblptrl	equ	0xFF6
  2241                           tablat	equ	0xFF5
  2242                           prodh	equ	0xFF4
  2243                           prodl	equ	0xFF3
  2244                           intcon	equ	0xFF2
  2245                           intcon2	equ	0xFF1
  2246                           intcon3	equ	0xFF0
  2247                           postinc0	equ	0xFEE
  2248                           wreg	equ	0xFE8
  2249                           postdec1	equ	0xFE5
  2250                           fsr1l	equ	0xFE1
  2251                           indf2	equ	0xFDF
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _initPorts *****************
  2257 ;; Defined at:
  2258 ;;		line 191 in file "HW2_A.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;		None
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, status,2
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2276 ;;Total ram usage:        0 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    4
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_setupAllThings
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text7
  2287  00326E                     __ptext7:
  2288                           	opt stack 0
  2289  00326E                     _initPorts:
  2290                           	opt stack 25
  2291                           
  2292                           ;HW2_A.c: 192: ADCON0 = 0;
  2293                           
  2294                           ;incstack = 0
  2295  00326E  0E00               	movlw	0
  2296  003270  6EC2               	movwf	4034,c	;volatile
  2297                           
  2298                           ;HW2_A.c: 193: ADCON1 = 0b00001100;
  2299  003272  0E0C               	movlw	12
  2300  003274  6EC1               	movwf	4033,c	;volatile
  2301                           
  2302                           ;HW2_A.c: 194: LATA = LATB = LATC = LATD = LATE = 0;
  2303  003276  0E00               	movlw	0
  2304  003278  6E8D               	movwf	3981,c	;volatile
  2305  00327A  CF8D FF8C          	movff	3981,3980	;volatile
  2306  00327E  CF8C FF8B          	movff	3980,3979	;volatile
  2307  003282  CF8B FF8A          	movff	3979,3978	;volatile
  2308  003286  CF8A FF89          	movff	3978,3977	;volatile
  2309                           
  2310                           ;HW2_A.c: 195: TRISA = 0xFF;
  2311  00328A  6892               	setf	3986,c	;volatile
  2312                           
  2313                           ;HW2_A.c: 196: TRISB = 0xFF;
  2314  00328C  6893               	setf	3987,c	;volatile
  2315                           
  2316                           ;HW2_A.c: 197: TRISC = 0x80;
  2317  00328E  0E80               	movlw	128
  2318  003290  6E94               	movwf	3988,c	;volatile
  2319                           
  2320                           ;HW2_A.c: 198: TRISD = 0;
  2321  003292  0E00               	movlw	0
  2322  003294  6E95               	movwf	3989,c	;volatile
  2323                           
  2324                           ;HW2_A.c: 199: TRISE = 0;
  2325  003296  0E00               	movlw	0
  2326  003298  6E96               	movwf	3990,c	;volatile
  2327  00329A  0012               	return		;funcret
  2328  00329C                     __end_of_initPorts:
  2329                           	opt stack 0
  2330                           tblptru	equ	0xFF8
  2331                           tblptrh	equ	0xFF7
  2332                           tblptrl	equ	0xFF6
  2333                           tablat	equ	0xFF5
  2334                           prodh	equ	0xFF4
  2335                           prodl	equ	0xFF3
  2336                           intcon	equ	0xFF2
  2337                           intcon2	equ	0xFF1
  2338                           intcon3	equ	0xFF0
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           postdec1	equ	0xFE5
  2342                           fsr1l	equ	0xFE1
  2343                           indf2	equ	0xFDF
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function _read_adc_voltage *****************
  2349 ;; Defined at:
  2350 ;;		line 48 in file "my_adc.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  channel         1    wreg     unsigned char 
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  channel         1   33[BANK0 ] unsigned char 
  2355 ;;  voltage         3   30[BANK0 ] float 
  2356 ;;  raw_value       2   34[BANK0 ] int 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  3   27[BANK0 ] float 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2366 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;Total ram usage:        9 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    6
  2373 ;; This function calls:
  2374 ;;		___awtoft
  2375 ;;		___ftdiv
  2376 ;;		___wmul
  2377 ;;		_read_adc_raw_no_lib
  2378 ;; This function is called by:
  2379 ;;		_main
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text8
  2384  002DF4                     __ptext8:
  2385                           	opt stack 0
  2386  002DF4                     _read_adc_voltage:
  2387                           	opt stack 24
  2388                           
  2389                           ;incstack = 0
  2390                           ;read_adc_voltage@channel stored from wreg
  2391  002DF4  0100               	movlb	0	; () banked
  2392  002DF6  6FA1               	movwf	read_adc_voltage@channel& (0+255),b
  2393                           
  2394                           ;my_adc.c: 49: int raw_value;
  2395                           ;my_adc.c: 50: float voltage;
  2396                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  2397  002DF8  0100               	movlb	0	; () banked
  2398  002DFA  51A1               	movf	read_adc_voltage@channel& (0+255),w,b
  2399  002DFC  ECFE  F018         	call	_read_adc_raw_no_lib
  2400  002E00  C029  F0A2         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  2401  002E04  C02A  F0A3         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  2402                           
  2403                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  2404  002E08  C0A2  F037         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  2405  002E0C  C0A3  F038         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  2406  002E10  0E00               	movlw	0
  2407  002E12  6E3A               	movwf	___wmul@multiplicand+1,c
  2408  002E14  0E05               	movlw	5
  2409  002E16  6E39               	movwf	___wmul@multiplicand,c
  2410  002E18  EC7C  F019         	call	___wmul	;wreg free
  2411  002E1C  C037  F03D         	movff	?___wmul,___awtoft@c
  2412  002E20  C038  F03E         	movff	?___wmul+1,___awtoft@c+1
  2413  002E24  EC1B  F019         	call	___awtoft	;wreg free
  2414  002E28  C03D  F08C         	movff	?___awtoft,___ftdiv@f1
  2415  002E2C  C03E  F08D         	movff	?___awtoft+1,___ftdiv@f1+1
  2416  002E30  C03F  F08E         	movff	?___awtoft+2,___ftdiv@f1+2
  2417  002E34  0EC0               	movlw	192
  2418  002E36  0100               	movlb	0	; () banked
  2419  002E38  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2420  002E3A  0E7F               	movlw	127
  2421  002E3C  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2422  002E3E  0E44               	movlw	68
  2423  002E40  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2424  002E42  EC43  F013         	call	___ftdiv	;wreg free
  2425  002E46  C08C  F09E         	movff	?___ftdiv,read_adc_voltage@voltage
  2426  002E4A  C08D  F09F         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  2427  002E4E  C08E  F0A0         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  2428                           
  2429                           ;my_adc.c: 53: return voltage;
  2430  002E52  C09E  F09B         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  2431  002E56  C09F  F09C         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  2432  002E5A  C0A0  F09D         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  2433  002E5E  0012               	return	
  2434  002E60                     __end_of_read_adc_voltage:
  2435                           	opt stack 0
  2436                           tblptru	equ	0xFF8
  2437                           tblptrh	equ	0xFF7
  2438                           tblptrl	equ	0xFF6
  2439                           tablat	equ	0xFF5
  2440                           prodh	equ	0xFF4
  2441                           prodl	equ	0xFF3
  2442                           intcon	equ	0xFF2
  2443                           intcon2	equ	0xFF1
  2444                           intcon3	equ	0xFF0
  2445                           postinc0	equ	0xFEE
  2446                           wreg	equ	0xFE8
  2447                           postdec1	equ	0xFE5
  2448                           fsr1l	equ	0xFE1
  2449                           indf2	equ	0xFDF
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _printingOnScreen *****************
  2455 ;; Defined at:
  2456 ;;		line 395 in file "HW2_A.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;Total ram usage:        3 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:   10
  2477 ;; This function calls:
  2478 ;;		___awtoft
  2479 ;;		___ftdiv
  2480 ;;		___ftmul
  2481 ;;		_lcd_gotoxy
  2482 ;;		_lcd_puts
  2483 ;;		_read_adc_raw_no_lib
  2484 ;;		_sprintf
  2485 ;; This function is called by:
  2486 ;;		_main
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text9
  2491  002A3C                     __ptext9:
  2492                           	opt stack 0
  2493  002A3C                     _printingOnScreen:
  2494                           	opt stack 20
  2495                           
  2496                           ;HW2_A.c: 399: AI2 = read_adc_raw_no_lib(2);
  2497                           
  2498                           ;incstack = 0
  2499  002A3C  0E02               	movlw	2
  2500  002A3E  ECFE  F018         	call	_read_adc_raw_no_lib
  2501  002A42  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  2502  002A46  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  2503  002A4A  EC1B  F019         	call	___awtoft	;wreg free
  2504  002A4E  C03D  F0F9         	movff	?___awtoft,_AI2
  2505  002A52  C03E  F0FA         	movff	?___awtoft+1,_AI2+1
  2506  002A56  C03F  F0FB         	movff	?___awtoft+2,_AI2+2
  2507                           
  2508                           ;HW2_A.c: 401: lcd_gotoxy(1, 1);
  2509  002A5A  0E01               	movlw	1
  2510  002A5C  6E33               	movwf	lcd_gotoxy@y,c
  2511  002A5E  0E01               	movlw	1
  2512  002A60  ECDD  F018         	call	_lcd_gotoxy
  2513                           
  2514                           ;HW2_A.c: 402: sprintf(Buffer, "RT: %4.1fC    H C",(AI2*100.0*5.0)/1023.0);
  2515  002A64  0E00               	movlw	0
  2516  002A66  0100               	movlb	0	; () banked
  2517  002A68  6F83               	movwf	___ftmul@f2& (0+255),b
  2518  002A6A  0EFA               	movlw	250
  2519  002A6C  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  2520  002A6E  0E43               	movlw	67
  2521  002A70  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  2522  002A72  C0F9  F080         	movff	_AI2,___ftmul@f1
  2523  002A76  C0FA  F081         	movff	_AI2+1,___ftmul@f1+1
  2524  002A7A  C0FB  F082         	movff	_AI2+2,___ftmul@f1+2
  2525  002A7E  ECC8  F012         	call	___ftmul	;wreg free
  2526  002A82  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  2527  002A86  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  2528  002A8A  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  2529  002A8E  0EC0               	movlw	192
  2530  002A90  0100               	movlb	0	; () banked
  2531  002A92  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2532  002A94  0E7F               	movlw	127
  2533  002A96  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2534  002A98  0E44               	movlw	68
  2535  002A9A  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2536  002A9C  EC43  F013         	call	___ftdiv	;wreg free
  2537  002AA0  C08C  F0E1         	movff	?___ftdiv,_printingOnScreen$1901
  2538  002AA4  C08D  F0E2         	movff	?___ftdiv+1,_printingOnScreen$1901+1
  2539  002AA8  C08E  F0E3         	movff	?___ftdiv+2,_printingOnScreen$1901+2
  2540                           
  2541                           ;HW2_A.c: 402: sprintf(Buffer, "RT: %4.1fC    H C",(AI2*100.0*5.0)/1023.0);
  2542  002AAC  0E00               	movlw	low _Buffer
  2543  002AAE  0100               	movlb	0	; () banked
  2544  002AB0  6FB1               	movwf	sprintf@sp& (0+255),b
  2545  002AB2  0E01               	movlw	high _Buffer
  2546  002AB4  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  2547  002AB6  0E5F               	movlw	low STR_14
  2548  002AB8  6FB3               	movwf	sprintf@f& (0+255),b
  2549  002ABA  0EFF               	movlw	high STR_14
  2550  002ABC  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  2551  002ABE  C0E1  F0B5         	movff	_printingOnScreen$1901,?_sprintf+4
  2552  002AC2  C0E2  F0B6         	movff	_printingOnScreen$1901+1,?_sprintf+5
  2553  002AC6  C0E3  F0B7         	movff	_printingOnScreen$1901+2,?_sprintf+6
  2554  002ACA  EC09  F000         	call	_sprintf	;wreg free
  2555                           
  2556                           ;HW2_A.c: 403: lcd_puts(Buffer);
  2557  002ACE  0E00               	movlw	low _Buffer
  2558  002AD0  6E37               	movwf	lcd_puts@s,c
  2559  002AD2  0E01               	movlw	high _Buffer
  2560  002AD4  6E38               	movwf	lcd_puts@s+1,c
  2561  002AD6  ECD9  F019         	call	_lcd_puts	;wreg free
  2562  002ADA  0012               	return		;funcret
  2563  002ADC                     __end_of_printingOnScreen:
  2564                           	opt stack 0
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           prodh	equ	0xFF4
  2570                           prodl	equ	0xFF3
  2571                           intcon	equ	0xFF2
  2572                           intcon2	equ	0xFF1
  2573                           intcon3	equ	0xFF0
  2574                           postinc0	equ	0xFEE
  2575                           wreg	equ	0xFE8
  2576                           postdec1	equ	0xFE5
  2577                           fsr1l	equ	0xFE1
  2578                           indf2	equ	0xFDF
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _heatMode *****************
  2584 ;; Defined at:
  2585 ;;		line 263 in file "HW2_A.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  compare_valu    2   97[BANK0 ] int 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;Total ram usage:        5 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:   10
  2606 ;; This function calls:
  2607 ;;		___awtoft
  2608 ;;		___ftdiv
  2609 ;;		___ftmul
  2610 ;;		_lcd_gotoxy
  2611 ;;		_lcd_puts
  2612 ;;		_read_adc_raw_no_lib
  2613 ;;		_sprintf
  2614 ;; This function is called by:
  2615 ;;		_main
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text10
  2620  001B6E                     __ptext10:
  2621                           	opt stack 0
  2622  001B6E                     _heatMode:
  2623                           	opt stack 20
  2624                           
  2625                           ;HW2_A.c: 264: AI3 = read_adc_raw_no_lib(1);
  2626                           
  2627                           ;incstack = 0
  2628  001B6E  0E01               	movlw	1
  2629  001B70  ECFE  F018         	call	_read_adc_raw_no_lib
  2630  001B74  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  2631  001B78  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  2632  001B7C  EC1B  F019         	call	___awtoft	;wreg free
  2633  001B80  C03D  F0F6         	movff	?___awtoft,_AI3
  2634  001B84  C03E  F0F7         	movff	?___awtoft+1,_AI3+1
  2635  001B88  C03F  F0F8         	movff	?___awtoft+2,_AI3+2
  2636                           
  2637                           ;HW2_A.c: 265: AI0 = read_adc_raw_no_lib(0);
  2638  001B8C  0E00               	movlw	0
  2639  001B8E  ECFE  F018         	call	_read_adc_raw_no_lib
  2640  001B92  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  2641  001B96  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  2642  001B9A  EC1B  F019         	call	___awtoft	;wreg free
  2643  001B9E  C03D  F0FC         	movff	?___awtoft,_AI0
  2644  001BA2  C03E  F0FD         	movff	?___awtoft+1,_AI0+1
  2645  001BA6  C03F  F0FE         	movff	?___awtoft+2,_AI0+2
  2646                           
  2647                           ;HW2_A.c: 266: lcd_gotoxy(1, 2);
  2648  001BAA  0E02               	movlw	2
  2649  001BAC  6E33               	movwf	lcd_gotoxy@y,c
  2650  001BAE  0E01               	movlw	1
  2651  001BB0  ECDD  F018         	call	_lcd_gotoxy
  2652                           
  2653                           ;HW2_A.c: 267: sprintf(Buffer, "SP: %4.1fC    N Y",(AI0*5.0*100.0)/1023.0/5.0);
  2654  001BB4  0EC0               	movlw	192
  2655  001BB6  0100               	movlb	0	; () banked
  2656  001BB8  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2657  001BBA  0E7F               	movlw	127
  2658  001BBC  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2659  001BBE  0E44               	movlw	68
  2660  001BC0  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2661  001BC2  0E00               	movlw	0
  2662  001BC4  6F83               	movwf	___ftmul@f2& (0+255),b
  2663  001BC6  0EFA               	movlw	250
  2664  001BC8  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  2665  001BCA  0E43               	movlw	67
  2666  001BCC  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  2667  001BCE  C0FC  F080         	movff	_AI0,___ftmul@f1
  2668  001BD2  C0FD  F081         	movff	_AI0+1,___ftmul@f1+1
  2669  001BD6  C0FE  F082         	movff	_AI0+2,___ftmul@f1+2
  2670  001BDA  ECC8  F012         	call	___ftmul	;wreg free
  2671  001BDE  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  2672  001BE2  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  2673  001BE6  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  2674  001BEA  EC43  F013         	call	___ftdiv	;wreg free
  2675  001BEE  C08C  F0E3         	movff	?___ftdiv,_heatMode$1897
  2676  001BF2  C08D  F0E4         	movff	?___ftdiv+1,_heatMode$1897+1
  2677  001BF6  C08E  F0E5         	movff	?___ftdiv+2,_heatMode$1897+2
  2678                           
  2679                           ;HW2_A.c: 267: sprintf(Buffer, "SP: %4.1fC    N Y",(AI0*5.0*100.0)/1023.0/5.0);
  2680  001BFA  0E00               	movlw	low _Buffer
  2681  001BFC  0100               	movlb	0	; () banked
  2682  001BFE  6FB1               	movwf	sprintf@sp& (0+255),b
  2683  001C00  0E01               	movlw	high _Buffer
  2684  001C02  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  2685  001C04  0E95               	movlw	low STR_7
  2686  001C06  6FB3               	movwf	sprintf@f& (0+255),b
  2687  001C08  0EFF               	movlw	high STR_7
  2688  001C0A  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  2689  001C0C  C0E3  F08C         	movff	_heatMode$1897,___ftdiv@f1
  2690  001C10  C0E4  F08D         	movff	_heatMode$1897+1,___ftdiv@f1+1
  2691  001C14  C0E5  F08E         	movff	_heatMode$1897+2,___ftdiv@f1+2
  2692  001C18  0E00               	movlw	0
  2693  001C1A  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2694  001C1C  0EA0               	movlw	160
  2695  001C1E  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2696  001C20  0E40               	movlw	64
  2697  001C22  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2698  001C24  EC43  F013         	call	___ftdiv	;wreg free
  2699  001C28  C08C  F0B5         	movff	?___ftdiv,?_sprintf+4
  2700  001C2C  C08D  F0B6         	movff	?___ftdiv+1,?_sprintf+5
  2701  001C30  C08E  F0B7         	movff	?___ftdiv+2,?_sprintf+6
  2702  001C34  EC09  F000         	call	_sprintf	;wreg free
  2703                           
  2704                           ;HW2_A.c: 268: lcd_puts(Buffer);
  2705  001C38  0E00               	movlw	low _Buffer
  2706  001C3A  6E37               	movwf	lcd_puts@s,c
  2707  001C3C  0E01               	movlw	high _Buffer
  2708  001C3E  6E38               	movwf	lcd_puts@s+1,c
  2709  001C40  ECD9  F019         	call	_lcd_puts	;wreg free
  2710                           
  2711                           ;HW2_A.c: 269: lcd_gotoxy(1, 4);
  2712  001C44  0E04               	movlw	4
  2713  001C46  6E33               	movwf	lcd_gotoxy@y,c
  2714  001C48  0E01               	movlw	1
  2715  001C4A  ECDD  F018         	call	_lcd_gotoxy
  2716                           
  2717                           ;HW2_A.c: 270: sprintf(Buffer,"MD:Heat         ");
  2718  001C4E  0E00               	movlw	low _Buffer
  2719  001C50  0100               	movlb	0	; () banked
  2720  001C52  6FB1               	movwf	sprintf@sp& (0+255),b
  2721  001C54  0E01               	movlw	high _Buffer
  2722  001C56  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  2723  001C58  0EED               	movlw	low STR_8
  2724  001C5A  6FB3               	movwf	sprintf@f& (0+255),b
  2725  001C5C  0EFF               	movlw	high STR_8
  2726  001C5E  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  2727  001C60  EC09  F000         	call	_sprintf	;wreg free
  2728                           
  2729                           ;HW2_A.c: 271: lcd_puts(Buffer);
  2730  001C64  0E00               	movlw	low _Buffer
  2731  001C66  6E37               	movwf	lcd_puts@s,c
  2732  001C68  0E01               	movlw	high _Buffer
  2733  001C6A  6E38               	movwf	lcd_puts@s+1,c
  2734  001C6C  ECD9  F019         	call	_lcd_puts	;wreg free
  2735                           
  2736                           ;HW2_A.c: 272: lcd_gotoxy(1, 3);
  2737  001C70  0E03               	movlw	3
  2738  001C72  6E33               	movwf	lcd_gotoxy@y,c
  2739  001C74  0E01               	movlw	1
  2740  001C76  ECDD  F018         	call	_lcd_gotoxy
  2741                           
  2742                           ;HW2_A.c: 273: sprintf(Buffer, "OT: %4.1fC H: %2.1f%%", (AI3*5.0*100.0)/1023.0/5.0,AI1);
  2743  001C7A  0EC0               	movlw	192
  2744  001C7C  0100               	movlb	0	; () banked
  2745  001C7E  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2746  001C80  0E7F               	movlw	127
  2747  001C82  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2748  001C84  0E44               	movlw	68
  2749  001C86  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2750  001C88  0E00               	movlw	0
  2751  001C8A  6F83               	movwf	___ftmul@f2& (0+255),b
  2752  001C8C  0EFA               	movlw	250
  2753  001C8E  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  2754  001C90  0E43               	movlw	67
  2755  001C92  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  2756  001C94  C0F6  F080         	movff	_AI3,___ftmul@f1
  2757  001C98  C0F7  F081         	movff	_AI3+1,___ftmul@f1+1
  2758  001C9C  C0F8  F082         	movff	_AI3+2,___ftmul@f1+2
  2759  001CA0  ECC8  F012         	call	___ftmul	;wreg free
  2760  001CA4  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  2761  001CA8  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  2762  001CAC  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  2763  001CB0  EC43  F013         	call	___ftdiv	;wreg free
  2764  001CB4  C08C  F0E3         	movff	?___ftdiv,_heatMode$1897
  2765  001CB8  C08D  F0E4         	movff	?___ftdiv+1,_heatMode$1897+1
  2766  001CBC  C08E  F0E5         	movff	?___ftdiv+2,_heatMode$1897+2
  2767                           
  2768                           ;HW2_A.c: 273: sprintf(Buffer, "OT: %4.1fC H: %2.1f%%", (AI3*5.0*100.0)/1023.0/5.0,AI1);
  2769  001CC0  0E00               	movlw	low _Buffer
  2770  001CC2  0100               	movlb	0	; () banked
  2771  001CC4  6FB1               	movwf	sprintf@sp& (0+255),b
  2772  001CC6  0E01               	movlw	high _Buffer
  2773  001CC8  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  2774  001CCA  0E23               	movlw	low STR_9
  2775  001CCC  6FB3               	movwf	sprintf@f& (0+255),b
  2776  001CCE  0EFF               	movlw	high STR_9
  2777  001CD0  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  2778  001CD2  C0E3  F08C         	movff	_heatMode$1897,___ftdiv@f1
  2779  001CD6  C0E4  F08D         	movff	_heatMode$1897+1,___ftdiv@f1+1
  2780  001CDA  C0E5  F08E         	movff	_heatMode$1897+2,___ftdiv@f1+2
  2781  001CDE  0E00               	movlw	0
  2782  001CE0  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2783  001CE2  0EA0               	movlw	160
  2784  001CE4  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2785  001CE6  0E40               	movlw	64
  2786  001CE8  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2787  001CEA  EC43  F013         	call	___ftdiv	;wreg free
  2788  001CEE  C08C  F0B5         	movff	?___ftdiv,?_sprintf+4
  2789  001CF2  C08D  F0B6         	movff	?___ftdiv+1,?_sprintf+5
  2790  001CF6  C08E  F0B7         	movff	?___ftdiv+2,?_sprintf+6
  2791  001CFA  C045  F0B8         	movff	_AI1,?_sprintf+7
  2792  001CFE  C046  F0B9         	movff	_AI1+1,?_sprintf+8
  2793  001D02  C047  F0BA         	movff	_AI1+2,?_sprintf+9
  2794  001D06  EC09  F000         	call	_sprintf	;wreg free
  2795                           
  2796                           ;HW2_A.c: 274: lcd_puts(Buffer);
  2797  001D0A  0E00               	movlw	low _Buffer
  2798  001D0C  6E37               	movwf	lcd_puts@s,c
  2799  001D0E  0E01               	movlw	high _Buffer
  2800  001D10  6E38               	movwf	lcd_puts@s+1,c
  2801  001D12  ECD9  F019         	call	_lcd_puts	;wreg free
  2802                           
  2803                           ;HW2_A.c: 276: PIE2bits.TMR3IE = 1;
  2804  001D16  82A0               	bsf	4000,1,c	;volatile
  2805                           
  2806                           ;HW2_A.c: 277: PIE2bits.CCP2IE = 1;
  2807  001D18  80A0               	bsf	4000,0,c	;volatile
  2808                           
  2809                           ;HW2_A.c: 281: PIE2bits.TMR3IE = 1;
  2810  001D1A  82A0               	bsf	4000,1,c	;volatile
  2811                           
  2812                           ;HW2_A.c: 282: PIE2bits.CCP2IE = 1;
  2813  001D1C  80A0               	bsf	4000,0,c	;volatile
  2814                           
  2815                           ;HW2_A.c: 283: int compare_value = (int) (100 * 65535 / 100.0);
  2816  001D1E  0100               	movlb	0	; () banked
  2817  001D20  69E1               	setf	heatMode@compare_value& (0+255),b
  2818  001D22  69E2               	setf	(heatMode@compare_value+1)& (0+255),b
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;HW2_A.c: 284: CCPR2H = (compare_value >>8) & 0x00FF;
  2822  001D24  51E2               	movf	(heatMode@compare_value+1)& (0+255),w,b
  2823  001D26  6EBC               	movwf	4028,c	;volatile
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;HW2_A.c: 285: CCPR2L = compare_value & 0x00FF;
  2827  001D28  C0E1  FFBB         	movff	heatMode@compare_value,4027	;volatile
  2828                           
  2829                           ; BSR set to: 0
  2830  001D2C  0012               	return		;funcret
  2831  001D2E                     __end_of_heatMode:
  2832                           	opt stack 0
  2833                           tblptru	equ	0xFF8
  2834                           tblptrh	equ	0xFF7
  2835                           tblptrl	equ	0xFF6
  2836                           tablat	equ	0xFF5
  2837                           prodh	equ	0xFF4
  2838                           prodl	equ	0xFF3
  2839                           intcon	equ	0xFF2
  2840                           intcon2	equ	0xFF1
  2841                           intcon3	equ	0xFF0
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           postdec1	equ	0xFE5
  2845                           fsr1l	equ	0xFE1
  2846                           indf2	equ	0xFDF
  2847                           fsr2h	equ	0xFDA
  2848                           fsr2l	equ	0xFD9
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _autoCool *****************
  2852 ;; Defined at:
  2853 ;;		line 287 in file "HW2_A.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;  percent_heat    3   14[BANK1 ] float 
  2858 ;;  compare_valu    2    6[BANK1 ] int 
  2859 ;;  percent_valu    3   11[BANK1 ] float 
  2860 ;;  T               3   20[BANK1 ] float 
  2861 ;;  SP              3   17[BANK1 ] float 
  2862 ;;  heatError       3    3[BANK1 ] float 
  2863 ;;  coolError       3    0[BANK1 ] float 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Totals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;Total ram usage:       26 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:   10
  2880 ;; This function calls:
  2881 ;;		___awtoft
  2882 ;;		___ftadd
  2883 ;;		___ftdiv
  2884 ;;		___ftge
  2885 ;;		___ftmul
  2886 ;;		___ftneg
  2887 ;;		___fttol
  2888 ;;		_init_pwm1
  2889 ;;		_lcd_gotoxy
  2890 ;;		_lcd_puts
  2891 ;;		_read_adc_raw_no_lib
  2892 ;;		_set_pwm1_percent
  2893 ;;		_sprintf
  2894 ;; This function is called by:
  2895 ;;		_main
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text11
  2900  000A66                     __ptext11:
  2901                           	opt stack 0
  2902  000A66                     _autoCool:
  2903                           	opt stack 20
  2904                           
  2905                           ;HW2_A.c: 288: AI3 = read_adc_raw_no_lib(1);
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;incstack = 0
  2909  000A66  0E01               	movlw	1
  2910  000A68  ECFE  F018         	call	_read_adc_raw_no_lib
  2911  000A6C  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  2912  000A70  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  2913  000A74  EC1B  F019         	call	___awtoft	;wreg free
  2914  000A78  C03D  F0F6         	movff	?___awtoft,_AI3
  2915  000A7C  C03E  F0F7         	movff	?___awtoft+1,_AI3+1
  2916  000A80  C03F  F0F8         	movff	?___awtoft+2,_AI3+2
  2917                           
  2918                           ;HW2_A.c: 289: AI0 = read_adc_raw_no_lib(0);
  2919  000A84  0E00               	movlw	0
  2920  000A86  ECFE  F018         	call	_read_adc_raw_no_lib
  2921  000A8A  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  2922  000A8E  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  2923  000A92  EC1B  F019         	call	___awtoft	;wreg free
  2924  000A96  C03D  F0FC         	movff	?___awtoft,_AI0
  2925  000A9A  C03E  F0FD         	movff	?___awtoft+1,_AI0+1
  2926  000A9E  C03F  F0FE         	movff	?___awtoft+2,_AI0+2
  2927                           
  2928                           ;HW2_A.c: 290: lcd_gotoxy(1, 2);
  2929  000AA2  0E02               	movlw	2
  2930  000AA4  6E33               	movwf	lcd_gotoxy@y,c
  2931  000AA6  0E01               	movlw	1
  2932  000AA8  ECDD  F018         	call	_lcd_gotoxy
  2933                           
  2934                           ;HW2_A.c: 291: sprintf(Buffer, "SP: %4.1fC    N N",(AI0*5.0*100.0)/1023.0/5.0);
  2935  000AAC  0EC0               	movlw	192
  2936  000AAE  0100               	movlb	0	; () banked
  2937  000AB0  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2938  000AB2  0E7F               	movlw	127
  2939  000AB4  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2940  000AB6  0E44               	movlw	68
  2941  000AB8  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2942  000ABA  0E00               	movlw	0
  2943  000ABC  6F83               	movwf	___ftmul@f2& (0+255),b
  2944  000ABE  0EFA               	movlw	250
  2945  000AC0  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  2946  000AC2  0E43               	movlw	67
  2947  000AC4  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  2948  000AC6  C0FC  F080         	movff	_AI0,___ftmul@f1
  2949  000ACA  C0FD  F081         	movff	_AI0+1,___ftmul@f1+1
  2950  000ACE  C0FE  F082         	movff	_AI0+2,___ftmul@f1+2
  2951  000AD2  ECC8  F012         	call	___ftmul	;wreg free
  2952  000AD6  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  2953  000ADA  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  2954  000ADE  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  2955  000AE2  EC43  F013         	call	___ftdiv	;wreg free
  2956  000AE6  C08C  F128         	movff	?___ftdiv,_autoCool$1898
  2957  000AEA  C08D  F129         	movff	?___ftdiv+1,_autoCool$1898+1
  2958  000AEE  C08E  F12A         	movff	?___ftdiv+2,_autoCool$1898+2
  2959                           
  2960                           ;HW2_A.c: 291: sprintf(Buffer, "SP: %4.1fC    N N",(AI0*5.0*100.0)/1023.0/5.0);
  2961  000AF2  0E00               	movlw	low _Buffer
  2962  000AF4  0100               	movlb	0	; () banked
  2963  000AF6  6FB1               	movwf	sprintf@sp& (0+255),b
  2964  000AF8  0E01               	movlw	high _Buffer
  2965  000AFA  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  2966  000AFC  0E71               	movlw	low STR_10
  2967  000AFE  6FB3               	movwf	sprintf@f& (0+255),b
  2968  000B00  0EFF               	movlw	high STR_10
  2969  000B02  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  2970  000B04  C128  F08C         	movff	_autoCool$1898,___ftdiv@f1
  2971  000B08  C129  F08D         	movff	_autoCool$1898+1,___ftdiv@f1+1
  2972  000B0C  C12A  F08E         	movff	_autoCool$1898+2,___ftdiv@f1+2
  2973  000B10  0E00               	movlw	0
  2974  000B12  6F8F               	movwf	___ftdiv@f2& (0+255),b
  2975  000B14  0EA0               	movlw	160
  2976  000B16  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  2977  000B18  0E40               	movlw	64
  2978  000B1A  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  2979  000B1C  EC43  F013         	call	___ftdiv	;wreg free
  2980  000B20  C08C  F0B5         	movff	?___ftdiv,?_sprintf+4
  2981  000B24  C08D  F0B6         	movff	?___ftdiv+1,?_sprintf+5
  2982  000B28  C08E  F0B7         	movff	?___ftdiv+2,?_sprintf+6
  2983  000B2C  EC09  F000         	call	_sprintf	;wreg free
  2984                           
  2985                           ;HW2_A.c: 292: lcd_puts(Buffer);
  2986  000B30  0E00               	movlw	low _Buffer
  2987  000B32  6E37               	movwf	lcd_puts@s,c
  2988  000B34  0E01               	movlw	high _Buffer
  2989  000B36  6E38               	movwf	lcd_puts@s+1,c
  2990  000B38  ECD9  F019         	call	_lcd_puts	;wreg free
  2991                           
  2992                           ;HW2_A.c: 293: lcd_gotoxy(1, 4);
  2993  000B3C  0E04               	movlw	4
  2994  000B3E  6E33               	movwf	lcd_gotoxy@y,c
  2995  000B40  0E01               	movlw	1
  2996  000B42  ECDD  F018         	call	_lcd_gotoxy
  2997                           
  2998                           ;HW2_A.c: 294: sprintf(Buffer,"MD:Auto HC HS: %d",Hs);
  2999  000B46  0E00               	movlw	low _Buffer
  3000  000B48  0100               	movlb	0	; () banked
  3001  000B4A  6FB1               	movwf	sprintf@sp& (0+255),b
  3002  000B4C  0E01               	movlw	high _Buffer
  3003  000B4E  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  3004  000B50  0EB9               	movlw	low STR_11
  3005  000B52  6FB3               	movwf	sprintf@f& (0+255),b
  3006  000B54  0EFF               	movlw	high STR_11
  3007  000B56  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  3008  000B58  C048  F0B5         	movff	_Hs,?_sprintf+4
  3009  000B5C  C049  F0B6         	movff	_Hs+1,?_sprintf+5
  3010  000B60  EC09  F000         	call	_sprintf	;wreg free
  3011                           
  3012                           ;HW2_A.c: 295: lcd_puts(Buffer);
  3013  000B64  0E00               	movlw	low _Buffer
  3014  000B66  6E37               	movwf	lcd_puts@s,c
  3015  000B68  0E01               	movlw	high _Buffer
  3016  000B6A  6E38               	movwf	lcd_puts@s+1,c
  3017  000B6C  ECD9  F019         	call	_lcd_puts	;wreg free
  3018                           
  3019                           ;HW2_A.c: 296: lcd_gotoxy(1, 3);
  3020  000B70  0E03               	movlw	3
  3021  000B72  6E33               	movwf	lcd_gotoxy@y,c
  3022  000B74  0E01               	movlw	1
  3023  000B76  ECDD  F018         	call	_lcd_gotoxy
  3024                           
  3025                           ;HW2_A.c: 297: sprintf(Buffer, "OT: %4.1fC R: 0.0", (AI3*5.0*100.0)/1023.0/5.0);
  3026  000B7A  0EC0               	movlw	192
  3027  000B7C  0100               	movlb	0	; () banked
  3028  000B7E  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3029  000B80  0E7F               	movlw	127
  3030  000B82  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3031  000B84  0E44               	movlw	68
  3032  000B86  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3033  000B88  0E00               	movlw	0
  3034  000B8A  6F83               	movwf	___ftmul@f2& (0+255),b
  3035  000B8C  0EFA               	movlw	250
  3036  000B8E  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3037  000B90  0E43               	movlw	67
  3038  000B92  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3039  000B94  C0F6  F080         	movff	_AI3,___ftmul@f1
  3040  000B98  C0F7  F081         	movff	_AI3+1,___ftmul@f1+1
  3041  000B9C  C0F8  F082         	movff	_AI3+2,___ftmul@f1+2
  3042  000BA0  ECC8  F012         	call	___ftmul	;wreg free
  3043  000BA4  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3044  000BA8  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3045  000BAC  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3046  000BB0  EC43  F013         	call	___ftdiv	;wreg free
  3047  000BB4  C08C  F128         	movff	?___ftdiv,_autoCool$1898
  3048  000BB8  C08D  F129         	movff	?___ftdiv+1,_autoCool$1898+1
  3049  000BBC  C08E  F12A         	movff	?___ftdiv+2,_autoCool$1898+2
  3050                           
  3051                           ;HW2_A.c: 297: sprintf(Buffer, "OT: %4.1fC R: 0.0", (AI3*5.0*100.0)/1023.0/5.0);
  3052  000BC0  0E00               	movlw	low _Buffer
  3053  000BC2  0100               	movlb	0	; () banked
  3054  000BC4  6FB1               	movwf	sprintf@sp& (0+255),b
  3055  000BC6  0E01               	movlw	high _Buffer
  3056  000BC8  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  3057  000BCA  0E4D               	movlw	low STR_3
  3058  000BCC  6FB3               	movwf	sprintf@f& (0+255),b
  3059  000BCE  0EFF               	movlw	high STR_3
  3060  000BD0  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  3061  000BD2  C128  F08C         	movff	_autoCool$1898,___ftdiv@f1
  3062  000BD6  C129  F08D         	movff	_autoCool$1898+1,___ftdiv@f1+1
  3063  000BDA  C12A  F08E         	movff	_autoCool$1898+2,___ftdiv@f1+2
  3064  000BDE  0E00               	movlw	0
  3065  000BE0  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3066  000BE2  0EA0               	movlw	160
  3067  000BE4  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3068  000BE6  0E40               	movlw	64
  3069  000BE8  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3070  000BEA  EC43  F013         	call	___ftdiv	;wreg free
  3071  000BEE  C08C  F0B5         	movff	?___ftdiv,?_sprintf+4
  3072  000BF2  C08D  F0B6         	movff	?___ftdiv+1,?_sprintf+5
  3073  000BF6  C08E  F0B7         	movff	?___ftdiv+2,?_sprintf+6
  3074  000BFA  EC09  F000         	call	_sprintf	;wreg free
  3075                           
  3076                           ;HW2_A.c: 298: lcd_puts(Buffer);
  3077  000BFE  0E00               	movlw	low _Buffer
  3078  000C00  6E37               	movwf	lcd_puts@s,c
  3079  000C02  0E01               	movlw	high _Buffer
  3080  000C04  6E38               	movwf	lcd_puts@s+1,c
  3081  000C06  ECD9  F019         	call	_lcd_puts	;wreg free
  3082                           
  3083                           ;HW2_A.c: 299: init_pwm1();
  3084  000C0A  EC3E  F01A         	call	_init_pwm1	;wreg free
  3085                           
  3086                           ;HW2_A.c: 301: float SP =(AI0*5.0/1023.0)*100/5.0;
  3087  000C0E  0EC0               	movlw	192
  3088  000C10  0100               	movlb	0	; () banked
  3089  000C12  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3090  000C14  0E7F               	movlw	127
  3091  000C16  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3092  000C18  0E44               	movlw	68
  3093  000C1A  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3094  000C1C  0E00               	movlw	0
  3095  000C1E  6F83               	movwf	___ftmul@f2& (0+255),b
  3096  000C20  0EA0               	movlw	160
  3097  000C22  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3098  000C24  0E40               	movlw	64
  3099  000C26  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3100  000C28  C0FC  F080         	movff	_AI0,___ftmul@f1
  3101  000C2C  C0FD  F081         	movff	_AI0+1,___ftmul@f1+1
  3102  000C30  C0FE  F082         	movff	_AI0+2,___ftmul@f1+2
  3103  000C34  ECC8  F012         	call	___ftmul	;wreg free
  3104  000C38  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3105  000C3C  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3106  000C40  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3107  000C44  EC43  F013         	call	___ftdiv	;wreg free
  3108  000C48  C08C  F137         	movff	?___ftdiv,_autoCool$1899
  3109  000C4C  C08D  F138         	movff	?___ftdiv+1,_autoCool$1899+1
  3110  000C50  C08E  F139         	movff	?___ftdiv+2,_autoCool$1899+2
  3111                           
  3112                           ;HW2_A.c: 301: float SP =(AI0*5.0/1023.0)*100/5.0;
  3113  000C54  0E00               	movlw	0
  3114  000C56  0100               	movlb	0	; () banked
  3115  000C58  6F83               	movwf	___ftmul@f2& (0+255),b
  3116  000C5A  0EC8               	movlw	200
  3117  000C5C  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3118  000C5E  0E42               	movlw	66
  3119  000C60  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3120  000C62  C137  F080         	movff	_autoCool$1899,___ftmul@f1
  3121  000C66  C138  F081         	movff	_autoCool$1899+1,___ftmul@f1+1
  3122  000C6A  C139  F082         	movff	_autoCool$1899+2,___ftmul@f1+2
  3123  000C6E  ECC8  F012         	call	___ftmul	;wreg free
  3124  000C72  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3125  000C76  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3126  000C7A  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3127  000C7E  0E00               	movlw	0
  3128  000C80  0100               	movlb	0	; () banked
  3129  000C82  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3130  000C84  0EA0               	movlw	160
  3131  000C86  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3132  000C88  0E40               	movlw	64
  3133  000C8A  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3134  000C8C  EC43  F013         	call	___ftdiv	;wreg free
  3135  000C90  C08C  F131         	movff	?___ftdiv,autoCool@SP
  3136  000C94  C08D  F132         	movff	?___ftdiv+1,autoCool@SP+1
  3137  000C98  C08E  F133         	movff	?___ftdiv+2,autoCool@SP+2
  3138                           
  3139                           ;HW2_A.c: 302: float T=(AI2*5/1023.0)*100;
  3140  000C9C  0EC0               	movlw	192
  3141  000C9E  0100               	movlb	0	; () banked
  3142  000CA0  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3143  000CA2  0E7F               	movlw	127
  3144  000CA4  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3145  000CA6  0E44               	movlw	68
  3146  000CA8  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3147  000CAA  0E00               	movlw	0
  3148  000CAC  6F83               	movwf	___ftmul@f2& (0+255),b
  3149  000CAE  0EA0               	movlw	160
  3150  000CB0  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3151  000CB2  0E40               	movlw	64
  3152  000CB4  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3153  000CB6  C0F9  F080         	movff	_AI2,___ftmul@f1
  3154  000CBA  C0FA  F081         	movff	_AI2+1,___ftmul@f1+1
  3155  000CBE  C0FB  F082         	movff	_AI2+2,___ftmul@f1+2
  3156  000CC2  ECC8  F012         	call	___ftmul	;wreg free
  3157  000CC6  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3158  000CCA  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3159  000CCE  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3160  000CD2  EC43  F013         	call	___ftdiv	;wreg free
  3161  000CD6  C08C  F137         	movff	?___ftdiv,_autoCool$1899
  3162  000CDA  C08D  F138         	movff	?___ftdiv+1,_autoCool$1899+1
  3163  000CDE  C08E  F139         	movff	?___ftdiv+2,_autoCool$1899+2
  3164                           
  3165                           ;HW2_A.c: 302: float T=(AI2*5/1023.0)*100;
  3166  000CE2  C137  F080         	movff	_autoCool$1899,___ftmul@f1
  3167  000CE6  C138  F081         	movff	_autoCool$1899+1,___ftmul@f1+1
  3168  000CEA  C139  F082         	movff	_autoCool$1899+2,___ftmul@f1+2
  3169  000CEE  0E00               	movlw	0
  3170  000CF0  0100               	movlb	0	; () banked
  3171  000CF2  6F83               	movwf	___ftmul@f2& (0+255),b
  3172  000CF4  0EC8               	movlw	200
  3173  000CF6  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3174  000CF8  0E42               	movlw	66
  3175  000CFA  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3176  000CFC  ECC8  F012         	call	___ftmul	;wreg free
  3177  000D00  C080  F134         	movff	?___ftmul,autoCool@T
  3178  000D04  C081  F135         	movff	?___ftmul+1,autoCool@T+1
  3179  000D08  C082  F136         	movff	?___ftmul+2,autoCool@T+2
  3180                           
  3181                           ;HW2_A.c: 304: PIE2bits.TMR3IE = 0;
  3182  000D0C  92A0               	bcf	4000,1,c	;volatile
  3183                           
  3184                           ;HW2_A.c: 305: PIE2bits.CCP2IE = 0;
  3185  000D0E  90A0               	bcf	4000,0,c	;volatile
  3186                           
  3187                           ;HW2_A.c: 307: float coolError = T - SP;
  3188  000D10  C131  F080         	movff	autoCool@SP,___ftneg@f1
  3189  000D14  C132  F081         	movff	autoCool@SP+1,___ftneg@f1+1
  3190  000D18  C133  F082         	movff	autoCool@SP+2,___ftneg@f1+2
  3191  000D1C  EC8F  F019         	call	___ftneg	;wreg free
  3192  000D20  C080  F096         	movff	?___ftneg,___ftadd@f1
  3193  000D24  C081  F097         	movff	?___ftneg+1,___ftadd@f1+1
  3194  000D28  C082  F098         	movff	?___ftneg+2,___ftadd@f1+2
  3195  000D2C  C134  F099         	movff	autoCool@T,___ftadd@f2
  3196  000D30  C135  F09A         	movff	autoCool@T+1,___ftadd@f2+1
  3197  000D34  C136  F09B         	movff	autoCool@T+2,___ftadd@f2+2
  3198  000D38  EC72  F00F         	call	___ftadd	;wreg free
  3199  000D3C  C096  F120         	movff	?___ftadd,autoCool@coolError
  3200  000D40  C097  F121         	movff	?___ftadd+1,autoCool@coolError+1
  3201  000D44  C098  F122         	movff	?___ftadd+2,autoCool@coolError+2
  3202                           
  3203                           ;HW2_A.c: 309: if(coolError > 0){
  3204  000D48  0E00               	movlw	0
  3205  000D4A  0100               	movlb	0	; () banked
  3206  000D4C  6FA2               	movwf	___ftge@ff1& (0+255),b
  3207  000D4E  0E00               	movlw	0
  3208  000D50  6FA3               	movwf	(___ftge@ff1+1)& (0+255),b
  3209  000D52  0E00               	movlw	0
  3210  000D54  6FA4               	movwf	(___ftge@ff1+2)& (0+255),b
  3211  000D56  C120  F0A5         	movff	autoCool@coolError,___ftge@ff2
  3212  000D5A  C121  F0A6         	movff	autoCool@coolError+1,___ftge@ff2+1
  3213  000D5E  C122  F0A7         	movff	autoCool@coolError+2,___ftge@ff2+2
  3214  000D62  ECBE  F015         	call	___ftge	;wreg free
  3215  000D66  0100               	movlb	0	; () banked
  3216  000D68  B0D8               	btfsc	status,0,c
  3217  000D6A  D051               	goto	l214
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;HW2_A.c: 310: float percent_value = coolError * 10;
  3221  000D6C  C120  F080         	movff	autoCool@coolError,___ftmul@f1
  3222  000D70  C121  F081         	movff	autoCool@coolError+1,___ftmul@f1+1
  3223  000D74  C122  F082         	movff	autoCool@coolError+2,___ftmul@f1+2
  3224  000D78  0E00               	movlw	0
  3225  000D7A  6F83               	movwf	___ftmul@f2& (0+255),b
  3226  000D7C  0E20               	movlw	32
  3227  000D7E  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3228  000D80  0E41               	movlw	65
  3229  000D82  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3230  000D84  ECC8  F012         	call	___ftmul	;wreg free
  3231  000D88  C080  F12B         	movff	?___ftmul,autoCool@percent_value
  3232  000D8C  C081  F12C         	movff	?___ftmul+1,autoCool@percent_value+1
  3233  000D90  C082  F12D         	movff	?___ftmul+2,autoCool@percent_value+2
  3234                           
  3235                           ;HW2_A.c: 311: if(percent_value < 25.0) percent_value = 25;
  3236  000D94  C12B  F0A2         	movff	autoCool@percent_value,___ftge@ff1
  3237  000D98  C12C  F0A3         	movff	autoCool@percent_value+1,___ftge@ff1+1
  3238  000D9C  C12D  F0A4         	movff	autoCool@percent_value+2,___ftge@ff1+2
  3239  000DA0  0E00               	movlw	0
  3240  000DA2  0100               	movlb	0	; () banked
  3241  000DA4  6FA5               	movwf	___ftge@ff2& (0+255),b
  3242  000DA6  0EC8               	movlw	200
  3243  000DA8  6FA6               	movwf	(___ftge@ff2+1)& (0+255),b
  3244  000DAA  0E41               	movlw	65
  3245  000DAC  6FA7               	movwf	(___ftge@ff2+2)& (0+255),b
  3246  000DAE  ECBE  F015         	call	___ftge	;wreg free
  3247  000DB2  0100               	movlb	0	; () banked
  3248  000DB4  B0D8               	btfsc	status,0,c
  3249  000DB6  D007               	goto	l215
  3250                           
  3251                           ; BSR set to: 0
  3252  000DB8  0E00               	movlw	0
  3253  000DBA  0101               	movlb	1	; () banked
  3254  000DBC  6F2B               	movwf	autoCool@percent_value& (0+255),b
  3255  000DBE  0EC8               	movlw	200
  3256  000DC0  6F2C               	movwf	(autoCool@percent_value+1)& (0+255),b
  3257  000DC2  0E41               	movlw	65
  3258  000DC4  6F2D               	movwf	(autoCool@percent_value+2)& (0+255),b
  3259  000DC6                     l215:
  3260                           
  3261                           ;HW2_A.c: 312: if(percent_value > 100.0) percent_value = 100;
  3262                           
  3263                           ; BSR set to: 1
  3264  000DC6  0E00               	movlw	0
  3265  000DC8  0100               	movlb	0	; () banked
  3266  000DCA  6FA2               	movwf	___ftge@ff1& (0+255),b
  3267  000DCC  0EC8               	movlw	200
  3268  000DCE  6FA3               	movwf	(___ftge@ff1+1)& (0+255),b
  3269  000DD0  0E42               	movlw	66
  3270  000DD2  6FA4               	movwf	(___ftge@ff1+2)& (0+255),b
  3271  000DD4  C12B  F0A5         	movff	autoCool@percent_value,___ftge@ff2
  3272  000DD8  C12C  F0A6         	movff	autoCool@percent_value+1,___ftge@ff2+1
  3273  000DDC  C12D  F0A7         	movff	autoCool@percent_value+2,___ftge@ff2+2
  3274  000DE0  ECBE  F015         	call	___ftge	;wreg free
  3275  000DE4  0100               	movlb	0	; () banked
  3276  000DE6  B0D8               	btfsc	status,0,c
  3277  000DE8  D007               	goto	l216
  3278                           
  3279                           ; BSR set to: 0
  3280  000DEA  0E00               	movlw	0
  3281  000DEC  0101               	movlb	1	; () banked
  3282  000DEE  6F2B               	movwf	autoCool@percent_value& (0+255),b
  3283  000DF0  0EC8               	movlw	200
  3284  000DF2  6F2C               	movwf	(autoCool@percent_value+1)& (0+255),b
  3285  000DF4  0E42               	movlw	66
  3286  000DF6  6F2D               	movwf	(autoCool@percent_value+2)& (0+255),b
  3287  000DF8                     l216:
  3288                           
  3289                           ;HW2_A.c: 314: set_pwm1_percent(percent_value);
  3290                           
  3291                           ; BSR set to: 1
  3292  000DF8  C12B  F0B1         	movff	autoCool@percent_value,set_pwm1_percent@value
  3293  000DFC  C12C  F0B2         	movff	autoCool@percent_value+1,set_pwm1_percent@value+1
  3294  000E00  C12D  F0B3         	movff	autoCool@percent_value+2,set_pwm1_percent@value+2
  3295  000E04  EC6E  F015         	call	_set_pwm1_percent	;wreg free
  3296                           
  3297                           ;HW2_A.c: 315: PORTCbits.RC5=0;
  3298  000E08  9A82               	bcf	3970,5,c	;volatile
  3299                           
  3300                           ;HW2_A.c: 316: PIE2bits.TMR3IE = 0;
  3301  000E0A  92A0               	bcf	4000,1,c	;volatile
  3302                           
  3303                           ;HW2_A.c: 317: PIE2bits.CCP2IE = 0;
  3304  000E0C  90A0               	bcf	4000,0,c	;volatile
  3305  000E0E                     l214:
  3306                           
  3307                           ;HW2_A.c: 318: }
  3308                           ;HW2_A.c: 320: if (T < (SP - Hs)) {
  3309  000E0E  C134  F0A2         	movff	autoCool@T,___ftge@ff1
  3310  000E12  C135  F0A3         	movff	autoCool@T+1,___ftge@ff1+1
  3311  000E16  C136  F0A4         	movff	autoCool@T+2,___ftge@ff1+2
  3312  000E1A  C131  F099         	movff	autoCool@SP,___ftadd@f2
  3313  000E1E  C132  F09A         	movff	autoCool@SP+1,___ftadd@f2+1
  3314  000E22  C133  F09B         	movff	autoCool@SP+2,___ftadd@f2+2
  3315  000E26  C048  F03D         	movff	_Hs,___awtoft@c
  3316  000E2A  C049  F03E         	movff	_Hs+1,___awtoft@c+1
  3317  000E2E  EC1B  F019         	call	___awtoft	;wreg free
  3318  000E32  C03D  F080         	movff	?___awtoft,___ftneg@f1
  3319  000E36  C03E  F081         	movff	?___awtoft+1,___ftneg@f1+1
  3320  000E3A  C03F  F082         	movff	?___awtoft+2,___ftneg@f1+2
  3321  000E3E  EC8F  F019         	call	___ftneg	;wreg free
  3322  000E42  C080  F096         	movff	?___ftneg,___ftadd@f1
  3323  000E46  C081  F097         	movff	?___ftneg+1,___ftadd@f1+1
  3324  000E4A  C082  F098         	movff	?___ftneg+2,___ftadd@f1+2
  3325  000E4E  EC72  F00F         	call	___ftadd	;wreg free
  3326  000E52  C096  F0A5         	movff	?___ftadd,___ftge@ff2
  3327  000E56  C097  F0A6         	movff	?___ftadd+1,___ftge@ff2+1
  3328  000E5A  C098  F0A7         	movff	?___ftadd+2,___ftge@ff2+2
  3329  000E5E  ECBE  F015         	call	___ftge	;wreg free
  3330  000E62  0100               	movlb	0	; () banked
  3331  000E64  B0D8               	btfsc	status,0,c
  3332  000E66  D013               	goto	l217
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;HW2_A.c: 321: set_pwm1_percent(0.0);
  3336  000E68  0E00               	movlw	0
  3337  000E6A  6FB1               	movwf	set_pwm1_percent@value& (0+255),b
  3338  000E6C  0E00               	movlw	0
  3339  000E6E  6FB2               	movwf	(set_pwm1_percent@value+1)& (0+255),b
  3340  000E70  0E00               	movlw	0
  3341  000E72  6FB3               	movwf	(set_pwm1_percent@value+2)& (0+255),b
  3342  000E74  EC6E  F015         	call	_set_pwm1_percent	;wreg free
  3343                           
  3344                           ;HW2_A.c: 322: PIE2bits.TMR3IE = 1;
  3345  000E78  82A0               	bsf	4000,1,c	;volatile
  3346                           
  3347                           ;HW2_A.c: 323: PIE2bits.CCP2IE = 1;
  3348  000E7A  80A0               	bsf	4000,0,c	;volatile
  3349                           
  3350                           ;HW2_A.c: 325: raw_value = 512 * 64;
  3351  000E7C  0E80               	movlw	128
  3352  000E7E  0100               	movlb	0	; () banked
  3353  000E80  6FF5               	movwf	(_raw_value+1)& (0+255),b
  3354  000E82  0E00               	movlw	0
  3355  000E84  6FF4               	movwf	_raw_value& (0+255),b
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;HW2_A.c: 326: CCPR2H = (raw_value >>8) & 0x00FF;
  3359  000E86  51F5               	movf	(_raw_value+1)& (0+255),w,b
  3360  000E88  6EBC               	movwf	4028,c	;volatile
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;HW2_A.c: 327: CCPR2L = raw_value & 0x00FF;
  3364  000E8A  C0F4  FFBB         	movff	_raw_value,4027	;volatile
  3365  000E8E                     l217:
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;HW2_A.c: 328: }
  3369                           ;HW2_A.c: 329: float SP =(AI0*5.0/1023.0)*100/5.0;
  3370  000E8E  0EC0               	movlw	192
  3371  000E90  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3372  000E92  0E7F               	movlw	127
  3373  000E94  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3374  000E96  0E44               	movlw	68
  3375  000E98  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3376  000E9A  0E00               	movlw	0
  3377  000E9C  6F83               	movwf	___ftmul@f2& (0+255),b
  3378  000E9E  0EA0               	movlw	160
  3379  000EA0  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3380  000EA2  0E40               	movlw	64
  3381  000EA4  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3382  000EA6  C0FC  F080         	movff	_AI0,___ftmul@f1
  3383  000EAA  C0FD  F081         	movff	_AI0+1,___ftmul@f1+1
  3384  000EAE  C0FE  F082         	movff	_AI0+2,___ftmul@f1+2
  3385  000EB2  ECC8  F012         	call	___ftmul	;wreg free
  3386  000EB6  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3387  000EBA  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3388  000EBE  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3389  000EC2  EC43  F013         	call	___ftdiv	;wreg free
  3390  000EC6  C08C  F137         	movff	?___ftdiv,_autoCool$1899
  3391  000ECA  C08D  F138         	movff	?___ftdiv+1,_autoCool$1899+1
  3392  000ECE  C08E  F139         	movff	?___ftdiv+2,_autoCool$1899+2
  3393                           
  3394                           ;HW2_A.c: 328: }
  3395                           ;HW2_A.c: 329: float SP =(AI0*5.0/1023.0)*100/5.0;
  3396  000ED2  0E00               	movlw	0
  3397  000ED4  0100               	movlb	0	; () banked
  3398  000ED6  6F83               	movwf	___ftmul@f2& (0+255),b
  3399  000ED8  0EC8               	movlw	200
  3400  000EDA  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3401  000EDC  0E42               	movlw	66
  3402  000EDE  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3403  000EE0  C137  F080         	movff	_autoCool$1899,___ftmul@f1
  3404  000EE4  C138  F081         	movff	_autoCool$1899+1,___ftmul@f1+1
  3405  000EE8  C139  F082         	movff	_autoCool$1899+2,___ftmul@f1+2
  3406  000EEC  ECC8  F012         	call	___ftmul	;wreg free
  3407  000EF0  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3408  000EF4  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3409  000EF8  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3410  000EFC  0E00               	movlw	0
  3411  000EFE  0100               	movlb	0	; () banked
  3412  000F00  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3413  000F02  0EA0               	movlw	160
  3414  000F04  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3415  000F06  0E40               	movlw	64
  3416  000F08  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3417  000F0A  EC43  F013         	call	___ftdiv	;wreg free
  3418  000F0E  C08C  F131         	movff	?___ftdiv,autoCool@SP
  3419  000F12  C08D  F132         	movff	?___ftdiv+1,autoCool@SP+1
  3420  000F16  C08E  F133         	movff	?___ftdiv+2,autoCool@SP+2
  3421                           
  3422                           ;HW2_A.c: 330: float T=(AI2*5/1023.0)*100;
  3423  000F1A  0EC0               	movlw	192
  3424  000F1C  0100               	movlb	0	; () banked
  3425  000F1E  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3426  000F20  0E7F               	movlw	127
  3427  000F22  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3428  000F24  0E44               	movlw	68
  3429  000F26  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3430  000F28  0E00               	movlw	0
  3431  000F2A  6F83               	movwf	___ftmul@f2& (0+255),b
  3432  000F2C  0EA0               	movlw	160
  3433  000F2E  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3434  000F30  0E40               	movlw	64
  3435  000F32  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3436  000F34  C0F9  F080         	movff	_AI2,___ftmul@f1
  3437  000F38  C0FA  F081         	movff	_AI2+1,___ftmul@f1+1
  3438  000F3C  C0FB  F082         	movff	_AI2+2,___ftmul@f1+2
  3439  000F40  ECC8  F012         	call	___ftmul	;wreg free
  3440  000F44  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3441  000F48  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3442  000F4C  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3443  000F50  EC43  F013         	call	___ftdiv	;wreg free
  3444  000F54  C08C  F137         	movff	?___ftdiv,_autoCool$1899
  3445  000F58  C08D  F138         	movff	?___ftdiv+1,_autoCool$1899+1
  3446  000F5C  C08E  F139         	movff	?___ftdiv+2,_autoCool$1899+2
  3447                           
  3448                           ;HW2_A.c: 330: float T=(AI2*5/1023.0)*100;
  3449  000F60  C137  F080         	movff	_autoCool$1899,___ftmul@f1
  3450  000F64  C138  F081         	movff	_autoCool$1899+1,___ftmul@f1+1
  3451  000F68  C139  F082         	movff	_autoCool$1899+2,___ftmul@f1+2
  3452  000F6C  0E00               	movlw	0
  3453  000F6E  0100               	movlb	0	; () banked
  3454  000F70  6F83               	movwf	___ftmul@f2& (0+255),b
  3455  000F72  0EC8               	movlw	200
  3456  000F74  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3457  000F76  0E42               	movlw	66
  3458  000F78  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3459  000F7A  ECC8  F012         	call	___ftmul	;wreg free
  3460  000F7E  C080  F134         	movff	?___ftmul,autoCool@T
  3461  000F82  C081  F135         	movff	?___ftmul+1,autoCool@T+1
  3462  000F86  C082  F136         	movff	?___ftmul+2,autoCool@T+2
  3463                           
  3464                           ;HW2_A.c: 331: PORTCbits.RC2 =0;
  3465  000F8A  9482               	bcf	3970,2,c	;volatile
  3466                           
  3467                           ;HW2_A.c: 332: CCP1CON = 0x00;
  3468  000F8C  0E00               	movlw	0
  3469  000F8E  6EBD               	movwf	4029,c	;volatile
  3470                           
  3471                           ;HW2_A.c: 334: PIE2bits.TMR3IE = 1;
  3472  000F90  82A0               	bsf	4000,1,c	;volatile
  3473                           
  3474                           ;HW2_A.c: 335: PIE2bits.CCP2IE = 1;
  3475  000F92  80A0               	bsf	4000,0,c	;volatile
  3476                           
  3477                           ;HW2_A.c: 337: float heatError = SP - T;
  3478  000F94  C134  F080         	movff	autoCool@T,___ftneg@f1
  3479  000F98  C135  F081         	movff	autoCool@T+1,___ftneg@f1+1
  3480  000F9C  C136  F082         	movff	autoCool@T+2,___ftneg@f1+2
  3481  000FA0  EC8F  F019         	call	___ftneg	;wreg free
  3482  000FA4  C080  F096         	movff	?___ftneg,___ftadd@f1
  3483  000FA8  C081  F097         	movff	?___ftneg+1,___ftadd@f1+1
  3484  000FAC  C082  F098         	movff	?___ftneg+2,___ftadd@f1+2
  3485  000FB0  C131  F099         	movff	autoCool@SP,___ftadd@f2
  3486  000FB4  C132  F09A         	movff	autoCool@SP+1,___ftadd@f2+1
  3487  000FB8  C133  F09B         	movff	autoCool@SP+2,___ftadd@f2+2
  3488  000FBC  EC72  F00F         	call	___ftadd	;wreg free
  3489  000FC0  C096  F123         	movff	?___ftadd,autoCool@heatError
  3490  000FC4  C097  F124         	movff	?___ftadd+1,autoCool@heatError+1
  3491  000FC8  C098  F125         	movff	?___ftadd+2,autoCool@heatError+2
  3492                           
  3493                           ;HW2_A.c: 339: if(heatError > 0){
  3494  000FCC  0E00               	movlw	0
  3495  000FCE  0100               	movlb	0	; () banked
  3496  000FD0  6FA2               	movwf	___ftge@ff1& (0+255),b
  3497  000FD2  0E00               	movlw	0
  3498  000FD4  6FA3               	movwf	(___ftge@ff1+1)& (0+255),b
  3499  000FD6  0E00               	movlw	0
  3500  000FD8  6FA4               	movwf	(___ftge@ff1+2)& (0+255),b
  3501  000FDA  C123  F0A5         	movff	autoCool@heatError,___ftge@ff2
  3502  000FDE  C124  F0A6         	movff	autoCool@heatError+1,___ftge@ff2+1
  3503  000FE2  C125  F0A7         	movff	autoCool@heatError+2,___ftge@ff2+2
  3504  000FE6  ECBE  F015         	call	___ftge	;wreg free
  3505  000FEA  0100               	movlb	0	; () banked
  3506  000FEC  B0D8               	btfsc	status,0,c
  3507  000FEE  D076               	goto	l218
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;HW2_A.c: 340: float percent_heat = heatError * 10;
  3511  000FF0  C123  F080         	movff	autoCool@heatError,___ftmul@f1
  3512  000FF4  C124  F081         	movff	autoCool@heatError+1,___ftmul@f1+1
  3513  000FF8  C125  F082         	movff	autoCool@heatError+2,___ftmul@f1+2
  3514  000FFC  0E00               	movlw	0
  3515  000FFE  6F83               	movwf	___ftmul@f2& (0+255),b
  3516  001000  0E20               	movlw	32
  3517  001002  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3518  001004  0E41               	movlw	65
  3519  001006  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3520  001008  ECC8  F012         	call	___ftmul	;wreg free
  3521  00100C  C080  F12E         	movff	?___ftmul,autoCool@percent_heat
  3522  001010  C081  F12F         	movff	?___ftmul+1,autoCool@percent_heat+1
  3523  001014  C082  F130         	movff	?___ftmul+2,autoCool@percent_heat+2
  3524                           
  3525                           ;HW2_A.c: 341: if(percent_heat < 50.0) percent_heat = 50.0;
  3526  001018  C12E  F0A2         	movff	autoCool@percent_heat,___ftge@ff1
  3527  00101C  C12F  F0A3         	movff	autoCool@percent_heat+1,___ftge@ff1+1
  3528  001020  C130  F0A4         	movff	autoCool@percent_heat+2,___ftge@ff1+2
  3529  001024  0E00               	movlw	0
  3530  001026  0100               	movlb	0	; () banked
  3531  001028  6FA5               	movwf	___ftge@ff2& (0+255),b
  3532  00102A  0E48               	movlw	72
  3533  00102C  6FA6               	movwf	(___ftge@ff2+1)& (0+255),b
  3534  00102E  0E42               	movlw	66
  3535  001030  6FA7               	movwf	(___ftge@ff2+2)& (0+255),b
  3536  001032  ECBE  F015         	call	___ftge	;wreg free
  3537  001036  0100               	movlb	0	; () banked
  3538  001038  B0D8               	btfsc	status,0,c
  3539  00103A  D007               	goto	l219
  3540                           
  3541                           ; BSR set to: 0
  3542  00103C  0E00               	movlw	0
  3543  00103E  0101               	movlb	1	; () banked
  3544  001040  6F2E               	movwf	autoCool@percent_heat& (0+255),b
  3545  001042  0E48               	movlw	72
  3546  001044  6F2F               	movwf	(autoCool@percent_heat+1)& (0+255),b
  3547  001046  0E42               	movlw	66
  3548  001048  6F30               	movwf	(autoCool@percent_heat+2)& (0+255),b
  3549  00104A                     l219:
  3550                           
  3551                           ;HW2_A.c: 342: if(percent_heat > 100.0) percent_heat = 100.0;
  3552                           
  3553                           ; BSR set to: 1
  3554  00104A  0E00               	movlw	0
  3555  00104C  0100               	movlb	0	; () banked
  3556  00104E  6FA2               	movwf	___ftge@ff1& (0+255),b
  3557  001050  0EC8               	movlw	200
  3558  001052  6FA3               	movwf	(___ftge@ff1+1)& (0+255),b
  3559  001054  0E42               	movlw	66
  3560  001056  6FA4               	movwf	(___ftge@ff1+2)& (0+255),b
  3561  001058  C12E  F0A5         	movff	autoCool@percent_heat,___ftge@ff2
  3562  00105C  C12F  F0A6         	movff	autoCool@percent_heat+1,___ftge@ff2+1
  3563  001060  C130  F0A7         	movff	autoCool@percent_heat+2,___ftge@ff2+2
  3564  001064  ECBE  F015         	call	___ftge	;wreg free
  3565  001068  0100               	movlb	0	; () banked
  3566  00106A  B0D8               	btfsc	status,0,c
  3567  00106C  D007               	goto	l220
  3568                           
  3569                           ; BSR set to: 0
  3570  00106E  0E00               	movlw	0
  3571  001070  0101               	movlb	1	; () banked
  3572  001072  6F2E               	movwf	autoCool@percent_heat& (0+255),b
  3573  001074  0EC8               	movlw	200
  3574  001076  6F2F               	movwf	(autoCool@percent_heat+1)& (0+255),b
  3575  001078  0E42               	movlw	66
  3576  00107A  6F30               	movwf	(autoCool@percent_heat+2)& (0+255),b
  3577  00107C                     l220:
  3578                           
  3579                           ;HW2_A.c: 343: PIE2bits.TMR3IE = 1;
  3580                           
  3581                           ; BSR set to: 1
  3582  00107C  82A0               	bsf	4000,1,c	;volatile
  3583                           
  3584                           ;HW2_A.c: 344: PIE2bits.CCP2IE = 1;
  3585  00107E  80A0               	bsf	4000,0,c	;volatile
  3586                           
  3587                           ;HW2_A.c: 345: int compare_value = (int) (percent_heat * 65535 / 100.0);
  3588  001080  0E00               	movlw	0
  3589  001082  0100               	movlb	0	; () banked
  3590  001084  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3591  001086  0EC8               	movlw	200
  3592  001088  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3593  00108A  0E42               	movlw	66
  3594  00108C  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3595  00108E  0EFF               	movlw	255
  3596  001090  6F83               	movwf	___ftmul@f2& (0+255),b
  3597  001092  0E7F               	movlw	127
  3598  001094  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3599  001096  0E47               	movlw	71
  3600  001098  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3601  00109A  C12E  F080         	movff	autoCool@percent_heat,___ftmul@f1
  3602  00109E  C12F  F081         	movff	autoCool@percent_heat+1,___ftmul@f1+1
  3603  0010A2  C130  F082         	movff	autoCool@percent_heat+2,___ftmul@f1+2
  3604  0010A6  ECC8  F012         	call	___ftmul	;wreg free
  3605  0010AA  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3606  0010AE  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3607  0010B2  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3608  0010B6  EC43  F013         	call	___ftdiv	;wreg free
  3609  0010BA  C08C  F0A2         	movff	?___ftdiv,___fttol@f1
  3610  0010BE  C08D  F0A3         	movff	?___ftdiv+1,___fttol@f1+1
  3611  0010C2  C08E  F0A4         	movff	?___ftdiv+2,___fttol@f1+2
  3612  0010C6  EC4C  F012         	call	___fttol	;wreg free
  3613  0010CA  C0A2  F126         	movff	?___fttol,autoCool@compare_value
  3614  0010CE  C0A3  F127         	movff	?___fttol+1,autoCool@compare_value+1
  3615                           
  3616                           ;HW2_A.c: 346: CCPR2H = (compare_value >>8) & 0x00FF;
  3617  0010D2  0101               	movlb	1	; () banked
  3618  0010D4  5127               	movf	(autoCool@compare_value+1)& (0+255),w,b
  3619  0010D6  6EBC               	movwf	4028,c	;volatile
  3620                           
  3621                           ; BSR set to: 1
  3622                           ;HW2_A.c: 347: CCPR2L = compare_value & 0x00FF;
  3623  0010D8  C126  FFBB         	movff	autoCool@compare_value,4027	;volatile
  3624  0010DC                     l218:
  3625                           
  3626                           ;HW2_A.c: 350: }
  3627                           ;HW2_A.c: 351: if(T > (SP+Hs)){
  3628  0010DC  C131  F099         	movff	autoCool@SP,___ftadd@f2
  3629  0010E0  C132  F09A         	movff	autoCool@SP+1,___ftadd@f2+1
  3630  0010E4  C133  F09B         	movff	autoCool@SP+2,___ftadd@f2+2
  3631  0010E8  C048  F03D         	movff	_Hs,___awtoft@c
  3632  0010EC  C049  F03E         	movff	_Hs+1,___awtoft@c+1
  3633  0010F0  EC1B  F019         	call	___awtoft	;wreg free
  3634  0010F4  C03D  F096         	movff	?___awtoft,___ftadd@f1
  3635  0010F8  C03E  F097         	movff	?___awtoft+1,___ftadd@f1+1
  3636  0010FC  C03F  F098         	movff	?___awtoft+2,___ftadd@f1+2
  3637  001100  EC72  F00F         	call	___ftadd	;wreg free
  3638  001104  C096  F0A2         	movff	?___ftadd,___ftge@ff1
  3639  001108  C097  F0A3         	movff	?___ftadd+1,___ftge@ff1+1
  3640  00110C  C098  F0A4         	movff	?___ftadd+2,___ftge@ff1+2
  3641  001110  C134  F0A5         	movff	autoCool@T,___ftge@ff2
  3642  001114  C135  F0A6         	movff	autoCool@T+1,___ftge@ff2+1
  3643  001118  C136  F0A7         	movff	autoCool@T+2,___ftge@ff2+2
  3644  00111C  ECBE  F015         	call	___ftge	;wreg free
  3645  001120  0100               	movlb	0	; () banked
  3646  001122  B0D8               	btfsc	status,0,c
  3647  001124  0012               	return	
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;HW2_A.c: 352: PORTCbits.RC5=0;
  3651  001126  9A82               	bcf	3970,5,c	;volatile
  3652                           
  3653                           ;HW2_A.c: 353: PIE2bits.TMR3IE = 0;
  3654  001128  92A0               	bcf	4000,1,c	;volatile
  3655                           
  3656                           ;HW2_A.c: 354: PIE2bits.CCP2IE = 0;
  3657  00112A  90A0               	bcf	4000,0,c	;volatile
  3658  00112C  0012               	return	
  3659  00112E                     __end_of_autoCool:
  3660                           	opt stack 0
  3661                           tblptru	equ	0xFF8
  3662                           tblptrh	equ	0xFF7
  3663                           tblptrl	equ	0xFF6
  3664                           tablat	equ	0xFF5
  3665                           prodh	equ	0xFF4
  3666                           prodl	equ	0xFF3
  3667                           intcon	equ	0xFF2
  3668                           intcon2	equ	0xFF1
  3669                           intcon3	equ	0xFF0
  3670                           postinc0	equ	0xFEE
  3671                           wreg	equ	0xFE8
  3672                           postdec1	equ	0xFE5
  3673                           fsr1l	equ	0xFE1
  3674                           indf2	equ	0xFDF
  3675                           fsr2h	equ	0xFDA
  3676                           fsr2l	equ	0xFD9
  3677                           status	equ	0xFD8
  3678                           
  3679 ;; *************** function _set_pwm1_percent *****************
  3680 ;; Defined at:
  3681 ;;		line 22 in file "my_pwm.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  value           3   49[BANK0 ] float 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  tmp             3   52[BANK0 ] float 
  3686 ;;  raw_val         2   55[BANK0 ] int 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3696 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;Total ram usage:        8 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    6
  3703 ;; This function calls:
  3704 ;;		___ftadd
  3705 ;;		___ftdiv
  3706 ;;		___ftmul
  3707 ;;		___fttol
  3708 ;;		_set_pwm1_raw
  3709 ;; This function is called by:
  3710 ;;		_autoCool
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text12
  3715  002ADC                     __ptext12:
  3716                           	opt stack 0
  3717  002ADC                     _set_pwm1_percent:
  3718                           	opt stack 23
  3719                           
  3720                           ;my_pwm.c: 24: float tmp = value*1023.0/100.0;
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;incstack = 0
  3724  002ADC  0EC0               	movlw	192
  3725  002ADE  0100               	movlb	0	; () banked
  3726  002AE0  6F83               	movwf	___ftmul@f2& (0+255),b
  3727  002AE2  0E7F               	movlw	127
  3728  002AE4  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3729  002AE6  0E44               	movlw	68
  3730  002AE8  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3731  002AEA  C0B1  F080         	movff	set_pwm1_percent@value,___ftmul@f1
  3732  002AEE  C0B2  F081         	movff	set_pwm1_percent@value+1,___ftmul@f1+1
  3733  002AF2  C0B3  F082         	movff	set_pwm1_percent@value+2,___ftmul@f1+2
  3734  002AF6  ECC8  F012         	call	___ftmul	;wreg free
  3735  002AFA  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3736  002AFE  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3737  002B02  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3738  002B06  0E00               	movlw	0
  3739  002B08  0100               	movlb	0	; () banked
  3740  002B0A  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3741  002B0C  0EC8               	movlw	200
  3742  002B0E  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3743  002B10  0E42               	movlw	66
  3744  002B12  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3745  002B14  EC43  F013         	call	___ftdiv	;wreg free
  3746  002B18  C08C  F0B4         	movff	?___ftdiv,set_pwm1_percent@tmp
  3747  002B1C  C08D  F0B5         	movff	?___ftdiv+1,set_pwm1_percent@tmp+1
  3748  002B20  C08E  F0B6         	movff	?___ftdiv+2,set_pwm1_percent@tmp+2
  3749                           
  3750                           ;my_pwm.c: 25: int raw_val = (int)(tmp +0.5);
  3751  002B24  0E00               	movlw	0
  3752  002B26  0100               	movlb	0	; () banked
  3753  002B28  6F99               	movwf	___ftadd@f2& (0+255),b
  3754  002B2A  0E00               	movlw	0
  3755  002B2C  6F9A               	movwf	(___ftadd@f2+1)& (0+255),b
  3756  002B2E  0E3F               	movlw	63
  3757  002B30  6F9B               	movwf	(___ftadd@f2+2)& (0+255),b
  3758  002B32  C0B4  F096         	movff	set_pwm1_percent@tmp,___ftadd@f1
  3759  002B36  C0B5  F097         	movff	set_pwm1_percent@tmp+1,___ftadd@f1+1
  3760  002B3A  C0B6  F098         	movff	set_pwm1_percent@tmp+2,___ftadd@f1+2
  3761  002B3E  EC72  F00F         	call	___ftadd	;wreg free
  3762  002B42  C096  F0A2         	movff	?___ftadd,___fttol@f1
  3763  002B46  C097  F0A3         	movff	?___ftadd+1,___fttol@f1+1
  3764  002B4A  C098  F0A4         	movff	?___ftadd+2,___fttol@f1+2
  3765  002B4E  EC4C  F012         	call	___fttol	;wreg free
  3766  002B52  C0A2  F0B7         	movff	?___fttol,set_pwm1_percent@raw_val
  3767  002B56  C0A3  F0B8         	movff	?___fttol+1,set_pwm1_percent@raw_val+1
  3768                           
  3769                           ;my_pwm.c: 26: if ( raw_val> 1023) raw_val = 1023;
  3770  002B5A  0100               	movlb	0	; () banked
  3771  002B5C  BFB8               	btfsc	(set_pwm1_percent@raw_val+1)& (0+255),7,b
  3772  002B5E  D007               	goto	l370
  3773  002B60  0E04               	movlw	4
  3774  002B62  5DB8               	subwf	(set_pwm1_percent@raw_val+1)& (0+255),w,b
  3775  002B64  A0D8               	btfss	status,0,c
  3776  002B66  D003               	goto	l370
  3777                           
  3778                           ; BSR set to: 0
  3779  002B68  0E03               	movlw	3
  3780  002B6A  6FB8               	movwf	(set_pwm1_percent@raw_val+1)& (0+255),b
  3781  002B6C  69B7               	setf	set_pwm1_percent@raw_val& (0+255),b
  3782  002B6E                     l370:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;my_pwm.c: 27: set_pwm1_raw(raw_val);
  3786                           
  3787                           ; BSR set to: 0
  3788  002B6E  C0B7  F029         	movff	set_pwm1_percent@raw_val,set_pwm1_raw@raw_value
  3789  002B72  C0B8  F02A         	movff	set_pwm1_percent@raw_val+1,set_pwm1_raw@raw_value+1
  3790  002B76  EC4E  F019         	call	_set_pwm1_raw	;wreg free
  3791  002B7A  0012               	return		;funcret
  3792  002B7C                     __end_of_set_pwm1_percent:
  3793                           	opt stack 0
  3794                           tblptru	equ	0xFF8
  3795                           tblptrh	equ	0xFF7
  3796                           tblptrl	equ	0xFF6
  3797                           tablat	equ	0xFF5
  3798                           prodh	equ	0xFF4
  3799                           prodl	equ	0xFF3
  3800                           intcon	equ	0xFF2
  3801                           intcon2	equ	0xFF1
  3802                           intcon3	equ	0xFF0
  3803                           postinc0	equ	0xFEE
  3804                           wreg	equ	0xFE8
  3805                           postdec1	equ	0xFE5
  3806                           fsr1l	equ	0xFE1
  3807                           indf2	equ	0xFDF
  3808                           fsr2h	equ	0xFDA
  3809                           fsr2l	equ	0xFD9
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _SerialHandler *****************
  3813 ;; Defined at:
  3814 ;;		line 468 in file "HW2_A.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;		None
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  received        1  100[BANK0 ] unsigned char 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;Total ram usage:        4 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    8
  3835 ;; This function calls:
  3836 ;;		___ftdiv
  3837 ;;		___ftmul
  3838 ;;		_read_byte_no_lib
  3839 ;;		_send_string_no_lib
  3840 ;;		_sprintf
  3841 ;; This function is called by:
  3842 ;;		_main
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text13
  3847  002832                     __ptext13:
  3848                           	opt stack 0
  3849  002832                     _SerialHandler:
  3850                           	opt stack 22
  3851                           
  3852                           ;HW2_A.c: 469: unsigned char received = read_byte_no_lib();
  3853                           
  3854                           ;incstack = 0
  3855  002832  EC5A  F01A         	call	_read_byte_no_lib	;wreg free
  3856  002836  0100               	movlb	0	; () banked
  3857  002838  6FE4               	movwf	SerialHandler@received& (0+255),b
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;HW2_A.c: 470: if (received == 'M') {
  3861  00283A  0E4D               	movlw	77
  3862  00283C  19E4               	xorwf	SerialHandler@received& (0+255),w,b
  3863  00283E  A4D8               	btfss	status,2,c
  3864  002840  D047               	goto	l257
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;HW2_A.c: 471: sprintf(Buffer, "\nRT:%4.1f OT:%4.1f SP:%4.1f", TT, AnalogInput1 * 100 / 
      +                          5, SSP);
  3868  002842  0E00               	movlw	0
  3869  002844  6F83               	movwf	___ftmul@f2& (0+255),b
  3870  002846  0EC8               	movlw	200
  3871  002848  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3872  00284A  0E42               	movlw	66
  3873  00284C  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3874  00284E  C0EC  F080         	movff	_AnalogInput1,___ftmul@f1
  3875  002852  C0ED  F081         	movff	_AnalogInput1+1,___ftmul@f1+1
  3876  002856  C0EE  F082         	movff	_AnalogInput1+2,___ftmul@f1+2
  3877  00285A  ECC8  F012         	call	___ftmul	;wreg free
  3878  00285E  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  3879  002862  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  3880  002866  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  3881  00286A  0E00               	movlw	0
  3882  00286C  0100               	movlb	0	; () banked
  3883  00286E  6F8F               	movwf	___ftdiv@f2& (0+255),b
  3884  002870  0EA0               	movlw	160
  3885  002872  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  3886  002874  0E40               	movlw	64
  3887  002876  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  3888  002878  EC43  F013         	call	___ftdiv	;wreg free
  3889  00287C  C08C  F0E1         	movff	?___ftdiv,_SerialHandler$1903
  3890  002880  C08D  F0E2         	movff	?___ftdiv+1,_SerialHandler$1903+1
  3891  002884  C08E  F0E3         	movff	?___ftdiv+2,_SerialHandler$1903+2
  3892                           
  3893                           ;HW2_A.c: 471: sprintf(Buffer, "\nRT:%4.1f OT:%4.1f SP:%4.1f", TT, AnalogInput1 * 100 / 
      +                          5, SSP);
  3894  002888  0E00               	movlw	low _Buffer
  3895  00288A  0100               	movlb	0	; () banked
  3896  00288C  6FB1               	movwf	sprintf@sp& (0+255),b
  3897  00288E  0E01               	movlw	high _Buffer
  3898  002890  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  3899  002892  0EF1               	movlw	low STR_15
  3900  002894  6FB3               	movwf	sprintf@f& (0+255),b
  3901  002896  0EFE               	movlw	high STR_15
  3902  002898  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  3903  00289A  C04F  F0B5         	movff	_TT,?_sprintf+4
  3904  00289E  C050  F0B6         	movff	_TT+1,?_sprintf+5
  3905  0028A2  C051  F0B7         	movff	_TT+2,?_sprintf+6
  3906  0028A6  C0E1  F0B8         	movff	_SerialHandler$1903,?_sprintf+7
  3907  0028AA  C0E2  F0B9         	movff	_SerialHandler$1903+1,?_sprintf+8
  3908  0028AE  C0E3  F0BA         	movff	_SerialHandler$1903+2,?_sprintf+9
  3909  0028B2  C04C  F0BB         	movff	_SSP,?_sprintf+10
  3910  0028B6  C04D  F0BC         	movff	_SSP+1,?_sprintf+11
  3911  0028BA  C04E  F0BD         	movff	_SSP+2,?_sprintf+12
  3912  0028BE  EC09  F000         	call	_sprintf	;wreg free
  3913                           
  3914                           ;HW2_A.c: 472: send_string_no_lib(Buffer);
  3915  0028C2  0E00               	movlw	low _Buffer
  3916  0028C4  6E2A               	movwf	send_string_no_lib@p,c
  3917  0028C6  0E01               	movlw	high _Buffer
  3918  0028C8  6E2B               	movwf	send_string_no_lib@p+1,c
  3919  0028CA  ECC7  F019         	call	_send_string_no_lib	;wreg free
  3920                           
  3921                           ;HW2_A.c: 473: } else if (received == 'S') {
  3922  0028CE  0012               	return	
  3923  0028D0                     l257:
  3924  0028D0  0E53               	movlw	83
  3925  0028D2  0100               	movlb	0	; () banked
  3926  0028D4  19E4               	xorwf	SerialHandler@received& (0+255),w,b
  3927  0028D6  A4D8               	btfss	status,2,c
  3928  0028D8  0012               	return	
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;HW2_A.c: 474: current_mode = OFF;
  3932  0028DA  0E00               	movlw	0
  3933  0028DC  6E55               	movwf	_current_mode,c
  3934                           
  3935                           ; BSR set to: 0
  3936  0028DE  0012               	return	
  3937  0028E0                     __end_of_SerialHandler:
  3938                           	opt stack 0
  3939                           tblptru	equ	0xFF8
  3940                           tblptrh	equ	0xFF7
  3941                           tblptrl	equ	0xFF6
  3942                           tablat	equ	0xFF5
  3943                           prodh	equ	0xFF4
  3944                           prodl	equ	0xFF3
  3945                           intcon	equ	0xFF2
  3946                           intcon2	equ	0xFF1
  3947                           intcon3	equ	0xFF0
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           postdec1	equ	0xFE5
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _send_string_no_lib *****************
  3958 ;; Defined at:
  3959 ;;		line 47 in file "my_ser.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  p               2   41[COMRAM] PTR unsigned char 
  3962 ;;		 -> Buffer(32), 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;		None
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;Total ram usage:        2 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    5
  3981 ;; This function calls:
  3982 ;;		_send_byte_no_lib
  3983 ;; This function is called by:
  3984 ;;		_SerialHandler
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text14
  3989  00338E                     __ptext14:
  3990                           	opt stack 0
  3991  00338E                     _send_string_no_lib:
  3992                           	opt stack 24
  3993                           
  3994                           ;my_ser.c: 48: while (*p) {
  3995                           
  3996                           ;incstack = 0
  3997  00338E  D009               	goto	l422
  3998  003390                     
  3999                           ;my_ser.c: 49: send_byte_no_lib(*p);
  4000  003390  C02A  FFD9         	movff	send_string_no_lib@p,fsr2l
  4001  003394  C02B  FFDA         	movff	send_string_no_lib@p+1,fsr2h
  4002  003398  50DF               	movf	indf2,w,c
  4003  00339A  EC36  F01A         	call	_send_byte_no_lib
  4004                           
  4005                           ;my_ser.c: 50: p++;
  4006  00339E  4A2A               	infsnz	send_string_no_lib@p,f,c
  4007  0033A0  2A2B               	incf	send_string_no_lib@p+1,f,c
  4008  0033A2                     l422:
  4009  0033A2  C02A  FFD9         	movff	send_string_no_lib@p,fsr2l
  4010  0033A6  C02B  FFDA         	movff	send_string_no_lib@p+1,fsr2h
  4011  0033AA  50DF               	movf	indf2,w,c
  4012  0033AC  B4D8               	btfsc	status,2,c
  4013  0033AE  0012               	return	
  4014  0033B0  D7EF               	goto	l423
  4015  0033B2                     __end_of_send_string_no_lib:
  4016                           	opt stack 0
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           intcon2	equ	0xFF1
  4025                           intcon3	equ	0xFF0
  4026                           postinc0	equ	0xFEE
  4027                           wreg	equ	0xFE8
  4028                           postdec1	equ	0xFE5
  4029                           fsr1l	equ	0xFE1
  4030                           indf2	equ	0xFDF
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _send_byte_no_lib *****************
  4036 ;; Defined at:
  4037 ;;		line 39 in file "my_ser.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  c               1    wreg     unsigned char 
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  c               1   40[COMRAM] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;Total ram usage:        1 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    4
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_send_string_no_lib
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text15
  4066  00346C                     __ptext15:
  4067                           	opt stack 0
  4068  00346C                     _send_byte_no_lib:
  4069                           	opt stack 24
  4070                           
  4071                           ;incstack = 0
  4072                           ;send_byte_no_lib@c stored from wreg
  4073  00346C  6E29               	movwf	send_byte_no_lib@c,c
  4074                           
  4075                           ;my_ser.c: 40: while (!TXSTAbits.TRMT)
  4076  00346E  D001               	goto	l416
  4077  003470                     l417:
  4078  003470  0004               	clrwdt		;# 
  4079  003472                     l416:
  4080  003472  A2AC               	btfss	4012,1,c	;volatile
  4081  003474  D7FD               	goto	l417
  4082                           
  4083                           ;my_ser.c: 43: }
  4084                           ;my_ser.c: 44: TXREG = c;
  4085  003476  C029  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  4086  00347A  0012               	return		;funcret
  4087  00347C                     __end_of_send_byte_no_lib:
  4088                           	opt stack 0
  4089                           tblptru	equ	0xFF8
  4090                           tblptrh	equ	0xFF7
  4091                           tblptrl	equ	0xFF6
  4092                           tablat	equ	0xFF5
  4093                           prodh	equ	0xFF4
  4094                           prodl	equ	0xFF3
  4095                           intcon	equ	0xFF2
  4096                           intcon2	equ	0xFF1
  4097                           intcon3	equ	0xFF0
  4098                           postinc0	equ	0xFEE
  4099                           wreg	equ	0xFE8
  4100                           postdec1	equ	0xFE5
  4101                           fsr1l	equ	0xFE1
  4102                           indf2	equ	0xFDF
  4103                           fsr2h	equ	0xFDA
  4104                           fsr2l	equ	0xFD9
  4105                           status	equ	0xFD8
  4106                           
  4107 ;; *************** function _read_byte_no_lib *****************
  4108 ;; Defined at:
  4109 ;;		line 33 in file "my_ser.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;		None
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  c               1   40[COMRAM] unsigned char 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  1    wreg      unsigned char 
  4116 ;; Registers used:
  4117 ;;		wreg, status,2
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;Total ram usage:        1 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    4
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_SerialHandler
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text16
  4138  0034B4                     __ptext16:
  4139                           	opt stack 0
  4140  0034B4                     _read_byte_no_lib:
  4141                           	opt stack 25
  4142                           
  4143                           ;my_ser.c: 34: unsigned char c;
  4144                           ;my_ser.c: 35: c = RCREG;
  4145                           
  4146                           ;incstack = 0
  4147  0034B4  CFAE F029          	movff	4014,read_byte_no_lib@c	;volatile
  4148                           
  4149                           ;my_ser.c: 36: return c;
  4150  0034B8  5029               	movf	read_byte_no_lib@c,w,c
  4151  0034BA  0012               	return	
  4152  0034BC                     __end_of_read_byte_no_lib:
  4153                           	opt stack 0
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           intcon2	equ	0xFF1
  4162                           intcon3	equ	0xFF0
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           postdec1	equ	0xFE5
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           fsr2h	equ	0xFDA
  4169                           fsr2l	equ	0xFD9
  4170                           status	equ	0xFD8
  4171                           
  4172 ;; *************** function _OffMode *****************
  4173 ;; Defined at:
  4174 ;;		line 223 in file "HW2_A.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;		None
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      void 
  4181 ;; Registers used:
  4182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;Total ram usage:        3 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:   10
  4195 ;; This function calls:
  4196 ;;		___awtoft
  4197 ;;		___ftdiv
  4198 ;;		___ftmul
  4199 ;;		_lcd_gotoxy
  4200 ;;		_lcd_puts
  4201 ;;		_read_adc_raw_no_lib
  4202 ;;		_sprintf
  4203 ;; This function is called by:
  4204 ;;		_main
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text17
  4209  001D2E                     __ptext17:
  4210                           	opt stack 0
  4211  001D2E                     _OffMode:
  4212                           	opt stack 20
  4213                           
  4214                           ;HW2_A.c: 225: AI3 = read_adc_raw_no_lib(1);
  4215                           
  4216                           ;incstack = 0
  4217  001D2E  0E01               	movlw	1
  4218  001D30  ECFE  F018         	call	_read_adc_raw_no_lib
  4219  001D34  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  4220  001D38  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  4221  001D3C  EC1B  F019         	call	___awtoft	;wreg free
  4222  001D40  C03D  F0F6         	movff	?___awtoft,_AI3
  4223  001D44  C03E  F0F7         	movff	?___awtoft+1,_AI3+1
  4224  001D48  C03F  F0F8         	movff	?___awtoft+2,_AI3+2
  4225                           
  4226                           ;HW2_A.c: 226: AI0 = read_adc_raw_no_lib(0);
  4227  001D4C  0E00               	movlw	0
  4228  001D4E  ECFE  F018         	call	_read_adc_raw_no_lib
  4229  001D52  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  4230  001D56  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  4231  001D5A  EC1B  F019         	call	___awtoft	;wreg free
  4232  001D5E  C03D  F0FC         	movff	?___awtoft,_AI0
  4233  001D62  C03E  F0FD         	movff	?___awtoft+1,_AI0+1
  4234  001D66  C03F  F0FE         	movff	?___awtoft+2,_AI0+2
  4235                           
  4236                           ;HW2_A.c: 227: lcd_gotoxy(1, 2);
  4237  001D6A  0E02               	movlw	2
  4238  001D6C  6E33               	movwf	lcd_gotoxy@y,c
  4239  001D6E  0E01               	movlw	1
  4240  001D70  ECDD  F018         	call	_lcd_gotoxy
  4241                           
  4242                           ;HW2_A.c: 228: sprintf(Buffer, "SP: %4.1fC    Y Y",(AI0*5.0*100.0)/1023.0/5.0);
  4243  001D74  0EC0               	movlw	192
  4244  001D76  0100               	movlb	0	; () banked
  4245  001D78  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4246  001D7A  0E7F               	movlw	127
  4247  001D7C  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4248  001D7E  0E44               	movlw	68
  4249  001D80  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4250  001D82  0E00               	movlw	0
  4251  001D84  6F83               	movwf	___ftmul@f2& (0+255),b
  4252  001D86  0EFA               	movlw	250
  4253  001D88  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  4254  001D8A  0E43               	movlw	67
  4255  001D8C  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  4256  001D8E  C0FC  F080         	movff	_AI0,___ftmul@f1
  4257  001D92  C0FD  F081         	movff	_AI0+1,___ftmul@f1+1
  4258  001D96  C0FE  F082         	movff	_AI0+2,___ftmul@f1+2
  4259  001D9A  ECC8  F012         	call	___ftmul	;wreg free
  4260  001D9E  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  4261  001DA2  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  4262  001DA6  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  4263  001DAA  EC43  F013         	call	___ftdiv	;wreg free
  4264  001DAE  C08C  F0E1         	movff	?___ftdiv,_OffMode$1895
  4265  001DB2  C08D  F0E2         	movff	?___ftdiv+1,_OffMode$1895+1
  4266  001DB6  C08E  F0E3         	movff	?___ftdiv+2,_OffMode$1895+2
  4267                           
  4268                           ;HW2_A.c: 228: sprintf(Buffer, "SP: %4.1fC    Y Y",(AI0*5.0*100.0)/1023.0/5.0);
  4269  001DBA  0E00               	movlw	low _Buffer
  4270  001DBC  0100               	movlb	0	; () banked
  4271  001DBE  6FB1               	movwf	sprintf@sp& (0+255),b
  4272  001DC0  0E01               	movlw	high _Buffer
  4273  001DC2  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  4274  001DC4  0EA7               	movlw	low STR_1
  4275  001DC6  6FB3               	movwf	sprintf@f& (0+255),b
  4276  001DC8  0EFF               	movlw	high STR_1
  4277  001DCA  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  4278  001DCC  C0E1  F08C         	movff	_OffMode$1895,___ftdiv@f1
  4279  001DD0  C0E2  F08D         	movff	_OffMode$1895+1,___ftdiv@f1+1
  4280  001DD4  C0E3  F08E         	movff	_OffMode$1895+2,___ftdiv@f1+2
  4281  001DD8  0E00               	movlw	0
  4282  001DDA  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4283  001DDC  0EA0               	movlw	160
  4284  001DDE  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4285  001DE0  0E40               	movlw	64
  4286  001DE2  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4287  001DE4  EC43  F013         	call	___ftdiv	;wreg free
  4288  001DE8  C08C  F0B5         	movff	?___ftdiv,?_sprintf+4
  4289  001DEC  C08D  F0B6         	movff	?___ftdiv+1,?_sprintf+5
  4290  001DF0  C08E  F0B7         	movff	?___ftdiv+2,?_sprintf+6
  4291  001DF4  EC09  F000         	call	_sprintf	;wreg free
  4292                           
  4293                           ;HW2_A.c: 229: lcd_puts(Buffer);
  4294  001DF8  0E00               	movlw	low _Buffer
  4295  001DFA  6E37               	movwf	lcd_puts@s,c
  4296  001DFC  0E01               	movlw	high _Buffer
  4297  001DFE  6E38               	movwf	lcd_puts@s+1,c
  4298  001E00  ECD9  F019         	call	_lcd_puts	;wreg free
  4299                           
  4300                           ;HW2_A.c: 230: lcd_gotoxy(1, 4);
  4301  001E04  0E04               	movlw	4
  4302  001E06  6E33               	movwf	lcd_gotoxy@y,c
  4303  001E08  0E01               	movlw	1
  4304  001E0A  ECDD  F018         	call	_lcd_gotoxy
  4305                           
  4306                           ;HW2_A.c: 231: sprintf(Buffer,"MD:OFF          ");
  4307  001E0E  0E00               	movlw	low _Buffer
  4308  001E10  0100               	movlb	0	; () banked
  4309  001E12  6FB1               	movwf	sprintf@sp& (0+255),b
  4310  001E14  0E01               	movlw	high _Buffer
  4311  001E16  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  4312  001E18  0ECB               	movlw	low STR_2
  4313  001E1A  6FB3               	movwf	sprintf@f& (0+255),b
  4314  001E1C  0EFF               	movlw	high STR_2
  4315  001E1E  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  4316  001E20  EC09  F000         	call	_sprintf	;wreg free
  4317                           
  4318                           ;HW2_A.c: 232: lcd_puts(Buffer);
  4319  001E24  0E00               	movlw	low _Buffer
  4320  001E26  6E37               	movwf	lcd_puts@s,c
  4321  001E28  0E01               	movlw	high _Buffer
  4322  001E2A  6E38               	movwf	lcd_puts@s+1,c
  4323  001E2C  ECD9  F019         	call	_lcd_puts	;wreg free
  4324                           
  4325                           ;HW2_A.c: 233: lcd_gotoxy(1, 3);
  4326  001E30  0E03               	movlw	3
  4327  001E32  6E33               	movwf	lcd_gotoxy@y,c
  4328  001E34  0E01               	movlw	1
  4329  001E36  ECDD  F018         	call	_lcd_gotoxy
  4330                           
  4331                           ;HW2_A.c: 234: sprintf(Buffer, "OT: %4.1fC R: 0.0", (AI3*5.0*100.0)/1023.0/5.0);
  4332  001E3A  0EC0               	movlw	192
  4333  001E3C  0100               	movlb	0	; () banked
  4334  001E3E  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4335  001E40  0E7F               	movlw	127
  4336  001E42  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4337  001E44  0E44               	movlw	68
  4338  001E46  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4339  001E48  0E00               	movlw	0
  4340  001E4A  6F83               	movwf	___ftmul@f2& (0+255),b
  4341  001E4C  0EFA               	movlw	250
  4342  001E4E  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  4343  001E50  0E43               	movlw	67
  4344  001E52  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  4345  001E54  C0F6  F080         	movff	_AI3,___ftmul@f1
  4346  001E58  C0F7  F081         	movff	_AI3+1,___ftmul@f1+1
  4347  001E5C  C0F8  F082         	movff	_AI3+2,___ftmul@f1+2
  4348  001E60  ECC8  F012         	call	___ftmul	;wreg free
  4349  001E64  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  4350  001E68  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  4351  001E6C  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  4352  001E70  EC43  F013         	call	___ftdiv	;wreg free
  4353  001E74  C08C  F0E1         	movff	?___ftdiv,_OffMode$1895
  4354  001E78  C08D  F0E2         	movff	?___ftdiv+1,_OffMode$1895+1
  4355  001E7C  C08E  F0E3         	movff	?___ftdiv+2,_OffMode$1895+2
  4356                           
  4357                           ;HW2_A.c: 234: sprintf(Buffer, "OT: %4.1fC R: 0.0", (AI3*5.0*100.0)/1023.0/5.0);
  4358  001E80  0E00               	movlw	low _Buffer
  4359  001E82  0100               	movlb	0	; () banked
  4360  001E84  6FB1               	movwf	sprintf@sp& (0+255),b
  4361  001E86  0E01               	movlw	high _Buffer
  4362  001E88  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  4363  001E8A  0E4D               	movlw	low STR_3
  4364  001E8C  6FB3               	movwf	sprintf@f& (0+255),b
  4365  001E8E  0EFF               	movlw	high STR_3
  4366  001E90  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  4367  001E92  C0E1  F08C         	movff	_OffMode$1895,___ftdiv@f1
  4368  001E96  C0E2  F08D         	movff	_OffMode$1895+1,___ftdiv@f1+1
  4369  001E9A  C0E3  F08E         	movff	_OffMode$1895+2,___ftdiv@f1+2
  4370  001E9E  0E00               	movlw	0
  4371  001EA0  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4372  001EA2  0EA0               	movlw	160
  4373  001EA4  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4374  001EA6  0E40               	movlw	64
  4375  001EA8  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4376  001EAA  EC43  F013         	call	___ftdiv	;wreg free
  4377  001EAE  C08C  F0B5         	movff	?___ftdiv,?_sprintf+4
  4378  001EB2  C08D  F0B6         	movff	?___ftdiv+1,?_sprintf+5
  4379  001EB6  C08E  F0B7         	movff	?___ftdiv+2,?_sprintf+6
  4380  001EBA  EC09  F000         	call	_sprintf	;wreg free
  4381                           
  4382                           ;HW2_A.c: 235: lcd_puts(Buffer);
  4383  001EBE  0E00               	movlw	low _Buffer
  4384  001EC0  6E37               	movwf	lcd_puts@s,c
  4385  001EC2  0E01               	movlw	high _Buffer
  4386  001EC4  6E38               	movwf	lcd_puts@s+1,c
  4387  001EC6  ECD9  F019         	call	_lcd_puts	;wreg free
  4388                           
  4389                           ;HW2_A.c: 237: lcd_puts(Buffer);
  4390  001ECA  0E00               	movlw	low _Buffer
  4391  001ECC  6E37               	movwf	lcd_puts@s,c
  4392  001ECE  0E01               	movlw	high _Buffer
  4393  001ED0  6E38               	movwf	lcd_puts@s+1,c
  4394  001ED2  ECD9  F019         	call	_lcd_puts	;wreg free
  4395                           
  4396                           ;HW2_A.c: 238: PORTCbits.RC2 =0;
  4397  001ED6  9482               	bcf	3970,2,c	;volatile
  4398                           
  4399                           ;HW2_A.c: 239: PORTCbits.RC5=0;
  4400  001ED8  9A82               	bcf	3970,5,c	;volatile
  4401                           
  4402                           ;HW2_A.c: 240: PIE2 = PIE1 = 0;
  4403  001EDA  0E00               	movlw	0
  4404  001EDC  6E9D               	movwf	3997,c	;volatile
  4405  001EDE  CF9D FFA0          	movff	3997,4000	;volatile
  4406  001EE2  0012               	return		;funcret
  4407  001EE4                     __end_of_OffMode:
  4408                           	opt stack 0
  4409                           tblptru	equ	0xFF8
  4410                           tblptrh	equ	0xFF7
  4411                           tblptrl	equ	0xFF6
  4412                           tablat	equ	0xFF5
  4413                           prodh	equ	0xFF4
  4414                           prodl	equ	0xFF3
  4415                           intcon	equ	0xFF2
  4416                           intcon2	equ	0xFF1
  4417                           intcon3	equ	0xFF0
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           postdec1	equ	0xFE5
  4421                           fsr1l	equ	0xFE1
  4422                           indf2	equ	0xFDF
  4423                           fsr2h	equ	0xFDA
  4424                           fsr2l	equ	0xFD9
  4425                           status	equ	0xFD8
  4426                           
  4427 ;; *************** function _Int0ISR *****************
  4428 ;; Defined at:
  4429 ;;		line 123 in file "HW2_A.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;		None
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;		None
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;Total ram usage:        2 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    4
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_main
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text18
  4458  003098                     __ptext18:
  4459                           	opt stack 0
  4460  003098                     _Int0ISR:
  4461                           	opt stack 26
  4462                           
  4463                           ;HW2_A.c: 125: _delay((unsigned long)((250)*(4000000/4000.0)));
  4464                           
  4465                           ;incstack = 0
  4466  003098  0E02               	movlw	2
  4467  00309A  6E2A               	movwf	(??_Int0ISR+1)& (0+255),c
  4468  00309C  0E45               	movlw	69
  4469  00309E  6E29               	movwf	??_Int0ISR& (0+255),c
  4470  0030A0  0EAA               	movlw	170
  4471  0030A2                     u6707:
  4472  0030A2  2EE8               	decfsz	wreg,f,c
  4473  0030A4  D7FE               	bra	u6707
  4474  0030A6  2E29               	decfsz	??_Int0ISR& (0+255),f,c
  4475  0030A8  D7FC               	bra	u6707
  4476  0030AA  2E2A               	decfsz	(??_Int0ISR+1)& (0+255),f,c
  4477  0030AC  D7FA               	bra	u6707
  4478                           
  4479                           ;HW2_A.c: 126: INTCONbits.INT0IF = 0;
  4480  0030AE  92F2               	bcf	intcon,1,c	;volatile
  4481                           
  4482                           ;HW2_A.c: 128: mode_counter++;
  4483  0030B0  4A4A               	infsnz	_mode_counter,f,c
  4484  0030B2  2A4B               	incf	_mode_counter+1,f,c
  4485                           
  4486                           ;HW2_A.c: 129: if(mode_counter==0)
  4487  0030B4  504A               	movf	_mode_counter,w,c
  4488  0030B6  104B               	iorwf	_mode_counter+1,w,c
  4489  0030B8  A4D8               	btfss	status,2,c
  4490  0030BA  D003               	goto	l161
  4491                           
  4492                           ;HW2_A.c: 130: current_mode=COOL;
  4493  0030BC  0E01               	movlw	1
  4494  0030BE  6E55               	movwf	_current_mode,c
  4495  0030C0  0012               	return	
  4496  0030C2                     l161:
  4497                           
  4498                           ;HW2_A.c: 131: else if(mode_counter==1)
  4499  0030C2  044A               	decf	_mode_counter,w,c
  4500  0030C4  104B               	iorwf	_mode_counter+1,w,c
  4501  0030C6  A4D8               	btfss	status,2,c
  4502  0030C8  D003               	goto	l163
  4503                           
  4504                           ;HW2_A.c: 132: current_mode=HEAT;
  4505  0030CA  0E02               	movlw	2
  4506  0030CC  6E55               	movwf	_current_mode,c
  4507  0030CE  0012               	return	
  4508  0030D0                     l163:
  4509                           
  4510                           ;HW2_A.c: 133: else if(mode_counter==2)
  4511  0030D0  0E02               	movlw	2
  4512  0030D2  184A               	xorwf	_mode_counter,w,c
  4513  0030D4  104B               	iorwf	_mode_counter+1,w,c
  4514  0030D6  A4D8               	btfss	status,2,c
  4515  0030D8  0012               	return	
  4516                           
  4517                           ;HW2_A.c: 134: {
  4518                           ;HW2_A.c: 135: current_mode=AUTO_COOL_HEAT;
  4519  0030DA  0E03               	movlw	3
  4520  0030DC  6E55               	movwf	_current_mode,c
  4521                           
  4522                           ;HW2_A.c: 136: mode_counter=-1;
  4523  0030DE  684A               	setf	_mode_counter,c
  4524  0030E0  684B               	setf	_mode_counter+1,c
  4525  0030E2  0012               	return	
  4526  0030E4                     __end_of_Int0ISR:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           intcon	equ	0xFF2
  4535                           intcon2	equ	0xFF1
  4536                           intcon3	equ	0xFF0
  4537                           postinc0	equ	0xFEE
  4538                           wreg	equ	0xFE8
  4539                           postdec1	equ	0xFE5
  4540                           fsr1l	equ	0xFE1
  4541                           indf2	equ	0xFDF
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function _CoolMode *****************
  4547 ;; Defined at:
  4548 ;;		line 243 in file "HW2_A.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;		None
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  1    wreg      void 
  4555 ;; Registers used:
  4556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;Total ram usage:        3 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:   10
  4569 ;; This function calls:
  4570 ;;		___awtoft
  4571 ;;		___ftdiv
  4572 ;;		___ftmul
  4573 ;;		_init_pwm1
  4574 ;;		_lcd_gotoxy
  4575 ;;		_lcd_puts
  4576 ;;		_read_adc_raw_no_lib
  4577 ;;		_set_pwm1_raw
  4578 ;;		_sprintf
  4579 ;; This function is called by:
  4580 ;;		_main
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text19
  4585  0019A4                     __ptext19:
  4586                           	opt stack 0
  4587  0019A4                     _CoolMode:
  4588                           	opt stack 20
  4589                           
  4590                           ;HW2_A.c: 245: AI3 = read_adc_raw_no_lib(1);
  4591                           
  4592                           ;incstack = 0
  4593  0019A4  0E01               	movlw	1
  4594  0019A6  ECFE  F018         	call	_read_adc_raw_no_lib
  4595  0019AA  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  4596  0019AE  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  4597  0019B2  EC1B  F019         	call	___awtoft	;wreg free
  4598  0019B6  C03D  F0F6         	movff	?___awtoft,_AI3
  4599  0019BA  C03E  F0F7         	movff	?___awtoft+1,_AI3+1
  4600  0019BE  C03F  F0F8         	movff	?___awtoft+2,_AI3+2
  4601                           
  4602                           ;HW2_A.c: 246: AI0 = read_adc_raw_no_lib(0);
  4603  0019C2  0E00               	movlw	0
  4604  0019C4  ECFE  F018         	call	_read_adc_raw_no_lib
  4605  0019C8  C029  F03D         	movff	?_read_adc_raw_no_lib,___awtoft@c
  4606  0019CC  C02A  F03E         	movff	?_read_adc_raw_no_lib+1,___awtoft@c+1
  4607  0019D0  EC1B  F019         	call	___awtoft	;wreg free
  4608  0019D4  C03D  F0FC         	movff	?___awtoft,_AI0
  4609  0019D8  C03E  F0FD         	movff	?___awtoft+1,_AI0+1
  4610  0019DC  C03F  F0FE         	movff	?___awtoft+2,_AI0+2
  4611                           
  4612                           ;HW2_A.c: 247: lcd_gotoxy(1, 2);
  4613  0019E0  0E02               	movlw	2
  4614  0019E2  6E33               	movwf	lcd_gotoxy@y,c
  4615  0019E4  0E01               	movlw	1
  4616  0019E6  ECDD  F018         	call	_lcd_gotoxy
  4617                           
  4618                           ;HW2_A.c: 248: sprintf(Buffer, "SP: %4.1fC    Y N",(AI0*5.0*100.0)/1023.0/5.0);
  4619  0019EA  0EC0               	movlw	192
  4620  0019EC  0100               	movlb	0	; () banked
  4621  0019EE  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4622  0019F0  0E7F               	movlw	127
  4623  0019F2  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4624  0019F4  0E44               	movlw	68
  4625  0019F6  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4626  0019F8  0E00               	movlw	0
  4627  0019FA  6F83               	movwf	___ftmul@f2& (0+255),b
  4628  0019FC  0EFA               	movlw	250
  4629  0019FE  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  4630  001A00  0E43               	movlw	67
  4631  001A02  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  4632  001A04  C0FC  F080         	movff	_AI0,___ftmul@f1
  4633  001A08  C0FD  F081         	movff	_AI0+1,___ftmul@f1+1
  4634  001A0C  C0FE  F082         	movff	_AI0+2,___ftmul@f1+2
  4635  001A10  ECC8  F012         	call	___ftmul	;wreg free
  4636  001A14  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  4637  001A18  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  4638  001A1C  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  4639  001A20  EC43  F013         	call	___ftdiv	;wreg free
  4640  001A24  C08C  F0E1         	movff	?___ftdiv,_CoolMode$1896
  4641  001A28  C08D  F0E2         	movff	?___ftdiv+1,_CoolMode$1896+1
  4642  001A2C  C08E  F0E3         	movff	?___ftdiv+2,_CoolMode$1896+2
  4643                           
  4644                           ;HW2_A.c: 248: sprintf(Buffer, "SP: %4.1fC    Y N",(AI0*5.0*100.0)/1023.0/5.0);
  4645  001A30  0E00               	movlw	low _Buffer
  4646  001A32  0100               	movlb	0	; () banked
  4647  001A34  6FB1               	movwf	sprintf@sp& (0+255),b
  4648  001A36  0E01               	movlw	high _Buffer
  4649  001A38  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  4650  001A3A  0E83               	movlw	low STR_4
  4651  001A3C  6FB3               	movwf	sprintf@f& (0+255),b
  4652  001A3E  0EFF               	movlw	high STR_4
  4653  001A40  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  4654  001A42  C0E1  F08C         	movff	_CoolMode$1896,___ftdiv@f1
  4655  001A46  C0E2  F08D         	movff	_CoolMode$1896+1,___ftdiv@f1+1
  4656  001A4A  C0E3  F08E         	movff	_CoolMode$1896+2,___ftdiv@f1+2
  4657  001A4E  0E00               	movlw	0
  4658  001A50  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4659  001A52  0EA0               	movlw	160
  4660  001A54  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4661  001A56  0E40               	movlw	64
  4662  001A58  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4663  001A5A  EC43  F013         	call	___ftdiv	;wreg free
  4664  001A5E  C08C  F0B5         	movff	?___ftdiv,?_sprintf+4
  4665  001A62  C08D  F0B6         	movff	?___ftdiv+1,?_sprintf+5
  4666  001A66  C08E  F0B7         	movff	?___ftdiv+2,?_sprintf+6
  4667  001A6A  EC09  F000         	call	_sprintf	;wreg free
  4668                           
  4669                           ;HW2_A.c: 249: lcd_puts(Buffer);
  4670  001A6E  0E00               	movlw	low _Buffer
  4671  001A70  6E37               	movwf	lcd_puts@s,c
  4672  001A72  0E01               	movlw	high _Buffer
  4673  001A74  6E38               	movwf	lcd_puts@s+1,c
  4674  001A76  ECD9  F019         	call	_lcd_puts	;wreg free
  4675                           
  4676                           ;HW2_A.c: 250: lcd_gotoxy(1, 4);
  4677  001A7A  0E04               	movlw	4
  4678  001A7C  6E33               	movwf	lcd_gotoxy@y,c
  4679  001A7E  0E01               	movlw	1
  4680  001A80  ECDD  F018         	call	_lcd_gotoxy
  4681                           
  4682                           ;HW2_A.c: 251: sprintf(Buffer,"MD:Cool         ");
  4683  001A84  0E00               	movlw	low _Buffer
  4684  001A86  0100               	movlb	0	; () banked
  4685  001A88  6FB1               	movwf	sprintf@sp& (0+255),b
  4686  001A8A  0E01               	movlw	high _Buffer
  4687  001A8C  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  4688  001A8E  0EDC               	movlw	low STR_5
  4689  001A90  6FB3               	movwf	sprintf@f& (0+255),b
  4690  001A92  0EFF               	movlw	high STR_5
  4691  001A94  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  4692  001A96  EC09  F000         	call	_sprintf	;wreg free
  4693                           
  4694                           ;HW2_A.c: 252: lcd_puts(Buffer);
  4695  001A9A  0E00               	movlw	low _Buffer
  4696  001A9C  6E37               	movwf	lcd_puts@s,c
  4697  001A9E  0E01               	movlw	high _Buffer
  4698  001AA0  6E38               	movwf	lcd_puts@s+1,c
  4699  001AA2  ECD9  F019         	call	_lcd_puts	;wreg free
  4700                           
  4701                           ;HW2_A.c: 253: lcd_gotoxy(1, 3);
  4702  001AA6  0E03               	movlw	3
  4703  001AA8  6E33               	movwf	lcd_gotoxy@y,c
  4704  001AAA  0E01               	movlw	1
  4705  001AAC  ECDD  F018         	call	_lcd_gotoxy
  4706                           
  4707                           ;HW2_A.c: 254: sprintf(Buffer, "OT: %4.1fC C: %2.1f%%", (AI3*5.0*100.0)/1023.0/5.0,AI1);
  4708  001AB0  0EC0               	movlw	192
  4709  001AB2  0100               	movlb	0	; () banked
  4710  001AB4  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4711  001AB6  0E7F               	movlw	127
  4712  001AB8  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4713  001ABA  0E44               	movlw	68
  4714  001ABC  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4715  001ABE  0E00               	movlw	0
  4716  001AC0  6F83               	movwf	___ftmul@f2& (0+255),b
  4717  001AC2  0EFA               	movlw	250
  4718  001AC4  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  4719  001AC6  0E43               	movlw	67
  4720  001AC8  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  4721  001ACA  C0F6  F080         	movff	_AI3,___ftmul@f1
  4722  001ACE  C0F7  F081         	movff	_AI3+1,___ftmul@f1+1
  4723  001AD2  C0F8  F082         	movff	_AI3+2,___ftmul@f1+2
  4724  001AD6  ECC8  F012         	call	___ftmul	;wreg free
  4725  001ADA  C080  F08C         	movff	?___ftmul,___ftdiv@f1
  4726  001ADE  C081  F08D         	movff	?___ftmul+1,___ftdiv@f1+1
  4727  001AE2  C082  F08E         	movff	?___ftmul+2,___ftdiv@f1+2
  4728  001AE6  EC43  F013         	call	___ftdiv	;wreg free
  4729  001AEA  C08C  F0E1         	movff	?___ftdiv,_CoolMode$1896
  4730  001AEE  C08D  F0E2         	movff	?___ftdiv+1,_CoolMode$1896+1
  4731  001AF2  C08E  F0E3         	movff	?___ftdiv+2,_CoolMode$1896+2
  4732                           
  4733                           ;HW2_A.c: 254: sprintf(Buffer, "OT: %4.1fC C: %2.1f%%", (AI3*5.0*100.0)/1023.0/5.0,AI1);
  4734  001AF6  0E00               	movlw	low _Buffer
  4735  001AF8  0100               	movlb	0	; () banked
  4736  001AFA  6FB1               	movwf	sprintf@sp& (0+255),b
  4737  001AFC  0E01               	movlw	high _Buffer
  4738  001AFE  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  4739  001B00  0E0D               	movlw	low STR_6
  4740  001B02  6FB3               	movwf	sprintf@f& (0+255),b
  4741  001B04  0EFF               	movlw	high STR_6
  4742  001B06  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  4743  001B08  C0E1  F08C         	movff	_CoolMode$1896,___ftdiv@f1
  4744  001B0C  C0E2  F08D         	movff	_CoolMode$1896+1,___ftdiv@f1+1
  4745  001B10  C0E3  F08E         	movff	_CoolMode$1896+2,___ftdiv@f1+2
  4746  001B14  0E00               	movlw	0
  4747  001B16  6F8F               	movwf	___ftdiv@f2& (0+255),b
  4748  001B18  0EA0               	movlw	160
  4749  001B1A  6F90               	movwf	(___ftdiv@f2+1)& (0+255),b
  4750  001B1C  0E40               	movlw	64
  4751  001B1E  6F91               	movwf	(___ftdiv@f2+2)& (0+255),b
  4752  001B20  EC43  F013         	call	___ftdiv	;wreg free
  4753  001B24  C08C  F0B5         	movff	?___ftdiv,?_sprintf+4
  4754  001B28  C08D  F0B6         	movff	?___ftdiv+1,?_sprintf+5
  4755  001B2C  C08E  F0B7         	movff	?___ftdiv+2,?_sprintf+6
  4756  001B30  C045  F0B8         	movff	_AI1,?_sprintf+7
  4757  001B34  C046  F0B9         	movff	_AI1+1,?_sprintf+8
  4758  001B38  C047  F0BA         	movff	_AI1+2,?_sprintf+9
  4759  001B3C  EC09  F000         	call	_sprintf	;wreg free
  4760                           
  4761                           ;HW2_A.c: 255: lcd_puts(Buffer);
  4762  001B40  0E00               	movlw	low _Buffer
  4763  001B42  6E37               	movwf	lcd_puts@s,c
  4764  001B44  0E01               	movlw	high _Buffer
  4765  001B46  6E38               	movwf	lcd_puts@s+1,c
  4766  001B48  ECD9  F019         	call	_lcd_puts	;wreg free
  4767                           
  4768                           ;HW2_A.c: 256: init_pwm1();
  4769  001B4C  EC3E  F01A         	call	_init_pwm1	;wreg free
  4770                           
  4771                           ;HW2_A.c: 257: raw_value = read_adc_raw_no_lib(1);
  4772  001B50  0E01               	movlw	1
  4773  001B52  ECFE  F018         	call	_read_adc_raw_no_lib
  4774  001B56  C029  F0F4         	movff	?_read_adc_raw_no_lib,_raw_value
  4775  001B5A  C02A  F0F5         	movff	?_read_adc_raw_no_lib+1,_raw_value+1
  4776                           
  4777                           ;HW2_A.c: 258: set_pwm1_raw(raw_value);
  4778  001B5E  C0F4  F029         	movff	_raw_value,set_pwm1_raw@raw_value
  4779  001B62  C0F5  F02A         	movff	_raw_value+1,set_pwm1_raw@raw_value+1
  4780  001B66  EC4E  F019         	call	_set_pwm1_raw	;wreg free
  4781                           
  4782                           ;HW2_A.c: 259: PORTCbits.RC5=0;
  4783  001B6A  9A82               	bcf	3970,5,c	;volatile
  4784  001B6C  0012               	return		;funcret
  4785  001B6E                     __end_of_CoolMode:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           intcon2	equ	0xFF1
  4795                           intcon3	equ	0xFF0
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           postdec1	equ	0xFE5
  4799                           fsr1l	equ	0xFE1
  4800                           indf2	equ	0xFDF
  4801                           fsr2h	equ	0xFDA
  4802                           fsr2l	equ	0xFD9
  4803                           status	equ	0xFD8
  4804                           
  4805 ;; *************** function _sprintf *****************
  4806 ;; Defined at:
  4807 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  sp              2   49[BANK0 ] PTR unsigned char 
  4810 ;;		 -> Buffer(32), 
  4811 ;;  f               2   51[BANK0 ] PTR const unsigned char 
  4812 ;;		 -> STR_15(28), STR_14(18), STR_13(20), STR_12(18), 
  4813 ;;		 -> STR_11(18), STR_10(18), STR_9(22), STR_8(17), 
  4814 ;;		 -> STR_7(18), STR_6(22), STR_5(17), STR_4(18), 
  4815 ;;		 -> STR_3(18), STR_2(17), STR_1(18), 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  val             4   83[BANK0 ] unsigned long 
  4818 ;;  tmpval          4   79[BANK0 ] struct .
  4819 ;;  fval            3   91[BANK0 ] struct .
  4820 ;;  prec            2   94[BANK0 ] int 
  4821 ;;  width           2   89[BANK0 ] int 
  4822 ;;  exp             2   87[BANK0 ] int 
  4823 ;;  flag            2   77[BANK0 ] unsigned short 
  4824 ;;  len             2   75[BANK0 ] unsigned int 
  4825 ;;  ap              2   73[BANK0 ] PTR void [1]
  4826 ;;		 -> ?_sprintf(2), 
  4827 ;;  cp              2   71[BANK0 ] PTR const unsigned char 
  4828 ;;		 -> sprintf@c(1), 
  4829 ;;  c               1   96[BANK0 ] char 
  4830 ;;  d               1    0        unsigned char 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  2   49[BANK0 ] int 
  4833 ;; Registers used:
  4834 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4840 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;Total ram usage:       48 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    7
  4847 ;; This function calls:
  4848 ;;		___awdiv
  4849 ;;		___ftadd
  4850 ;;		___ftge
  4851 ;;		___ftmul
  4852 ;;		___ftneg
  4853 ;;		___ftsub
  4854 ;;		___fttol
  4855 ;;		___lldiv
  4856 ;;		___llmod
  4857 ;;		___lltoft
  4858 ;;		___wmul
  4859 ;;		__div_to_l_
  4860 ;;		__tdiv_to_l_
  4861 ;;		_fround
  4862 ;;		_isdigit
  4863 ;;		_scale
  4864 ;; This function is called by:
  4865 ;;		_OffMode
  4866 ;;		_CoolMode
  4867 ;;		_heatMode
  4868 ;;		_autoCool
  4869 ;;		_printingOnScreen
  4870 ;;		_SerialHandler
  4871 ;;		_autoHeat
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text20
  4876  000012                     __ptext20:
  4877                           	opt stack 0
  4878  000012                     _sprintf:
  4879                           	opt stack 22
  4880                           
  4881                           ;doprnt.c: 494: va_list ap;
  4882                           ;doprnt.c: 499: signed char c;
  4883                           ;doprnt.c: 501: int width;
  4884                           ;doprnt.c: 504: int prec;
  4885                           ;doprnt.c: 508: unsigned short flag;
  4886                           ;doprnt.c: 515: char d;
  4887                           ;doprnt.c: 516: double fval;
  4888                           ;doprnt.c: 517: int exp;
  4889                           ;doprnt.c: 523: union {
  4890                           ;doprnt.c: 524: unsigned long vd;
  4891                           ;doprnt.c: 525: double integ;
  4892                           ;doprnt.c: 526: } tmpval;
  4893                           ;doprnt.c: 528: unsigned long val;
  4894                           ;doprnt.c: 529: unsigned len;
  4895                           ;doprnt.c: 530: const char * cp;
  4896                           ;doprnt.c: 533: *ap = __va_start();
  4897                           
  4898                           ;incstack = 0
  4899  000012  0EB5               	movlw	low (?_sprintf+4)
  4900  000014  0100               	movlb	0	; () banked
  4901  000016  6FC9               	movwf	sprintf@ap& (0+255),b
  4902  000018  0E00               	movlw	high (?_sprintf+4)
  4903  00001A  6FCA               	movwf	(sprintf@ap+1)& (0+255),b
  4904                           
  4905                           ;doprnt.c: 536: while(c = *f++) {
  4906  00001C  EF1F  F005         	goto	u6390
  4907  000020                     
  4908                           ; BSR set to: 0
  4909                           ;doprnt.c: 538: if(c != '%')
  4910                           
  4911                           ; BSR set to: 0
  4912  000020  0E25               	movlw	37
  4913  000022  19E0               	xorwf	sprintf@c& (0+255),w,b
  4914  000024  B4D8               	btfsc	status,2,c
  4915  000026  D00A               	goto	l462
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;doprnt.c: 540: {
  4919                           ;doprnt.c: 541: ((*sp++ = (c)));
  4920  000028  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4921  00002C  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4922  000030  C0E0  FFDF         	movff	sprintf@c,indf2
  4923                           
  4924                           ; BSR set to: 0
  4925  000034  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  4926  000036  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  4927                           
  4928                           ;doprnt.c: 542: continue;
  4929  000038  EF1F  F005         	goto	u6390
  4930  00003C                     l462:
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;doprnt.c: 543: }
  4934                           ;doprnt.c: 546: width = 0;
  4935                           
  4936                           ; BSR set to: 0
  4937  00003C  0E00               	movlw	0
  4938  00003E  6FDA               	movwf	(sprintf@width+1)& (0+255),b
  4939  000040  0E00               	movlw	0
  4940  000042  6FD9               	movwf	sprintf@width& (0+255),b
  4941                           
  4942                           ;doprnt.c: 548: flag = 0;
  4943  000044  0E00               	movlw	0
  4944  000046  6FCE               	movwf	(sprintf@flag+1)& (0+255),b
  4945  000048  0E00               	movlw	0
  4946  00004A  6FCD               	movwf	sprintf@flag& (0+255),b
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4950  00004C  C0B3  FFF6         	movff	sprintf@f,tblptrl
  4951  000050  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  4952  000054                     	if	0	;tblptru may be non-zero
  4953  000054                     	endif
  4954  000054                     	if	0	;tblptru may be non-zero
  4955  000054                     	endif
  4956  000054  0008               	tblrd		*
  4957  000056  50F5               	movf	tablat,w,c
  4958  000058  EC1C  F01A         	call	_isdigit
  4959  00005C  A0D8               	btfss	status,0,c
  4960  00005E  D034               	goto	u5880
  4961                           
  4962                           ;doprnt.c: 598: width = 0;
  4963  000060  0E00               	movlw	0
  4964  000062  0100               	movlb	0	; () banked
  4965  000064  6FDA               	movwf	(sprintf@width+1)& (0+255),b
  4966  000066  0E00               	movlw	0
  4967  000068  6FD9               	movwf	sprintf@width& (0+255),b
  4968  00006A                     
  4969                           ;doprnt.c: 600: width *= 10;
  4970                           
  4971                           ; BSR set to: 0
  4972  00006A  C0D9  F037         	movff	sprintf@width,___wmul@multiplier
  4973  00006E  C0DA  F038         	movff	sprintf@width+1,___wmul@multiplier+1
  4974  000072  0E00               	movlw	0
  4975  000074  6E3A               	movwf	___wmul@multiplicand+1,c
  4976  000076  0E0A               	movlw	10
  4977  000078  6E39               	movwf	___wmul@multiplicand,c
  4978  00007A  EC7C  F019         	call	___wmul	;wreg free
  4979  00007E  C037  F0D9         	movff	?___wmul,sprintf@width
  4980  000082  C038  F0DA         	movff	?___wmul+1,sprintf@width+1
  4981                           
  4982                           ;doprnt.c: 601: width += *f++ - '0';
  4983  000086  0ED0               	movlw	208
  4984  000088  0100               	movlb	0	; () banked
  4985  00008A  6FBE               	movwf	??_sprintf& (0+255),b
  4986  00008C  0EFF               	movlw	255
  4987  00008E  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  4988  000090  C0B3  FFF6         	movff	sprintf@f,tblptrl
  4989  000094  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  4990  000098                     	if	0	;tblptru may be non-zero
  4991  000098                     	endif
  4992  000098                     	if	0	;tblptru may be non-zero
  4993  000098                     	endif
  4994  000098  0008               	tblrd		*
  4995  00009A  50F5               	movf	tablat,w,c
  4996  00009C  6FC0               	movwf	(??_sprintf+2)& (0+255),b
  4997  00009E  6BC1               	clrf	(??_sprintf+3)& (0+255),b
  4998  0000A0  51BE               	movf	??_sprintf& (0+255),w,b
  4999  0000A2  27C0               	addwf	(??_sprintf+2)& (0+255),f,b
  5000  0000A4  51BF               	movf	(??_sprintf+1)& (0+255),w,b
  5001  0000A6  23C1               	addwfc	(??_sprintf+3)& (0+255),f,b
  5002  0000A8  51C0               	movf	(??_sprintf+2)& (0+255),w,b
  5003  0000AA  27D9               	addwf	sprintf@width& (0+255),f,b
  5004  0000AC  51C1               	movf	(??_sprintf+3)& (0+255),w,b
  5005  0000AE  23DA               	addwfc	(sprintf@width+1)& (0+255),f,b
  5006                           
  5007                           ; BSR set to: 0
  5008  0000B0  4BB3               	infsnz	sprintf@f& (0+255),f,b
  5009  0000B2  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5013  0000B4  C0B3  FFF6         	movff	sprintf@f,tblptrl
  5014  0000B8  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  5015  0000BC                     	if	0	;tblptru may be non-zero
  5016  0000BC                     	endif
  5017  0000BC                     	if	0	;tblptru may be non-zero
  5018  0000BC                     	endif
  5019  0000BC  0008               	tblrd		*
  5020  0000BE  50F5               	movf	tablat,w,c
  5021  0000C0  EC1C  F01A         	call	_isdigit
  5022  0000C4  B0D8               	btfsc	status,0,c
  5023  0000C6  D7D1               	goto	l464
  5024  0000C8                     u5880:
  5025                           
  5026                           ;doprnt.c: 608: }
  5027                           ;doprnt.c: 611: if(*f == '.') {
  5028  0000C8  C0B3  FFF6         	movff	sprintf@f,tblptrl
  5029  0000CC  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  5030  0000D0                     	if	0	;tblptru may be non-zero
  5031  0000D0                     	endif
  5032  0000D0                     	if	0	;tblptru may be non-zero
  5033  0000D0                     	endif
  5034  0000D0  0008               	tblrd		*
  5035  0000D2  50F5               	movf	tablat,w,c
  5036  0000D4  0A2E               	xorlw	46
  5037  0000D6  A4D8               	btfss	status,2,c
  5038  0000D8  D030               	goto	l466
  5039                           
  5040                           ;doprnt.c: 612: flag |= 0x4000;
  5041  0000DA  0100               	movlb	0	; () banked
  5042  0000DC  8DCE               	bsf	(sprintf@flag+1)& (0+255),6,b
  5043                           
  5044                           ;doprnt.c: 613: f++;
  5045  0000DE  4BB3               	infsnz	sprintf@f& (0+255),f,b
  5046  0000E0  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;doprnt.c: 620: {
  5050                           ;doprnt.c: 621: prec = 0;
  5051  0000E2  0E00               	movlw	0
  5052  0000E4  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  5053  0000E6  0E00               	movlw	0
  5054  0000E8  6FDE               	movwf	sprintf@prec& (0+255),b
  5055                           
  5056                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5057  0000EA  D01C               	goto	l467
  5058  0000EC                     
  5059                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5060                           
  5061                           ; BSR set to: 0
  5062  0000EC  C0DE  F037         	movff	sprintf@prec,___wmul@multiplier
  5063  0000F0  C0DF  F038         	movff	sprintf@prec+1,___wmul@multiplier+1
  5064  0000F4  0E00               	movlw	0
  5065  0000F6  6E3A               	movwf	___wmul@multiplicand+1,c
  5066  0000F8  0E0A               	movlw	10
  5067  0000FA  6E39               	movwf	___wmul@multiplicand,c
  5068  0000FC  EC7C  F019         	call	___wmul	;wreg free
  5069  000100  C0B3  FFF6         	movff	sprintf@f,tblptrl
  5070  000104  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  5071  000108                     	if	0	;tblptru may be non-zero
  5072  000108                     	endif
  5073  000108                     	if	0	;tblptru may be non-zero
  5074  000108                     	endif
  5075  000108  0008               	tblrd		*
  5076  00010A  50F5               	movf	tablat,w,c
  5077  00010C  2637               	addwf	?___wmul,f,c
  5078  00010E  0E00               	movlw	0
  5079  000110  2238               	addwfc	?___wmul+1,f,c
  5080  000112  0ED0               	movlw	208
  5081  000114  2437               	addwf	?___wmul,w,c
  5082  000116  0100               	movlb	0	; () banked
  5083  000118  6FDE               	movwf	sprintf@prec& (0+255),b
  5084  00011A  0EFF               	movlw	255
  5085  00011C  2038               	addwfc	?___wmul+1,w,c
  5086  00011E  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  5087                           
  5088                           ; BSR set to: 0
  5089  000120  4BB3               	infsnz	sprintf@f& (0+255),f,b
  5090  000122  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  5091  000124                     l467:
  5092                           
  5093                           ; BSR set to: 0
  5094                           
  5095                           ; BSR set to: 0
  5096  000124  C0B3  FFF6         	movff	sprintf@f,tblptrl
  5097  000128  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  5098  00012C                     	if	0	;tblptru may be non-zero
  5099  00012C                     	endif
  5100  00012C                     	if	0	;tblptru may be non-zero
  5101  00012C                     	endif
  5102  00012C  0008               	tblrd		*
  5103  00012E  50F5               	movf	tablat,w,c
  5104  000130  EC1C  F01A         	call	_isdigit
  5105  000134  A0D8               	btfss	status,0,c
  5106  000136  D05A               	goto	l471
  5107  000138  D7D9               	goto	l468
  5108  00013A                     l466:
  5109                           
  5110                           ;doprnt.c: 626: prec = 0;
  5111  00013A  0E00               	movlw	0
  5112  00013C  0100               	movlb	0	; () banked
  5113  00013E  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  5114  000140  0E00               	movlw	0
  5115  000142  6FDE               	movwf	sprintf@prec& (0+255),b
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;doprnt.c: 628: flag |= 0x1000;
  5119  000144  89CE               	bsf	(sprintf@flag+1)& (0+255),4,b
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;doprnt.c: 630: }
  5123                           ;doprnt.c: 635: switch(c = *f++) {
  5124  000146  D052               	goto	l471
  5125  000148                     
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 663: flag |= 0x400;
  5128                           
  5129                           ; BSR set to: 0
  5130  000148  85CE               	bsf	(sprintf@flag+1)& (0+255),2,b
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;doprnt.c: 698: case 'i':
  5134                           ;doprnt.c: 699: break;
  5135                           
  5136                           ; BSR set to: 0
  5137                           
  5138                           ;doprnt.c: 697: case 'd':
  5139                           
  5140                           ;doprnt.c: 664: break;
  5141  00014A  D068               	goto	l475
  5142  00014C                     
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 753: if(prec && prec < len)
  5145                           
  5146                           ; BSR set to: 0
  5147  00014C  51DE               	movf	sprintf@prec& (0+255),w,b
  5148  00014E  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5149  000150  B4D8               	btfsc	status,2,c
  5150  000152  D00A               	goto	l479
  5151                           
  5152                           ; BSR set to: 0
  5153  000154  51CB               	movf	sprintf@len& (0+255),w,b
  5154  000156  5DDE               	subwf	sprintf@prec& (0+255),w,b
  5155  000158  51CC               	movf	(sprintf@len+1)& (0+255),w,b
  5156  00015A  59DF               	subwfb	(sprintf@prec+1)& (0+255),w,b
  5157  00015C  B0D8               	btfsc	status,0,c
  5158  00015E  D004               	goto	l479
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;doprnt.c: 754: len = prec;
  5162  000160  C0DE  F0CB         	movff	sprintf@prec,sprintf@len
  5163  000164  C0DF  F0CC         	movff	sprintf@prec+1,sprintf@len+1
  5164  000168                     l479:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;doprnt.c: 757: if(width > len)
  5168                           
  5169                           ; BSR set to: 0
  5170  000168  51D9               	movf	sprintf@width& (0+255),w,b
  5171  00016A  5DCB               	subwf	sprintf@len& (0+255),w,b
  5172  00016C  51DA               	movf	(sprintf@width+1)& (0+255),w,b
  5173  00016E  59CC               	subwfb	(sprintf@len+1)& (0+255),w,b
  5174  000170  B0D8               	btfsc	status,0,c
  5175  000172  D005               	goto	l480
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;doprnt.c: 758: width -= len;
  5179  000174  51CB               	movf	sprintf@len& (0+255),w,b
  5180  000176  5FD9               	subwf	sprintf@width& (0+255),f,b
  5181  000178  51CC               	movf	(sprintf@len+1)& (0+255),w,b
  5182  00017A  5BDA               	subwfb	(sprintf@width+1)& (0+255),f,b
  5183  00017C  D00D               	goto	l482
  5184  00017E                     l480:
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;doprnt.c: 759: else
  5188                           ;doprnt.c: 760: width = 0;
  5189                           
  5190                           ; BSR set to: 0
  5191  00017E  0E00               	movlw	0
  5192  000180  6FDA               	movwf	(sprintf@width+1)& (0+255),b
  5193  000182  0E00               	movlw	0
  5194  000184  6FD9               	movwf	sprintf@width& (0+255),b
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;doprnt.c: 764: while(width--)
  5198  000186  D008               	goto	l482
  5199  000188                     l5339:
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;doprnt.c: 765: ((*sp++ = (' ')));
  5203  000188  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  5204  00018C  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  5205  000190  0E20               	movlw	32
  5206  000192  6EDF               	movwf	indf2,c
  5207                           
  5208                           ; BSR set to: 0
  5209  000194  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  5210  000196  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  5211  000198                     l482:
  5212                           
  5213                           ; BSR set to: 0
  5214                           
  5215                           ; BSR set to: 0
  5216  000198  07D9               	decf	sprintf@width& (0+255),f,b
  5217  00019A  A0D8               	btfss	status,0,c
  5218  00019C  07DA               	decf	(sprintf@width+1)& (0+255),f,b
  5219  00019E  29D9               	incf	sprintf@width& (0+255),w,b
  5220  0001A0  E1F3               	bnz	l5339
  5221  0001A2  29DA               	incf	(sprintf@width+1)& (0+255),w,b
  5222  0001A4  B4D8               	btfsc	status,2,c
  5223  0001A6  D00F               	goto	l485
  5224  0001A8  D7EF               	goto	l483
  5225  0001AA                     l5345:
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  5229  0001AA  C0C7  FFD9         	movff	sprintf@cp,fsr2l
  5230  0001AE  C0C8  FFDA         	movff	sprintf@cp+1,fsr2h
  5231  0001B2  C0B1  FFE1         	movff	sprintf@sp,fsr1l
  5232  0001B6  C0B2  FFE2         	movff	sprintf@sp+1,fsr1h
  5233  0001BA  CFDF FFE7          	movff	indf2,indf1
  5234                           
  5235                           ; BSR set to: 0
  5236  0001BE  4BC7               	infsnz	sprintf@cp& (0+255),f,b
  5237  0001C0  2BC8               	incf	(sprintf@cp+1)& (0+255),f,b
  5238                           
  5239                           ; BSR set to: 0
  5240  0001C2  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  5241  0001C4  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  5242  0001C6                     l485:
  5243                           
  5244                           ; BSR set to: 0
  5245                           
  5246                           ; BSR set to: 0
  5247  0001C6  07CB               	decf	sprintf@len& (0+255),f,b
  5248  0001C8  A0D8               	btfss	status,0,c
  5249  0001CA  07CC               	decf	(sprintf@len+1)& (0+255),f,b
  5250  0001CC  29CB               	incf	sprintf@len& (0+255),w,b
  5251  0001CE  E1ED               	bnz	l5345
  5252  0001D0  29CC               	incf	(sprintf@len+1)& (0+255),w,b
  5253  0001D2  B4D8               	btfsc	status,2,c
  5254  0001D4  EF1F  F005         	goto	u6390
  5255  0001D8  D7E8               	goto	l486
  5256  0001DA                     
  5257                           ; BSR set to: 0
  5258                           ;doprnt.c: 805: cp = (char *)&c;
  5259                           
  5260                           ; BSR set to: 0
  5261  0001DA  0EE0               	movlw	low sprintf@c
  5262  0001DC  6FC7               	movwf	sprintf@cp& (0+255),b
  5263  0001DE  0E00               	movlw	high sprintf@c
  5264  0001E0  6FC8               	movwf	(sprintf@cp+1)& (0+255),b
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;doprnt.c: 806: len = 1;
  5268  0001E2  0E00               	movlw	0
  5269  0001E4  6FCC               	movwf	(sprintf@len+1)& (0+255),b
  5270  0001E6  0E01               	movlw	1
  5271  0001E8  6FCB               	movwf	sprintf@len& (0+255),b
  5272                           
  5273                           ;doprnt.c: 807: goto dostring;
  5274  0001EA  D7B0               	goto	l478
  5275  0001EC                     l471:
  5276                           
  5277                           ; BSR set to: 0
  5278  0001EC  C0B3  FFF6         	movff	sprintf@f,tblptrl
  5279  0001F0  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  5280  0001F4  0100               	movlb	0	; () banked
  5281  0001F6  4BB3               	infsnz	sprintf@f& (0+255),f,b
  5282  0001F8  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  5283  0001FA                     	if	0	;tblptru may be non-zero
  5284  0001FA                     	endif
  5285  0001FA                     	if	0	;tblptru may be non-zero
  5286  0001FA                     	endif
  5287  0001FA  0008               	tblrd		*
  5288  0001FC  CFF5 F0E0          	movff	tablat,sprintf@c
  5289  000200  51E0               	movf	sprintf@c& (0+255),w,b
  5290                           
  5291                           ; Switch size 1, requested type "space"
  5292                           ; Number of cases is 4, Range of values is 0 to 105
  5293                           ; switch strategies available:
  5294                           ; Name         Instructions Cycles
  5295                           ; simple_byte           13     7 (average)
  5296                           ;	Chosen strategy is simple_byte
  5297  000202  0A00               	xorlw	0	; case 0
  5298  000204  B4D8               	btfsc	status,2,c
  5299  000206  EF2C  F005         	goto	u6400
  5300  00020A  0A64               	xorlw	100	; case 100
  5301  00020C  B4D8               	btfsc	status,2,c
  5302  00020E  D006               	goto	l475
  5303  000210  0A02               	xorlw	2	; case 102
  5304  000212  B4D8               	btfsc	status,2,c
  5305  000214  D799               	goto	l474
  5306  000216  0A0F               	xorlw	15	; case 105
  5307  000218  A4D8               	btfss	status,2,c
  5308  00021A  D7DF               	goto	l488
  5309  00021C                     l475:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;doprnt.c: 825: if(flag & (0x700)) {
  5313                           
  5314                           ; BSR set to: 0
  5315  00021C  0E07               	movlw	7
  5316  00021E  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  5317  000220  B4D8               	btfsc	status,2,c
  5318  000222  D2FC               	goto	l489
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;doprnt.c: 827: if(flag & 0x1000)
  5322  000224  A9CE               	btfss	(sprintf@flag+1)& (0+255),4,b
  5323  000226  D004               	goto	l490
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;doprnt.c: 829: prec = 6;
  5327  000228  0E00               	movlw	0
  5328  00022A  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  5329  00022C  0E06               	movlw	6
  5330  00022E  6FDE               	movwf	sprintf@prec& (0+255),b
  5331  000230                     l490:
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5335                           
  5336                           ; BSR set to: 0
  5337  000230  C0C9  FFD9         	movff	sprintf@ap,fsr2l
  5338  000234  C0CA  FFDA         	movff	sprintf@ap+1,fsr2h
  5339  000238  CFDE F0DB          	movff	postinc2,sprintf@fval
  5340  00023C  CFDE F0DC          	movff	postinc2,sprintf@fval+1
  5341  000240  CFDD F0DD          	movff	postdec2,sprintf@fval+2
  5342                           
  5343                           ; BSR set to: 0
  5344  000244  0E03               	movlw	3
  5345  000246  27C9               	addwf	sprintf@ap& (0+255),f,b
  5346  000248  0E00               	movlw	0
  5347  00024A  23CA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;doprnt.c: 831: if(fval < 0.0) {
  5351  00024C  AFDD               	btfss	(sprintf@fval+2)& (0+255),7,b
  5352  00024E  D011               	goto	l491
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;doprnt.c: 832: fval = -fval;
  5356  000250  C0DB  F080         	movff	sprintf@fval,___ftneg@f1
  5357  000254  C0DC  F081         	movff	sprintf@fval+1,___ftneg@f1+1
  5358  000258  C0DD  F082         	movff	sprintf@fval+2,___ftneg@f1+2
  5359  00025C  EC8F  F019         	call	___ftneg	;wreg free
  5360  000260  C080  F0DB         	movff	?___ftneg,sprintf@fval
  5361  000264  C081  F0DC         	movff	?___ftneg+1,sprintf@fval+1
  5362  000268  C082  F0DD         	movff	?___ftneg+2,sprintf@fval+2
  5363                           
  5364                           ;doprnt.c: 833: flag |= 0x03;
  5365  00026C  0E03               	movlw	3
  5366  00026E  0100               	movlb	0	; () banked
  5367  000270  13CD               	iorwf	sprintf@flag& (0+255),f,b
  5368  000272                     l491:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;doprnt.c: 834: }
  5372                           ;doprnt.c: 835: exp = 0;
  5373                           
  5374                           ; BSR set to: 0
  5375  000272  0E00               	movlw	0
  5376  000274  6FD8               	movwf	(sprintf@exp+1)& (0+255),b
  5377  000276  0E00               	movlw	0
  5378  000278  6FD7               	movwf	sprintf@exp& (0+255),b
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;doprnt.c: 836: if( fval!=0) {
  5382  00027A  51DB               	movf	sprintf@fval& (0+255),w,b
  5383  00027C  11DC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5384  00027E  11DD               	iorwf	(sprintf@fval+2)& (0+255),w,b
  5385  000280  B4D8               	btfsc	status,2,c
  5386  000282  D087               	goto	l496
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5390  000284  0E82               	movlw	130
  5391  000286  6FBE               	movwf	??_sprintf& (0+255),b
  5392  000288  0EFF               	movlw	255
  5393  00028A  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  5394  00028C  C0DB  F0C0         	movff	sprintf@fval,??_sprintf+2
  5395  000290  C0DC  F0C1         	movff	sprintf@fval+1,??_sprintf+3
  5396  000294  C0DD  F0C2         	movff	sprintf@fval+2,??_sprintf+4
  5397  000298  C0DE  F0C3         	movff	sprintf@fval+3,??_sprintf+5
  5398  00029C  0E10               	movlw	16
  5399  00029E  D005               	goto	u6000
  5400  0002A0                     u6005:
  5401  0002A0  90D8               	bcf	status,0,c
  5402  0002A2  33C3               	rrcf	(??_sprintf+5)& (0+255),f,b
  5403  0002A4  33C2               	rrcf	(??_sprintf+4)& (0+255),f,b
  5404  0002A6  33C1               	rrcf	(??_sprintf+3)& (0+255),f,b
  5405  0002A8  33C0               	rrcf	(??_sprintf+2)& (0+255),f,b
  5406  0002AA                     u6000:
  5407  0002AA  2EE8               	decfsz	wreg,f,c
  5408  0002AC  D7F9               	goto	u6005
  5409  0002AE  51C0               	movf	(??_sprintf+2)& (0+255),w,b
  5410  0002B0  25BE               	addwf	??_sprintf& (0+255),w,b
  5411  0002B2  6FD7               	movwf	sprintf@exp& (0+255),b
  5412  0002B4  0E00               	movlw	0
  5413  0002B6  21BF               	addwfc	(??_sprintf+1)& (0+255),w,b
  5414  0002B8  6FD8               	movwf	(sprintf@exp+1)& (0+255),b
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;doprnt.c: 838: exp--;
  5418  0002BA  07D7               	decf	sprintf@exp& (0+255),f,b
  5419  0002BC  A0D8               	btfss	status,0,c
  5420  0002BE  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;doprnt.c: 839: exp *= 3;
  5424  0002C0  C0D7  F037         	movff	sprintf@exp,___wmul@multiplier
  5425  0002C4  C0D8  F038         	movff	sprintf@exp+1,___wmul@multiplier+1
  5426  0002C8  0E00               	movlw	0
  5427  0002CA  6E3A               	movwf	___wmul@multiplicand+1,c
  5428  0002CC  0E03               	movlw	3
  5429  0002CE  6E39               	movwf	___wmul@multiplicand,c
  5430  0002D0  EC7C  F019         	call	___wmul	;wreg free
  5431  0002D4  C037  F0D7         	movff	?___wmul,sprintf@exp
  5432  0002D8  C038  F0D8         	movff	?___wmul+1,sprintf@exp+1
  5433                           
  5434                           ;doprnt.c: 840: exp /= 10;
  5435  0002DC  C0D7  F02F         	movff	sprintf@exp,___awdiv@dividend
  5436  0002E0  C0D8  F030         	movff	sprintf@exp+1,___awdiv@dividend+1
  5437  0002E4  0E00               	movlw	0
  5438  0002E6  6E32               	movwf	___awdiv@divisor+1,c
  5439  0002E8  0E0A               	movlw	10
  5440  0002EA  6E31               	movwf	___awdiv@divisor,c
  5441  0002EC  EC07  F016         	call	___awdiv	;wreg free
  5442  0002F0  C02F  F0D7         	movff	?___awdiv,sprintf@exp
  5443  0002F4  C030  F0D8         	movff	?___awdiv+1,sprintf@exp+1
  5444                           
  5445                           ;doprnt.c: 841: if(exp < 0)
  5446  0002F8  0100               	movlb	0	; () banked
  5447  0002FA  AFD8               	btfss	(sprintf@exp+1)& (0+255),7,b
  5448  0002FC  D003               	goto	l493
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;doprnt.c: 842: exp--;
  5452  0002FE  07D7               	decf	sprintf@exp& (0+255),f,b
  5453  000300  A0D8               	btfss	status,0,c
  5454  000302  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  5455  000304                     l493:
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5459                           
  5460                           ; BSR set to: 0
  5461  000304  51D7               	movf	sprintf@exp& (0+255),w,b
  5462  000306  0800               	sublw	0
  5463  000308  EC97  F008         	call	_scale
  5464  00030C  C08C  F0CF         	movff	?_scale,sprintf@tmpval
  5465  000310  C08D  F0D0         	movff	?_scale+1,sprintf@tmpval+1
  5466  000314  C08E  F0D1         	movff	?_scale+2,sprintf@tmpval+2
  5467                           
  5468                           ;doprnt.c: 847: tmpval.integ *= fval;
  5469  000318  C0CF  F080         	movff	sprintf@tmpval,___ftmul@f1
  5470  00031C  C0D0  F081         	movff	sprintf@tmpval+1,___ftmul@f1+1
  5471  000320  C0D1  F082         	movff	sprintf@tmpval+2,___ftmul@f1+2
  5472  000324  C0DB  F083         	movff	sprintf@fval,___ftmul@f2
  5473  000328  C0DC  F084         	movff	sprintf@fval+1,___ftmul@f2+1
  5474  00032C  C0DD  F085         	movff	sprintf@fval+2,___ftmul@f2+2
  5475  000330  ECC8  F012         	call	___ftmul	;wreg free
  5476  000334  C080  F0CF         	movff	?___ftmul,sprintf@tmpval
  5477  000338  C081  F0D0         	movff	?___ftmul+1,sprintf@tmpval+1
  5478  00033C  C082  F0D1         	movff	?___ftmul+2,sprintf@tmpval+2
  5479                           
  5480                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5481  000340  C0CF  F0A2         	movff	sprintf@tmpval,___ftge@ff1
  5482  000344  C0D0  F0A3         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5483  000348  C0D1  F0A4         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5484  00034C  0E00               	movlw	0
  5485  00034E  0100               	movlb	0	; () banked
  5486  000350  6FA5               	movwf	___ftge@ff2& (0+255),b
  5487  000352  0E80               	movlw	128
  5488  000354  6FA6               	movwf	(___ftge@ff2+1)& (0+255),b
  5489  000356  0E3F               	movlw	63
  5490  000358  6FA7               	movwf	(___ftge@ff2+2)& (0+255),b
  5491  00035A  ECBE  F015         	call	___ftge	;wreg free
  5492  00035E  0100               	movlb	0	; () banked
  5493  000360  B0D8               	btfsc	status,0,c
  5494  000362  D004               	goto	l494
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;doprnt.c: 849: exp--;
  5498  000364  07D7               	decf	sprintf@exp& (0+255),f,b
  5499  000366  A0D8               	btfss	status,0,c
  5500  000368  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  5501  00036A  D013               	goto	l496
  5502  00036C                     l494:
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5506                           
  5507                           ; BSR set to: 0
  5508  00036C  C0CF  F0A2         	movff	sprintf@tmpval,___ftge@ff1
  5509  000370  C0D0  F0A3         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5510  000374  C0D1  F0A4         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5511  000378  0E00               	movlw	0
  5512  00037A  6FA5               	movwf	___ftge@ff2& (0+255),b
  5513  00037C  0E20               	movlw	32
  5514  00037E  6FA6               	movwf	(___ftge@ff2+1)& (0+255),b
  5515  000380  0E41               	movlw	65
  5516  000382  6FA7               	movwf	(___ftge@ff2+2)& (0+255),b
  5517  000384  ECBE  F015         	call	___ftge	;wreg free
  5518  000388  0100               	movlb	0	; () banked
  5519  00038A  A0D8               	btfss	status,0,c
  5520  00038C  D002               	goto	l496
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;doprnt.c: 851: exp++;
  5524  00038E  4BD7               	infsnz	sprintf@exp& (0+255),f,b
  5525  000390  2BD8               	incf	(sprintf@exp+1)& (0+255),f,b
  5526  000392                     l496:
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;doprnt.c: 852: }
  5530                           ;doprnt.c: 1112: if(prec <= 12)
  5531                           
  5532                           ; BSR set to: 0
  5533                           
  5534                           ; BSR set to: 0
  5535                           
  5536                           ; BSR set to: 0
  5537  000392  BFDF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5538  000394  D006               	goto	u6040
  5539  000396  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  5540  000398  E11B               	bnz	l5409
  5541  00039A  0E0D               	movlw	13
  5542  00039C  5DDE               	subwf	sprintf@prec& (0+255),w,b
  5543  00039E  B0D8               	btfsc	status,0,c
  5544  0003A0  D017               	goto	l497
  5545  0003A2                     u6040:
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;doprnt.c: 1113: fval += fround(prec);
  5549  0003A2  C0DB  F096         	movff	sprintf@fval,___ftadd@f1
  5550  0003A6  C0DC  F097         	movff	sprintf@fval+1,___ftadd@f1+1
  5551  0003AA  C0DD  F098         	movff	sprintf@fval+2,___ftadd@f1+2
  5552  0003AE  51DE               	movf	sprintf@prec& (0+255),w,b
  5553  0003B0  ECA7  F00A         	call	_fround
  5554  0003B4  C08C  F099         	movff	?_fround,___ftadd@f2
  5555  0003B8  C08D  F09A         	movff	?_fround+1,___ftadd@f2+1
  5556  0003BC  C08E  F09B         	movff	?_fround+2,___ftadd@f2+2
  5557  0003C0  EC72  F00F         	call	___ftadd	;wreg free
  5558  0003C4  C096  F0DB         	movff	?___ftadd,sprintf@fval
  5559  0003C8  C097  F0DC         	movff	?___ftadd+1,sprintf@fval+1
  5560  0003CC  C098  F0DD         	movff	?___ftadd+2,sprintf@fval+2
  5561  0003D0                     l497:
  5562  0003D0                     l5409:
  5563                           
  5564                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5565  0003D0  0100               	movlb	0	; () banked
  5566  0003D2  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5567  0003D4  D006               	goto	u6050
  5568  0003D6  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  5569  0003D8  E11F               	bnz	l5417
  5570  0003DA  0E0A               	movlw	10
  5571  0003DC  5DD7               	subwf	sprintf@exp& (0+255),w,b
  5572  0003DE  B0D8               	btfsc	status,0,c
  5573  0003E0  D01B               	goto	u6080
  5574  0003E2                     u6050:
  5575                           
  5576                           ; BSR set to: 0
  5577  0003E2  51DB               	movf	sprintf@fval& (0+255),w,b
  5578  0003E4  11DC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5579  0003E6  11DD               	iorwf	(sprintf@fval+2)& (0+255),w,b
  5580  0003E8  B4D8               	btfsc	status,2,c
  5581  0003EA  D054               	goto	l498
  5582                           
  5583                           ; BSR set to: 0
  5584  0003EC  C0DB  F0A2         	movff	sprintf@fval,___fttol@f1
  5585  0003F0  C0DC  F0A3         	movff	sprintf@fval+1,___fttol@f1+1
  5586  0003F4  C0DD  F0A4         	movff	sprintf@fval+2,___fttol@f1+2
  5587  0003F8  EC4C  F012         	call	___fttol	;wreg free
  5588  0003FC  0100               	movlb	0	; () banked
  5589  0003FE  51A2               	movf	?___fttol& (0+255),w,b
  5590  000400  11A3               	iorwf	(?___fttol+1)& (0+255),w,b
  5591  000402  11A4               	iorwf	(?___fttol+2)& (0+255),w,b
  5592  000404  11A5               	iorwf	(?___fttol+3)& (0+255),w,b
  5593  000406  B4D8               	btfsc	status,2,c
  5594                           
  5595                           ; BSR set to: 0
  5596  000408  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5597  00040A  D044               	goto	l498
  5598  00040C  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  5599  00040E  E104               	bnz	l5417
  5600  000410  0E02               	movlw	2
  5601  000412  5DD7               	subwf	sprintf@exp& (0+255),w,b
  5602  000414  A0D8               	btfss	status,0,c
  5603  000416  D03E               	goto	l498
  5604  000418                     u6080:
  5605  000418                     l5417:
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5609  000418  C0CF  F0A2         	movff	sprintf@tmpval,___ftge@ff1
  5610  00041C  C0D0  F0A3         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5611  000420  C0D1  F0A4         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5612  000424  0E70               	movlw	112
  5613  000426  6FA5               	movwf	___ftge@ff2& (0+255),b
  5614  000428  0E89               	movlw	137
  5615  00042A  6FA6               	movwf	(___ftge@ff2+1)& (0+255),b
  5616  00042C  0E40               	movlw	64
  5617  00042E  6FA7               	movwf	(___ftge@ff2+2)& (0+255),b
  5618  000430  ECBE  F015         	call	___ftge	;wreg free
  5619  000434  0100               	movlb	0	; () banked
  5620  000436  B0D8               	btfsc	status,0,c
  5621  000438  D002               	goto	l501
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5625  00043A  0EF7               	movlw	247
  5626  00043C  D001               	goto	L1
  5627  00043E                     l501:
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5631                           
  5632                           ; BSR set to: 0
  5633  00043E  0EF8               	movlw	248
  5634  000440                     L1:
  5635  000440  27D7               	addwf	sprintf@exp& (0+255),f,b
  5636  000442  0EFF               	movlw	255
  5637  000444  23D8               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;doprnt.c: 1124: }
  5641                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5642                           
  5643                           ; BSR set to: 0
  5644  000446  51D7               	movf	sprintf@exp& (0+255),w,b
  5645  000448  EC97  F008         	call	_scale
  5646  00044C  C08C  F0CF         	movff	?_scale,sprintf@tmpval
  5647  000450  C08D  F0D0         	movff	?_scale+1,sprintf@tmpval+1
  5648  000454  C08E  F0D1         	movff	?_scale+2,sprintf@tmpval+2
  5649                           
  5650                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5651  000458  C0DB  F029         	movff	sprintf@fval,__tdiv_to_l_@f1
  5652  00045C  C0DC  F02A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5653  000460  C0DD  F02B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5654  000464  C0CF  F02C         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  5655  000468  C0D0  F02D         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  5656  00046C  C0D1  F02E         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  5657  000470  EC1F  F011         	call	__tdiv_to_l_	;wreg free
  5658  000474  C029  F0D3         	movff	?__tdiv_to_l_,sprintf@val
  5659  000478  C02A  F0D4         	movff	?__tdiv_to_l_+1,sprintf@val+1
  5660  00047C  C02B  F0D5         	movff	?__tdiv_to_l_+2,sprintf@val+2
  5661  000480  C02C  F0D6         	movff	?__tdiv_to_l_+3,sprintf@val+3
  5662                           
  5663                           ;doprnt.c: 1129: fval = 0.0;
  5664  000484  0E00               	movlw	0
  5665  000486  0100               	movlb	0	; () banked
  5666  000488  6FDB               	movwf	sprintf@fval& (0+255),b
  5667  00048A  0E00               	movlw	0
  5668  00048C  6FDC               	movwf	(sprintf@fval+1)& (0+255),b
  5669  00048E  0E00               	movlw	0
  5670  000490  6FDD               	movwf	(sprintf@fval+2)& (0+255),b
  5671                           
  5672                           ;doprnt.c: 1130: } else {
  5673  000492  D033               	goto	l507
  5674  000494                     l498:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5678                           
  5679                           ; BSR set to: 0
  5680  000494  C0DB  F0A2         	movff	sprintf@fval,___fttol@f1
  5681  000498  C0DC  F0A3         	movff	sprintf@fval+1,___fttol@f1+1
  5682  00049C  C0DD  F0A4         	movff	sprintf@fval+2,___fttol@f1+2
  5683  0004A0  EC4C  F012         	call	___fttol	;wreg free
  5684  0004A4  C0A2  F0D3         	movff	?___fttol,sprintf@val
  5685  0004A8  C0A3  F0D4         	movff	?___fttol+1,sprintf@val+1
  5686  0004AC  C0A4  F0D5         	movff	?___fttol+2,sprintf@val+2
  5687  0004B0  C0A5  F0D6         	movff	?___fttol+3,sprintf@val+3
  5688                           
  5689                           ;doprnt.c: 1132: fval -= (double)val;
  5690  0004B4  C0DB  F0A2         	movff	sprintf@fval,___ftsub@f1
  5691  0004B8  C0DC  F0A3         	movff	sprintf@fval+1,___ftsub@f1+1
  5692  0004BC  C0DD  F0A4         	movff	sprintf@fval+2,___ftsub@f1+2
  5693  0004C0  C0D3  F031         	movff	sprintf@val,___lltoft@c
  5694  0004C4  C0D4  F032         	movff	sprintf@val+1,___lltoft@c+1
  5695  0004C8  C0D5  F033         	movff	sprintf@val+2,___lltoft@c+2
  5696  0004CC  C0D6  F034         	movff	sprintf@val+3,___lltoft@c+3
  5697  0004D0  ECCA  F017         	call	___lltoft	;wreg free
  5698  0004D4  C031  F0A5         	movff	?___lltoft,___ftsub@f2
  5699  0004D8  C032  F0A6         	movff	?___lltoft+1,___ftsub@f2+1
  5700  0004DC  C033  F0A7         	movff	?___lltoft+2,___ftsub@f2+2
  5701  0004E0  ECBC  F018         	call	___ftsub	;wreg free
  5702  0004E4  C0A2  F0DB         	movff	?___ftsub,sprintf@fval
  5703  0004E8  C0A3  F0DC         	movff	?___ftsub+1,sprintf@fval+1
  5704  0004EC  C0A4  F0DD         	movff	?___ftsub+2,sprintf@fval+2
  5705                           
  5706                           ;doprnt.c: 1133: exp = 0;
  5707  0004F0  0E00               	movlw	0
  5708  0004F2  0100               	movlb	0	; () banked
  5709  0004F4  6FD8               	movwf	(sprintf@exp+1)& (0+255),b
  5710  0004F6  0E00               	movlw	0
  5711  0004F8  6FD7               	movwf	sprintf@exp& (0+255),b
  5712  0004FA                     l507:
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;doprnt.c: 1134: }
  5716                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5717                           
  5718                           ; BSR set to: 0
  5719  0004FA  0E01               	movlw	1
  5720  0004FC  6FE0               	movwf	sprintf@c& (0+255),b
  5721  0004FE                     l5437:
  5722                           
  5723                           ; BSR set to: 0
  5724  0004FE  0E0A               	movlw	10
  5725  000500  19E0               	xorwf	sprintf@c& (0+255),w,b
  5726  000502  B4D8               	btfsc	status,2,c
  5727  000504  D018               	goto	u6120
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;doprnt.c: 1137: if(val < dpowers[c])
  5731                           
  5732                           ; BSR set to: 0
  5733                           
  5734                           ; BSR set to: 0
  5735  000506  51E0               	movf	sprintf@c& (0+255),w,b
  5736  000508  0D04               	mullw	4
  5737  00050A  0E7B               	movlw	low _dpowers
  5738  00050C  24F3               	addwf	prodl,w,c
  5739  00050E  6EF6               	movwf	tblptrl,c
  5740  000510  0EFE               	movlw	high _dpowers
  5741  000512  20F4               	addwfc	prodh,w,c
  5742  000514  6EF7               	movwf	tblptrh,c
  5743  000516                     	if	0	;There are less than 3 active tblptr bytes
  5744  000516                     	endif
  5745  000516  0009               	tblrd		*+
  5746  000518  50F5               	movf	tablat,w,c
  5747  00051A  5DD3               	subwf	sprintf@val& (0+255),w,b
  5748  00051C  0009               	tblrd		*+
  5749  00051E  50F5               	movf	tablat,w,c
  5750  000520  59D4               	subwfb	(sprintf@val+1)& (0+255),w,b
  5751  000522  0009               	tblrd		*+
  5752  000524  50F5               	movf	tablat,w,c
  5753  000526  59D5               	subwfb	(sprintf@val+2)& (0+255),w,b
  5754  000528  0009               	tblrd		*+
  5755  00052A  50F5               	movf	tablat,w,c
  5756  00052C  59D6               	subwfb	(sprintf@val+3)& (0+255),w,b
  5757  00052E  A0D8               	btfss	status,0,c
  5758  000530  D002               	goto	u6120
  5759                           
  5760                           ; BSR set to: 0
  5761                           
  5762                           ; BSR set to: 0
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;doprnt.c: 1138: break;
  5766  000532  2BE0               	incf	sprintf@c& (0+255),f,b
  5767  000534  D7E4               	goto	l5437
  5768  000536                     u6120:
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;doprnt.c: 1142: width -= prec + c + exp;
  5772                           
  5773                           ; BSR set to: 0
  5774  000536  C0E0  F0BE         	movff	sprintf@c,??_sprintf
  5775  00053A  6BBF               	clrf	(??_sprintf+1)& (0+255),b
  5776  00053C  BFBE               	btfsc	??_sprintf& (0+255),7,b
  5777  00053E  07BF               	decf	(??_sprintf+1)& (0+255),f,b
  5778  000540  51DE               	movf	sprintf@prec& (0+255),w,b
  5779  000542  27BE               	addwf	??_sprintf& (0+255),f,b
  5780  000544  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  5781  000546  23BF               	addwfc	(??_sprintf+1)& (0+255),f,b
  5782  000548  51D7               	movf	sprintf@exp& (0+255),w,b
  5783  00054A  27BE               	addwf	??_sprintf& (0+255),f,b
  5784  00054C  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  5785  00054E  23BF               	addwfc	(??_sprintf+1)& (0+255),f,b
  5786  000550  51BE               	movf	??_sprintf& (0+255),w,b
  5787  000552  5FD9               	subwf	sprintf@width& (0+255),f,b
  5788  000554  51BF               	movf	(??_sprintf+1)& (0+255),w,b
  5789  000556  5BDA               	subwfb	(sprintf@width+1)& (0+255),f,b
  5790                           
  5791                           ;doprnt.c: 1143: if(
  5792                           ;doprnt.c: 1147: prec)
  5793  000558  51DE               	movf	sprintf@prec& (0+255),w,b
  5794  00055A  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5795  00055C  B4D8               	btfsc	status,2,c
  5796  00055E  D003               	goto	l511
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;doprnt.c: 1148: width--;
  5800  000560  07D9               	decf	sprintf@width& (0+255),f,b
  5801  000562  A0D8               	btfss	status,0,c
  5802  000564  07DA               	decf	(sprintf@width+1)& (0+255),f,b
  5803  000566                     l511:
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;doprnt.c: 1149: if(flag & 0x03)
  5807                           
  5808                           ; BSR set to: 0
  5809  000566  0E03               	movlw	3
  5810  000568  15CD               	andwf	sprintf@flag& (0+255),w,b
  5811  00056A  6FBE               	movwf	??_sprintf& (0+255),b
  5812  00056C  0E00               	movlw	0
  5813  00056E  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  5814  000570  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  5815  000572  51BE               	movf	??_sprintf& (0+255),w,b
  5816  000574  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  5817  000576  B4D8               	btfsc	status,2,c
  5818  000578  D00C               	goto	l513
  5819  00057A  D008               	goto	l5461
  5820  00057C                     l5457:
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  5824  00057C  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  5825  000580  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  5826  000584  0E20               	movlw	32
  5827  000586  6EDF               	movwf	indf2,c
  5828                           
  5829                           ; BSR set to: 0
  5830  000588  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  5831  00058A  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  5832  00058C                     l5461:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;doprnt.c: 1182: width--;
  5836  00058C  07D9               	decf	sprintf@width& (0+255),f,b
  5837  00058E  A0D8               	btfss	status,0,c
  5838  000590  07DA               	decf	(sprintf@width+1)& (0+255),f,b
  5839  000592                     l513:
  5840                           
  5841                           ; BSR set to: 0
  5842                           
  5843                           ; BSR set to: 0
  5844  000592  BFDA               	btfsc	(sprintf@width+1)& (0+255),7,b
  5845  000594  D005               	goto	u6150
  5846  000596  51DA               	movf	(sprintf@width+1)& (0+255),w,b
  5847  000598  E1F1               	bnz	l5457
  5848  00059A  05D9               	decf	sprintf@width& (0+255),w,b
  5849  00059C  B0D8               	btfsc	status,0,c
  5850  00059E  D7EE               	goto	l514
  5851  0005A0                     u6150:
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;doprnt.c: 1183: }
  5855                           ;doprnt.c: 1188: if(flag & 0x03)
  5856                           
  5857                           ; BSR set to: 0
  5858  0005A0  0E03               	movlw	3
  5859  0005A2  15CD               	andwf	sprintf@flag& (0+255),w,b
  5860  0005A4  6FBE               	movwf	??_sprintf& (0+255),b
  5861  0005A6  0E00               	movlw	0
  5862  0005A8  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  5863  0005AA  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  5864  0005AC  51BE               	movf	??_sprintf& (0+255),w,b
  5865  0005AE  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  5866  0005B0  B4D8               	btfsc	status,2,c
  5867  0005B2  D050               	goto	l517
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  5871  0005B4  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  5872  0005B8  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  5873  0005BC  0E2D               	movlw	45
  5874  0005BE  D047               	goto	L2
  5875  0005C0                     
  5876                           ; BSR set to: 0
  5877                           ;doprnt.c: 1200: {
  5878                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5879                           
  5880                           ; BSR set to: 0
  5881  0005C0  C0D3  F029         	movff	sprintf@val,___lldiv@dividend
  5882  0005C4  C0D4  F02A         	movff	sprintf@val+1,___lldiv@dividend+1
  5883  0005C8  C0D5  F02B         	movff	sprintf@val+2,___lldiv@dividend+2
  5884  0005CC  C0D6  F02C         	movff	sprintf@val+3,___lldiv@dividend+3
  5885  0005D0  51E0               	movf	sprintf@c& (0+255),w,b
  5886  0005D2  0D04               	mullw	4
  5887  0005D4  0E7B               	movlw	low _dpowers
  5888  0005D6  24F3               	addwf	prodl,w,c
  5889  0005D8  6EF6               	movwf	tblptrl,c
  5890  0005DA  0EFE               	movlw	high _dpowers
  5891  0005DC  20F4               	addwfc	prodh,w,c
  5892  0005DE  6EF7               	movwf	tblptrh,c
  5893  0005E0                     	if	0	;There are less than 3 active tblptr bytes
  5894  0005E0                     	endif
  5895  0005E0  0009               	tblrd		*+
  5896  0005E2  CFF5 F02D          	movff	tablat,___lldiv@divisor
  5897  0005E6  0009               	tblrd		*+
  5898  0005E8  CFF5 F02E          	movff	tablat,___lldiv@divisor+1
  5899  0005EC  0009               	tblrd		*+
  5900  0005EE  CFF5 F02F          	movff	tablat,___lldiv@divisor+2
  5901  0005F2  000A               	tblrd		*-
  5902  0005F4  CFF5 F030          	movff	tablat,___lldiv@divisor+3
  5903  0005F8  EC49  F016         	call	___lldiv	;wreg free
  5904  0005FC  C029  F0CF         	movff	?___lldiv,sprintf@tmpval
  5905  000600  C02A  F0D0         	movff	?___lldiv+1,sprintf@tmpval+1
  5906  000604  C02B  F0D1         	movff	?___lldiv+2,sprintf@tmpval+2
  5907  000608  C02C  F0D2         	movff	?___lldiv+3,sprintf@tmpval+3
  5908                           
  5909                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5910  00060C  C0CF  F036         	movff	sprintf@tmpval,___llmod@dividend
  5911  000610  C0D0  F037         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5912  000614  C0D1  F038         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5913  000618  C0D2  F039         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5914  00061C  0E0A               	movlw	10
  5915  00061E  6E3A               	movwf	___llmod@divisor,c
  5916  000620  0E00               	movlw	0
  5917  000622  6E3B               	movwf	___llmod@divisor+1,c
  5918  000624  0E00               	movlw	0
  5919  000626  6E3C               	movwf	___llmod@divisor+2,c
  5920  000628  0E00               	movlw	0
  5921  00062A  6E3D               	movwf	___llmod@divisor+3,c
  5922  00062C  EC66  F017         	call	___llmod	;wreg free
  5923  000630  C036  F0CF         	movff	?___llmod,sprintf@tmpval
  5924  000634  C037  F0D0         	movff	?___llmod+1,sprintf@tmpval+1
  5925  000638  C038  F0D1         	movff	?___llmod+2,sprintf@tmpval+2
  5926  00063C  C039  F0D2         	movff	?___llmod+3,sprintf@tmpval+3
  5927                           
  5928                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  5929  000640  0100               	movlb	0	; () banked
  5930  000642  51CF               	movf	sprintf@tmpval& (0+255),w,b
  5931  000644  0F30               	addlw	48
  5932  000646  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  5933  00064A  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  5934  00064E                     L2:
  5935  00064E  6EDF               	movwf	indf2,c
  5936                           
  5937                           ; BSR set to: 0
  5938  000650  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  5939  000652  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  5940  000654                     l517:
  5941                           
  5942                           ; BSR set to: 0
  5943                           
  5944                           ; BSR set to: 0
  5945  000654  07E0               	decf	sprintf@c& (0+255),f,b
  5946  000656  29E0               	incf	sprintf@c& (0+255),w,b
  5947  000658  B4D8               	btfsc	status,2,c
  5948  00065A  D00C               	goto	l520
  5949  00065C  D7B1               	goto	l518
  5950  00065E                     l5481:
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  5954  00065E  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  5955  000662  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  5956  000666  0E30               	movlw	48
  5957  000668  6EDF               	movwf	indf2,c
  5958                           
  5959                           ; BSR set to: 0
  5960  00066A  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  5961  00066C  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;doprnt.c: 1209: exp--;
  5965  00066E  07D7               	decf	sprintf@exp& (0+255),f,b
  5966  000670  A0D8               	btfss	status,0,c
  5967  000672  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  5968  000674                     l520:
  5969                           
  5970                           ; BSR set to: 0
  5971                           
  5972                           ; BSR set to: 0
  5973  000674  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5974  000676  D005               	goto	u6180
  5975  000678  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  5976  00067A  E1F1               	bnz	l5481
  5977  00067C  05D7               	decf	sprintf@exp& (0+255),w,b
  5978  00067E  B0D8               	btfsc	status,0,c
  5979  000680  D7EE               	goto	l521
  5980  000682                     u6180:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;doprnt.c: 1210: }
  5984                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5985                           
  5986                           ; BSR set to: 0
  5987  000682  BFDF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5988  000684  D009               	goto	l523
  5989  000686  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  5990  000688  E104               	bnz	u6190
  5991  00068A  0E09               	movlw	9
  5992  00068C  5DDE               	subwf	sprintf@prec& (0+255),w,b
  5993  00068E  A0D8               	btfss	status,0,c
  5994  000690  D003               	goto	l523
  5995  000692                     u6190:
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5999  000692  0E08               	movlw	8
  6000  000694  6FE0               	movwf	sprintf@c& (0+255),b
  6001  000696  D002               	goto	l524
  6002  000698                     l523:
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;doprnt.c: 1213: else
  6006                           ;doprnt.c: 1214: c = prec;
  6007  000698  C0DE  F0E0         	movff	sprintf@prec,sprintf@c
  6008  00069C                     l524:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;doprnt.c: 1215: prec -= c;
  6012                           
  6013                           ; BSR set to: 0
  6014  00069C  51E0               	movf	sprintf@c& (0+255),w,b
  6015  00069E  5FDE               	subwf	sprintf@prec& (0+255),f,b
  6016  0006A0  0E00               	movlw	0
  6017  0006A2  BFE0               	btfsc	sprintf@c& (0+255),7,b
  6018  0006A4  0EFF               	movlw	255
  6019  0006A6  5BDF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;doprnt.c: 1219: if(c)
  6023  0006A8  51E0               	movf	sprintf@c& (0+255),w,b
  6024  0006AA  B4D8               	btfsc	status,2,c
  6025  0006AC  D008               	goto	l525
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  6029  0006AE  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  6030  0006B2  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  6031  0006B6  0E2E               	movlw	46
  6032  0006B8  6EDF               	movwf	indf2,c
  6033                           
  6034                           ; BSR set to: 0
  6035  0006BA  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  6036  0006BC  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  6037  0006BE                     l525:
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6041                           
  6042                           ; BSR set to: 0
  6043  0006BE  51E0               	movf	sprintf@c& (0+255),w,b
  6044  0006C0  EC97  F008         	call	_scale
  6045  0006C4  C08C  F0C4         	movff	?_scale,_sprintf$1907
  6046  0006C8  C08D  F0C5         	movff	?_scale+1,_sprintf$1907+1
  6047  0006CC  C08E  F0C6         	movff	?_scale+2,_sprintf$1907+2
  6048                           
  6049                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6050  0006D0  C0DB  F083         	movff	sprintf@fval,___ftmul@f2
  6051  0006D4  C0DC  F084         	movff	sprintf@fval+1,___ftmul@f2+1
  6052  0006D8  C0DD  F085         	movff	sprintf@fval+2,___ftmul@f2+2
  6053  0006DC  C0C4  F080         	movff	_sprintf$1907,___ftmul@f1
  6054  0006E0  C0C5  F081         	movff	_sprintf$1907+1,___ftmul@f1+1
  6055  0006E4  C0C6  F082         	movff	_sprintf$1907+2,___ftmul@f1+2
  6056  0006E8  ECC8  F012         	call	___ftmul	;wreg free
  6057  0006EC  C080  F0A2         	movff	?___ftmul,___fttol@f1
  6058  0006F0  C081  F0A3         	movff	?___ftmul+1,___fttol@f1+1
  6059  0006F4  C082  F0A4         	movff	?___ftmul+2,___fttol@f1+2
  6060  0006F8  EC4C  F012         	call	___fttol	;wreg free
  6061  0006FC  C0A2  F0D3         	movff	?___fttol,sprintf@val
  6062  000700  C0A3  F0D4         	movff	?___fttol+1,sprintf@val+1
  6063  000704  C0A4  F0D5         	movff	?___fttol+2,sprintf@val+2
  6064  000708  C0A5  F0D6         	movff	?___fttol+3,sprintf@val+3
  6065                           
  6066                           ;doprnt.c: 1228: while(c--) {
  6067  00070C  D071               	goto	l526
  6068  00070E                     
  6069                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6070  00070E  C0D3  F029         	movff	sprintf@val,___lldiv@dividend
  6071  000712  C0D4  F02A         	movff	sprintf@val+1,___lldiv@dividend+1
  6072  000716  C0D5  F02B         	movff	sprintf@val+2,___lldiv@dividend+2
  6073  00071A  C0D6  F02C         	movff	sprintf@val+3,___lldiv@dividend+3
  6074  00071E  0100               	movlb	0	; () banked
  6075  000720  51E0               	movf	sprintf@c& (0+255),w,b
  6076  000722  0D04               	mullw	4
  6077  000724  0E7B               	movlw	low _dpowers
  6078  000726  24F3               	addwf	prodl,w,c
  6079  000728  6EF6               	movwf	tblptrl,c
  6080  00072A  0EFE               	movlw	high _dpowers
  6081  00072C  20F4               	addwfc	prodh,w,c
  6082  00072E  6EF7               	movwf	tblptrh,c
  6083  000730                     	if	0	;There are less than 3 active tblptr bytes
  6084  000730                     	endif
  6085  000730  0009               	tblrd		*+
  6086  000732  CFF5 F02D          	movff	tablat,___lldiv@divisor
  6087  000736  0009               	tblrd		*+
  6088  000738  CFF5 F02E          	movff	tablat,___lldiv@divisor+1
  6089  00073C  0009               	tblrd		*+
  6090  00073E  CFF5 F02F          	movff	tablat,___lldiv@divisor+2
  6091  000742  000A               	tblrd		*-
  6092  000744  CFF5 F030          	movff	tablat,___lldiv@divisor+3
  6093  000748  EC49  F016         	call	___lldiv	;wreg free
  6094  00074C  C029  F0CF         	movff	?___lldiv,sprintf@tmpval
  6095  000750  C02A  F0D0         	movff	?___lldiv+1,sprintf@tmpval+1
  6096  000754  C02B  F0D1         	movff	?___lldiv+2,sprintf@tmpval+2
  6097  000758  C02C  F0D2         	movff	?___lldiv+3,sprintf@tmpval+3
  6098                           
  6099                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6100  00075C  C0CF  F036         	movff	sprintf@tmpval,___llmod@dividend
  6101  000760  C0D0  F037         	movff	sprintf@tmpval+1,___llmod@dividend+1
  6102  000764  C0D1  F038         	movff	sprintf@tmpval+2,___llmod@dividend+2
  6103  000768  C0D2  F039         	movff	sprintf@tmpval+3,___llmod@dividend+3
  6104  00076C  0E0A               	movlw	10
  6105  00076E  6E3A               	movwf	___llmod@divisor,c
  6106  000770  0E00               	movlw	0
  6107  000772  6E3B               	movwf	___llmod@divisor+1,c
  6108  000774  0E00               	movlw	0
  6109  000776  6E3C               	movwf	___llmod@divisor+2,c
  6110  000778  0E00               	movlw	0
  6111  00077A  6E3D               	movwf	___llmod@divisor+3,c
  6112  00077C  EC66  F017         	call	___llmod	;wreg free
  6113  000780  C036  F0CF         	movff	?___llmod,sprintf@tmpval
  6114  000784  C037  F0D0         	movff	?___llmod+1,sprintf@tmpval+1
  6115  000788  C038  F0D1         	movff	?___llmod+2,sprintf@tmpval+2
  6116  00078C  C039  F0D2         	movff	?___llmod+3,sprintf@tmpval+3
  6117                           
  6118                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  6119  000790  0100               	movlb	0	; () banked
  6120  000792  51CF               	movf	sprintf@tmpval& (0+255),w,b
  6121  000794  0F30               	addlw	48
  6122  000796  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  6123  00079A  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  6124  00079E  6EDF               	movwf	indf2,c
  6125                           
  6126                           ; BSR set to: 0
  6127  0007A0  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  6128  0007A2  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;doprnt.c: 1232: val %= dpowers[c];
  6132  0007A4  C0D3  F036         	movff	sprintf@val,___llmod@dividend
  6133  0007A8  C0D4  F037         	movff	sprintf@val+1,___llmod@dividend+1
  6134  0007AC  C0D5  F038         	movff	sprintf@val+2,___llmod@dividend+2
  6135  0007B0  C0D6  F039         	movff	sprintf@val+3,___llmod@dividend+3
  6136  0007B4  51E0               	movf	sprintf@c& (0+255),w,b
  6137  0007B6  0D04               	mullw	4
  6138  0007B8  0E7B               	movlw	low _dpowers
  6139  0007BA  24F3               	addwf	prodl,w,c
  6140  0007BC  6EF6               	movwf	tblptrl,c
  6141  0007BE  0EFE               	movlw	high _dpowers
  6142  0007C0  20F4               	addwfc	prodh,w,c
  6143  0007C2  6EF7               	movwf	tblptrh,c
  6144  0007C4                     	if	0	;There are less than 3 active tblptr bytes
  6145  0007C4                     	endif
  6146  0007C4  0009               	tblrd		*+
  6147  0007C6  CFF5 F03A          	movff	tablat,___llmod@divisor
  6148  0007CA  0009               	tblrd		*+
  6149  0007CC  CFF5 F03B          	movff	tablat,___llmod@divisor+1
  6150  0007D0  0009               	tblrd		*+
  6151  0007D2  CFF5 F03C          	movff	tablat,___llmod@divisor+2
  6152  0007D6  000A               	tblrd		*-
  6153  0007D8  CFF5 F03D          	movff	tablat,___llmod@divisor+3
  6154  0007DC  EC66  F017         	call	___llmod	;wreg free
  6155  0007E0  C036  F0D3         	movff	?___llmod,sprintf@val
  6156  0007E4  C037  F0D4         	movff	?___llmod+1,sprintf@val+1
  6157  0007E8  C038  F0D5         	movff	?___llmod+2,sprintf@val+2
  6158  0007EC  C039  F0D6         	movff	?___llmod+3,sprintf@val+3
  6159  0007F0                     l526:
  6160  0007F0  0100               	movlb	0	; () banked
  6161  0007F2  07E0               	decf	sprintf@c& (0+255),f,b
  6162  0007F4  29E0               	incf	sprintf@c& (0+255),w,b
  6163  0007F6  B4D8               	btfsc	status,2,c
  6164  0007F8  D00C               	goto	l529
  6165  0007FA  D789               	goto	l527
  6166  0007FC                     
  6167                           ; BSR set to: 0
  6168                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  6169                           
  6170                           ; BSR set to: 0
  6171  0007FC  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  6172  000800  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  6173  000804  0E30               	movlw	48
  6174  000806  6EDF               	movwf	indf2,c
  6175                           
  6176                           ; BSR set to: 0
  6177  000808  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  6178  00080A  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;doprnt.c: 1237: prec--;
  6182  00080C  07DE               	decf	sprintf@prec& (0+255),f,b
  6183  00080E  A0D8               	btfss	status,0,c
  6184  000810  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  6185  000812                     l529:
  6186                           
  6187                           ; BSR set to: 0
  6188                           
  6189                           ; BSR set to: 0
  6190  000812  51DE               	movf	sprintf@prec& (0+255),w,b
  6191  000814  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  6192  000816  B4D8               	btfsc	status,2,c
  6193  000818  D112               	goto	u6390
  6194  00081A  D7F0               	goto	l530
  6195  00081C                     l489:
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;doprnt.c: 1246: }
  6199                           ;doprnt.c: 1253: {
  6200                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6201                           
  6202                           ; BSR set to: 0
  6203  00081C  C0C9  FFD9         	movff	sprintf@ap,fsr2l
  6204  000820  C0CA  FFDA         	movff	sprintf@ap+1,fsr2h
  6205  000824  CFDE F0D3          	movff	postinc2,sprintf@val
  6206  000828  CFDD F0D4          	movff	postdec2,sprintf@val+1
  6207  00082C  0E00               	movlw	0
  6208  00082E  BFD4               	btfsc	(sprintf@val+1)& (0+255),7,b
  6209  000830  0EFF               	movlw	-1
  6210  000832  6FD5               	movwf	(sprintf@val+2)& (0+255),b
  6211  000834  6FD6               	movwf	(sprintf@val+3)& (0+255),b
  6212                           
  6213                           ; BSR set to: 0
  6214  000836  0E02               	movlw	2
  6215  000838  27C9               	addwf	sprintf@ap& (0+255),f,b
  6216  00083A  0E00               	movlw	0
  6217  00083C  23CA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;doprnt.c: 1261: if((long)val < 0) {
  6221  00083E  AFD6               	btfss	(sprintf@val+3)& (0+255),7,b
  6222  000840  D00A               	goto	l532
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;doprnt.c: 1262: flag |= 0x03;
  6226  000842  0E03               	movlw	3
  6227  000844  13CD               	iorwf	sprintf@flag& (0+255),f,b
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;doprnt.c: 1263: val = -val;
  6231  000846  1FD6               	comf	(sprintf@val+3)& (0+255),f,b
  6232  000848  1FD5               	comf	(sprintf@val+2)& (0+255),f,b
  6233  00084A  1FD4               	comf	(sprintf@val+1)& (0+255),f,b
  6234  00084C  6DD3               	negf	sprintf@val& (0+255),b
  6235  00084E  0E00               	movlw	0
  6236  000850  23D4               	addwfc	(sprintf@val+1)& (0+255),f,b
  6237  000852  23D5               	addwfc	(sprintf@val+2)& (0+255),f,b
  6238  000854  23D6               	addwfc	(sprintf@val+3)& (0+255),f,b
  6239  000856                     l532:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;doprnt.c: 1264: }
  6243                           ;doprnt.c: 1266: }
  6244                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6245                           
  6246                           ; BSR set to: 0
  6247  000856  51DE               	movf	sprintf@prec& (0+255),w,b
  6248  000858  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  6249  00085A  A4D8               	btfss	status,2,c
  6250  00085C  D008               	goto	l533
  6251                           
  6252                           ; BSR set to: 0
  6253  00085E  51D3               	movf	sprintf@val& (0+255),w,b
  6254  000860  11D4               	iorwf	(sprintf@val+1)& (0+255),w,b
  6255  000862  11D5               	iorwf	(sprintf@val+2)& (0+255),w,b
  6256  000864  11D6               	iorwf	(sprintf@val+3)& (0+255),w,b
  6257  000866  A4D8               	btfss	status,2,c
  6258  000868  D002               	goto	l533
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;doprnt.c: 1291: prec++;
  6262  00086A  4BDE               	infsnz	sprintf@prec& (0+255),f,b
  6263  00086C  2BDF               	incf	(sprintf@prec+1)& (0+255),f,b
  6264  00086E                     l533:
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6268                           
  6269                           ; BSR set to: 0
  6270  00086E  0E01               	movlw	1
  6271  000870  6FE0               	movwf	sprintf@c& (0+255),b
  6272  000872                     l5543:
  6273                           
  6274                           ; BSR set to: 0
  6275  000872  0E0A               	movlw	10
  6276  000874  19E0               	xorwf	sprintf@c& (0+255),w,b
  6277  000876  B4D8               	btfsc	status,2,c
  6278  000878  D018               	goto	u6280
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;doprnt.c: 1306: if(val < dpowers[c])
  6282                           
  6283                           ; BSR set to: 0
  6284                           
  6285                           ; BSR set to: 0
  6286  00087A  51E0               	movf	sprintf@c& (0+255),w,b
  6287  00087C  0D04               	mullw	4
  6288  00087E  0E7B               	movlw	low _dpowers
  6289  000880  24F3               	addwf	prodl,w,c
  6290  000882  6EF6               	movwf	tblptrl,c
  6291  000884  0EFE               	movlw	high _dpowers
  6292  000886  20F4               	addwfc	prodh,w,c
  6293  000888  6EF7               	movwf	tblptrh,c
  6294  00088A                     	if	0	;There are less than 3 active tblptr bytes
  6295  00088A                     	endif
  6296  00088A  0009               	tblrd		*+
  6297  00088C  50F5               	movf	tablat,w,c
  6298  00088E  5DD3               	subwf	sprintf@val& (0+255),w,b
  6299  000890  0009               	tblrd		*+
  6300  000892  50F5               	movf	tablat,w,c
  6301  000894  59D4               	subwfb	(sprintf@val+1)& (0+255),w,b
  6302  000896  0009               	tblrd		*+
  6303  000898  50F5               	movf	tablat,w,c
  6304  00089A  59D5               	subwfb	(sprintf@val+2)& (0+255),w,b
  6305  00089C  0009               	tblrd		*+
  6306  00089E  50F5               	movf	tablat,w,c
  6307  0008A0  59D6               	subwfb	(sprintf@val+3)& (0+255),w,b
  6308  0008A2  A0D8               	btfss	status,0,c
  6309  0008A4  D002               	goto	u6280
  6310                           
  6311                           ; BSR set to: 0
  6312                           
  6313                           ; BSR set to: 0
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;doprnt.c: 1307: break;
  6317  0008A6  2BE0               	incf	sprintf@c& (0+255),f,b
  6318  0008A8  D7E4               	goto	l5543
  6319  0008AA                     u6280:
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;doprnt.c: 1339: if(c < prec)
  6323                           
  6324                           ; BSR set to: 0
  6325  0008AA  0E80               	movlw	128
  6326  0008AC  BFE0               	btfsc	sprintf@c& (0+255),7,b
  6327  0008AE  0E7F               	movlw	127
  6328  0008B0  6FBE               	movwf	??_sprintf& (0+255),b
  6329  0008B2  51DE               	movf	sprintf@prec& (0+255),w,b
  6330  0008B4  5DE0               	subwf	sprintf@c& (0+255),w,b
  6331  0008B6  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  6332  0008B8  0A80               	xorlw	128
  6333  0008BA  59BE               	subwfb	??_sprintf& (0+255),w,b
  6334  0008BC  B0D8               	btfsc	status,0,c
  6335  0008BE  D003               	goto	l537
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;doprnt.c: 1340: c = prec;
  6339  0008C0  C0DE  F0E0         	movff	sprintf@prec,sprintf@c
  6340  0008C4  D010               	goto	l539
  6341  0008C6                     l537:
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;doprnt.c: 1341: else if(prec < c)
  6345                           
  6346                           ; BSR set to: 0
  6347  0008C6  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  6348  0008C8  0A80               	xorlw	128
  6349  0008CA  6FBE               	movwf	??_sprintf& (0+255),b
  6350  0008CC  51E0               	movf	sprintf@c& (0+255),w,b
  6351  0008CE  5DDE               	subwf	sprintf@prec& (0+255),w,b
  6352  0008D0  0E80               	movlw	128
  6353  0008D2  BFE0               	btfsc	sprintf@c& (0+255),7,b
  6354  0008D4  0E7F               	movlw	127
  6355  0008D6  59BE               	subwfb	??_sprintf& (0+255),w,b
  6356  0008D8  B0D8               	btfsc	status,0,c
  6357  0008DA  D005               	goto	l539
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;doprnt.c: 1342: prec = c;
  6361  0008DC  51E0               	movf	sprintf@c& (0+255),w,b
  6362  0008DE  6FDE               	movwf	sprintf@prec& (0+255),b
  6363  0008E0  6BDF               	clrf	(sprintf@prec+1)& (0+255),b
  6364  0008E2  BFDE               	btfsc	sprintf@prec& (0+255),7,b
  6365  0008E4  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  6366  0008E6                     l539:
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6370                           
  6371                           ; BSR set to: 0
  6372                           
  6373                           ; BSR set to: 0
  6374  0008E6  51D9               	movf	sprintf@width& (0+255),w,b
  6375  0008E8  11DA               	iorwf	(sprintf@width+1)& (0+255),w,b
  6376  0008EA  B4D8               	btfsc	status,2,c
  6377  0008EC  D00D               	goto	l540
  6378                           
  6379                           ; BSR set to: 0
  6380  0008EE  0E03               	movlw	3
  6381  0008F0  15CD               	andwf	sprintf@flag& (0+255),w,b
  6382  0008F2  6FBE               	movwf	??_sprintf& (0+255),b
  6383  0008F4  0E00               	movlw	0
  6384  0008F6  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  6385  0008F8  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  6386  0008FA  51BE               	movf	??_sprintf& (0+255),w,b
  6387  0008FC  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  6388  0008FE  B4D8               	btfsc	status,2,c
  6389  000900  D003               	goto	l540
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;doprnt.c: 1346: width--;
  6393  000902  07D9               	decf	sprintf@width& (0+255),f,b
  6394  000904  A0D8               	btfss	status,0,c
  6395  000906  07DA               	decf	(sprintf@width+1)& (0+255),f,b
  6396  000908                     l540:
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6400                           
  6401                           ; BSR set to: 0
  6402  000908  ADCE               	btfss	(sprintf@flag+1)& (0+255),6,b
  6403  00090A  D013               	goto	l543
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;doprnt.c: 1349: if(width > prec)
  6407  00090C  51D9               	movf	sprintf@width& (0+255),w,b
  6408  00090E  5DDE               	subwf	sprintf@prec& (0+255),w,b
  6409  000910  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  6410  000912  0A80               	xorlw	128
  6411  000914  6FBE               	movwf	??_sprintf& (0+255),b
  6412  000916  51DA               	movf	(sprintf@width+1)& (0+255),w,b
  6413  000918  0A80               	xorlw	128
  6414  00091A  59BE               	subwfb	??_sprintf& (0+255),w,b
  6415  00091C  B0D8               	btfsc	status,0,c
  6416  00091E  D005               	goto	l542
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;doprnt.c: 1350: width -= prec;
  6420  000920  51DE               	movf	sprintf@prec& (0+255),w,b
  6421  000922  5FD9               	subwf	sprintf@width& (0+255),f,b
  6422  000924  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  6423  000926  5BDA               	subwfb	(sprintf@width+1)& (0+255),f,b
  6424  000928  D004               	goto	l543
  6425  00092A                     l542:
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;doprnt.c: 1351: else
  6429                           ;doprnt.c: 1352: width = 0;
  6430                           
  6431                           ; BSR set to: 0
  6432  00092A  0E00               	movlw	0
  6433  00092C  6FDA               	movwf	(sprintf@width+1)& (0+255),b
  6434  00092E  0E00               	movlw	0
  6435  000930  6FD9               	movwf	sprintf@width& (0+255),b
  6436  000932                     l543:
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;doprnt.c: 1353: }
  6440                           ;doprnt.c: 1381: if(width > c)
  6441                           
  6442                           ; BSR set to: 0
  6443                           
  6444                           ; BSR set to: 0
  6445  000932  0E80               	movlw	128
  6446  000934  BFE0               	btfsc	sprintf@c& (0+255),7,b
  6447  000936  0E7F               	movlw	127
  6448  000938  6FBE               	movwf	??_sprintf& (0+255),b
  6449  00093A  51D9               	movf	sprintf@width& (0+255),w,b
  6450  00093C  5DE0               	subwf	sprintf@c& (0+255),w,b
  6451  00093E  51DA               	movf	(sprintf@width+1)& (0+255),w,b
  6452  000940  0A80               	xorlw	128
  6453  000942  59BE               	subwfb	??_sprintf& (0+255),w,b
  6454  000944  B0D8               	btfsc	status,0,c
  6455  000946  D007               	goto	l544
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;doprnt.c: 1382: width -= c;
  6459  000948  51E0               	movf	sprintf@c& (0+255),w,b
  6460  00094A  5FD9               	subwf	sprintf@width& (0+255),f,b
  6461  00094C  0E00               	movlw	0
  6462  00094E  BFE0               	btfsc	sprintf@c& (0+255),7,b
  6463  000950  0EFF               	movlw	255
  6464  000952  5BDA               	subwfb	(sprintf@width+1)& (0+255),f,b
  6465  000954  D004               	goto	l545
  6466  000956                     l544:
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;doprnt.c: 1383: else
  6470                           ;doprnt.c: 1384: width = 0;
  6471                           
  6472                           ; BSR set to: 0
  6473  000956  0E00               	movlw	0
  6474  000958  6FDA               	movwf	(sprintf@width+1)& (0+255),b
  6475  00095A  0E00               	movlw	0
  6476  00095C  6FD9               	movwf	sprintf@width& (0+255),b
  6477  00095E                     l545:
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;doprnt.c: 1422: {
  6481                           ;doprnt.c: 1424: if(width
  6482                           ;doprnt.c: 1428: )
  6483                           
  6484                           ; BSR set to: 0
  6485  00095E  51D9               	movf	sprintf@width& (0+255),w,b
  6486  000960  11DA               	iorwf	(sprintf@width+1)& (0+255),w,b
  6487  000962  B4D8               	btfsc	status,2,c
  6488  000964  D00F               	goto	u6370
  6489  000966                     u6360:
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  6493                           
  6494                           ; BSR set to: 0
  6495                           
  6496                           ;doprnt.c: 1429: do
  6497  000966  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  6498  00096A  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  6499  00096E  0E20               	movlw	32
  6500  000970  6EDF               	movwf	indf2,c
  6501                           
  6502                           ; BSR set to: 0
  6503  000972  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  6504  000974  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;doprnt.c: 1431: while(--width);
  6508  000976  07D9               	decf	sprintf@width& (0+255),f,b
  6509  000978  A0D8               	btfss	status,0,c
  6510  00097A  07DA               	decf	(sprintf@width+1)& (0+255),f,b
  6511  00097C  51D9               	movf	sprintf@width& (0+255),w,b
  6512  00097E  11DA               	iorwf	(sprintf@width+1)& (0+255),w,b
  6513  000980  A4D8               	btfss	status,2,c
  6514  000982  D7F1               	goto	u6360
  6515  000984                     u6370:
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;doprnt.c: 1438: if(flag & 0x03)
  6519                           
  6520                           ; BSR set to: 0
  6521                           
  6522                           ; BSR set to: 0
  6523  000984  0E03               	movlw	3
  6524  000986  15CD               	andwf	sprintf@flag& (0+255),w,b
  6525  000988  6FBE               	movwf	??_sprintf& (0+255),b
  6526  00098A  0E00               	movlw	0
  6527  00098C  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  6528  00098E  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  6529  000990  51BE               	movf	??_sprintf& (0+255),w,b
  6530  000992  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  6531  000994  B4D8               	btfsc	status,2,c
  6532  000996  D04B               	goto	l550
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6536  000998  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  6537  00099C  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  6538  0009A0  0E2D               	movlw	45
  6539  0009A2  6EDF               	movwf	indf2,c
  6540  0009A4  D042               	goto	l5601
  6541  0009A6                     l5597:
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;doprnt.c: 1478: {
  6545                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6546  0009A6  C0DE  F0BE         	movff	sprintf@prec,??_sprintf
  6547  0009AA  C0DF  F0BF         	movff	sprintf@prec+1,??_sprintf+1
  6548  0009AE  90D8               	bcf	status,0,c
  6549  0009B0  37BE               	rlcf	??_sprintf& (0+255),f,b
  6550  0009B2  37BF               	rlcf	(??_sprintf+1)& (0+255),f,b
  6551  0009B4  90D8               	bcf	status,0,c
  6552  0009B6  37BE               	rlcf	??_sprintf& (0+255),f,b
  6553  0009B8  37BF               	rlcf	(??_sprintf+1)& (0+255),f,b
  6554  0009BA  0E7B               	movlw	low _dpowers
  6555  0009BC  25BE               	addwf	??_sprintf& (0+255),w,b
  6556  0009BE  6EF6               	movwf	tblptrl,c
  6557  0009C0  0EFE               	movlw	high _dpowers
  6558  0009C2  21BF               	addwfc	(??_sprintf+1)& (0+255),w,b
  6559  0009C4  6EF7               	movwf	tblptrh,c
  6560  0009C6                     	if	0	;There are less than 3 active tblptr bytes
  6561  0009C6                     	endif
  6562  0009C6  0009               	tblrd		*+
  6563  0009C8  CFF5 F02D          	movff	tablat,___lldiv@divisor
  6564  0009CC  0009               	tblrd		*+
  6565  0009CE  CFF5 F02E          	movff	tablat,___lldiv@divisor+1
  6566  0009D2  0009               	tblrd		*+
  6567  0009D4  CFF5 F02F          	movff	tablat,___lldiv@divisor+2
  6568  0009D8  000A               	tblrd		*-
  6569  0009DA  CFF5 F030          	movff	tablat,___lldiv@divisor+3
  6570  0009DE  C0D3  F029         	movff	sprintf@val,___lldiv@dividend
  6571  0009E2  C0D4  F02A         	movff	sprintf@val+1,___lldiv@dividend+1
  6572  0009E6  C0D5  F02B         	movff	sprintf@val+2,___lldiv@dividend+2
  6573  0009EA  C0D6  F02C         	movff	sprintf@val+3,___lldiv@dividend+3
  6574  0009EE  EC49  F016         	call	___lldiv	;wreg free
  6575  0009F2  C029  F036         	movff	?___lldiv,___llmod@dividend
  6576  0009F6  C02A  F037         	movff	?___lldiv+1,___llmod@dividend+1
  6577  0009FA  C02B  F038         	movff	?___lldiv+2,___llmod@dividend+2
  6578  0009FE  C02C  F039         	movff	?___lldiv+3,___llmod@dividend+3
  6579  000A02  0E0A               	movlw	10
  6580  000A04  6E3A               	movwf	___llmod@divisor,c
  6581  000A06  0E00               	movlw	0
  6582  000A08  6E3B               	movwf	___llmod@divisor+1,c
  6583  000A0A  0E00               	movlw	0
  6584  000A0C  6E3C               	movwf	___llmod@divisor+2,c
  6585  000A0E  0E00               	movlw	0
  6586  000A10  6E3D               	movwf	___llmod@divisor+3,c
  6587  000A12  EC66  F017         	call	___llmod	;wreg free
  6588  000A16  5036               	movf	?___llmod,w,c
  6589  000A18  0F30               	addlw	48
  6590  000A1A  0100               	movlb	0	; () banked
  6591  000A1C  6FE0               	movwf	sprintf@c& (0+255),b
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;doprnt.c: 1523: }
  6595                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6596  000A1E  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  6597  000A22  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  6598  000A26  C0E0  FFDF         	movff	sprintf@c,indf2
  6599  000A2A                     l5601:
  6600                           
  6601                           ; BSR set to: 0
  6602  000A2A  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  6603  000A2C  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  6604  000A2E                     l550:
  6605                           
  6606                           ; BSR set to: 0
  6607                           
  6608                           ; BSR set to: 0
  6609  000A2E  07DE               	decf	sprintf@prec& (0+255),f,b
  6610  000A30  A0D8               	btfss	status,0,c
  6611  000A32  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  6612  000A34  29DE               	incf	sprintf@prec& (0+255),w,b
  6613  000A36  E1B7               	bnz	l5597
  6614  000A38  29DF               	incf	(sprintf@prec+1)& (0+255),w,b
  6615  000A3A  A4D8               	btfss	status,2,c
  6616  000A3C  D7B4               	goto	l551
  6617  000A3E                     u6390:
  6618                           
  6619                           ; BSR set to: 0
  6620                           
  6621                           ; BSR set to: 0
  6622                           
  6623                           ; BSR set to: 0
  6624  000A3E  C0B3  FFF6         	movff	sprintf@f,tblptrl
  6625  000A42  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  6626  000A46  4BB3               	infsnz	sprintf@f& (0+255),f,b
  6627  000A48  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  6628  000A4A                     	if	0	;tblptru may be non-zero
  6629  000A4A                     	endif
  6630  000A4A                     	if	0	;tblptru may be non-zero
  6631  000A4A                     	endif
  6632  000A4A  0008               	tblrd		*
  6633  000A4C  CFF5 F0E0          	movff	tablat,sprintf@c
  6634  000A50  51E0               	movf	sprintf@c& (0+255),w,b
  6635  000A52  A4D8               	btfss	status,2,c
  6636  000A54  EF10  F000         	goto	l461
  6637  000A58                     u6400:
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;doprnt.c: 1538: *sp = 0;
  6641                           
  6642                           ; BSR set to: 0
  6643                           
  6644                           ;doprnt.c: 1525: }
  6645                           ;doprnt.c: 1533: }
  6646                           ;doprnt.c: 1535: alldone:
  6647                           
  6648                           ; BSR set to: 0
  6649  000A58  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  6650  000A5C  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  6651  000A60  0E00               	movlw	0
  6652  000A62  6EDF               	movwf	indf2,c
  6653  000A64  0012               	return	
  6654  000A66                     __end_of_sprintf:
  6655                           	opt stack 0
  6656                           tblptru	equ	0xFF8
  6657                           tblptrh	equ	0xFF7
  6658                           tblptrl	equ	0xFF6
  6659                           tablat	equ	0xFF5
  6660                           prodh	equ	0xFF4
  6661                           prodl	equ	0xFF3
  6662                           intcon	equ	0xFF2
  6663                           intcon2	equ	0xFF1
  6664                           intcon3	equ	0xFF0
  6665                           postinc0	equ	0xFEE
  6666                           wreg	equ	0xFE8
  6667                           indf1	equ	0xFE7
  6668                           postdec1	equ	0xFE5
  6669                           fsr1h	equ	0xFE2
  6670                           fsr1l	equ	0xFE1
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _scale *****************
  6679 ;; Defined at:
  6680 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  scl             1    wreg     char 
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;  scl             1   18[BANK0 ] char 
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  3   12[BANK0 ] char 
  6687 ;; Registers used:
  6688 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6694 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;Total ram usage:        7 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:    6
  6701 ;; This function calls:
  6702 ;;		___awdiv
  6703 ;;		___awmod
  6704 ;;		___ftmul
  6705 ;;		___wmul
  6706 ;; This function is called by:
  6707 ;;		_sprintf
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text21
  6712  00112E                     __ptext21:
  6713                           	opt stack 0
  6714  00112E                     _scale:
  6715                           	opt stack 22
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;incstack = 0
  6719                           ;scale@scl stored from wreg
  6720  00112E  0100               	movlb	0	; () banked
  6721  001130  6F92               	movwf	scale@scl& (0+255),b
  6722                           
  6723                           ;doprnt.c: 428: if(scl < 0) {
  6724  001132  0100               	movlb	0	; () banked
  6725  001134  AF92               	btfss	scale@scl& (0+255),7,b
  6726  001136  D106               	goto	l450
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;doprnt.c: 429: scl = -scl;
  6730  001138  6D92               	negf	scale@scl& (0+255),b
  6731                           
  6732                           ;doprnt.c: 430: if(scl>=110)
  6733  00113A  5192               	movf	scale@scl& (0+255),w,b
  6734  00113C  0A80               	xorlw	128
  6735  00113E  0F12               	addlw	-238
  6736  001140  A0D8               	btfss	status,0,c
  6737  001142  D093               	goto	l451
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6741  001144  0E00               	movlw	0
  6742  001146  6E3A               	movwf	___wmul@multiplicand+1,c
  6743  001148  0E03               	movlw	3
  6744  00114A  6E39               	movwf	___wmul@multiplicand,c
  6745  00114C  0E00               	movlw	0
  6746  00114E  6E32               	movwf	___awdiv@divisor+1,c
  6747  001150  0E0A               	movlw	10
  6748  001152  6E31               	movwf	___awdiv@divisor,c
  6749  001154  0E00               	movlw	0
  6750  001156  6E2C               	movwf	___awmod@divisor+1,c
  6751  001158  0E64               	movlw	100
  6752  00115A  6E2B               	movwf	___awmod@divisor,c
  6753  00115C  5192               	movf	scale@scl& (0+255),w,b
  6754  00115E  6E29               	movwf	___awmod@dividend,c
  6755  001160  6A2A               	clrf	___awmod@dividend+1,c
  6756  001162  BE29               	btfsc	___awmod@dividend,7,c
  6757  001164  062A               	decf	___awmod@dividend+1,f,c
  6758  001166  EC8A  F016         	call	___awmod	;wreg free
  6759  00116A  C029  F02F         	movff	?___awmod,___awdiv@dividend
  6760  00116E  C02A  F030         	movff	?___awmod+1,___awdiv@dividend+1
  6761  001172  EC07  F016         	call	___awdiv	;wreg free
  6762  001176  0E09               	movlw	9
  6763  001178  242F               	addwf	?___awdiv,w,c
  6764  00117A  6E37               	movwf	___wmul@multiplier,c
  6765  00117C  0E00               	movlw	0
  6766  00117E  2030               	addwfc	?___awdiv+1,w,c
  6767  001180  6E38               	movwf	___wmul@multiplier+1,c
  6768  001182  EC7C  F019         	call	___wmul	;wreg free
  6769  001186  0ECA               	movlw	low __npowers_
  6770  001188  2437               	addwf	?___wmul,w,c
  6771  00118A  6EF6               	movwf	tblptrl,c
  6772  00118C  0EFE               	movlw	high __npowers_
  6773  00118E  2038               	addwfc	?___wmul+1,w,c
  6774  001190  6EF7               	movwf	tblptrh,c
  6775  001192                     	if	0	;There are less than 3 active tblptr bytes
  6776  001192                     	endif
  6777  001192  0009               	tblrd		*+
  6778  001194  CFF5 F083          	movff	tablat,___ftmul@f2
  6779  001198  0009               	tblrd		*+
  6780  00119A  CFF5 F084          	movff	tablat,___ftmul@f2+1
  6781  00119E  000A               	tblrd		*-
  6782  0011A0  CFF5 F085          	movff	tablat,___ftmul@f2+2
  6783  0011A4  0E00               	movlw	0
  6784  0011A6  6E32               	movwf	___awdiv@divisor+1,c
  6785  0011A8  0E64               	movlw	100
  6786  0011AA  6E31               	movwf	___awdiv@divisor,c
  6787  0011AC  0100               	movlb	0	; () banked
  6788  0011AE  5192               	movf	scale@scl& (0+255),w,b
  6789  0011B0  6E2F               	movwf	___awdiv@dividend,c
  6790  0011B2  6A30               	clrf	___awdiv@dividend+1,c
  6791  0011B4  BE2F               	btfsc	___awdiv@dividend,7,c
  6792  0011B6  0630               	decf	___awdiv@dividend+1,f,c
  6793  0011B8  EC07  F016         	call	___awdiv	;wreg free
  6794  0011BC  0E12               	movlw	18
  6795  0011BE  242F               	addwf	?___awdiv,w,c
  6796  0011C0  6E37               	movwf	___wmul@multiplier,c
  6797  0011C2  0E00               	movlw	0
  6798  0011C4  2030               	addwfc	?___awdiv+1,w,c
  6799  0011C6  6E38               	movwf	___wmul@multiplier+1,c
  6800  0011C8  0E00               	movlw	0
  6801  0011CA  6E3A               	movwf	___wmul@multiplicand+1,c
  6802  0011CC  0E03               	movlw	3
  6803  0011CE  6E39               	movwf	___wmul@multiplicand,c
  6804  0011D0  EC7C  F019         	call	___wmul	;wreg free
  6805  0011D4  0ECA               	movlw	low __npowers_
  6806  0011D6  2437               	addwf	?___wmul,w,c
  6807  0011D8  6EF6               	movwf	tblptrl,c
  6808  0011DA  0EFE               	movlw	high __npowers_
  6809  0011DC  2038               	addwfc	?___wmul+1,w,c
  6810  0011DE  6EF7               	movwf	tblptrh,c
  6811  0011E0                     	if	0	;There are less than 3 active tblptr bytes
  6812  0011E0                     	endif
  6813  0011E0  0009               	tblrd		*+
  6814  0011E2  CFF5 F080          	movff	tablat,___ftmul@f1
  6815  0011E6  0009               	tblrd		*+
  6816  0011E8  CFF5 F081          	movff	tablat,___ftmul@f1+1
  6817  0011EC  000A               	tblrd		*-
  6818  0011EE  CFF5 F082          	movff	tablat,___ftmul@f1+2
  6819  0011F2  ECC8  F012         	call	___ftmul	;wreg free
  6820  0011F6  C080  F08F         	movff	?___ftmul,_scale$1906
  6821  0011FA  C081  F090         	movff	?___ftmul+1,_scale$1906+1
  6822  0011FE  C082  F091         	movff	?___ftmul+2,_scale$1906+2
  6823                           
  6824                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6825  001202  C08F  F080         	movff	_scale$1906,___ftmul@f1
  6826  001206  C090  F081         	movff	_scale$1906+1,___ftmul@f1+1
  6827  00120A  C091  F082         	movff	_scale$1906+2,___ftmul@f1+2
  6828  00120E  0E00               	movlw	0
  6829  001210  6E3A               	movwf	___wmul@multiplicand+1,c
  6830  001212  0E03               	movlw	3
  6831  001214  6E39               	movwf	___wmul@multiplicand,c
  6832  001216  0E00               	movlw	0
  6833  001218  6E2C               	movwf	___awmod@divisor+1,c
  6834  00121A  0E0A               	movlw	10
  6835  00121C  6E2B               	movwf	___awmod@divisor,c
  6836  00121E  0100               	movlb	0	; () banked
  6837  001220  5192               	movf	scale@scl& (0+255),w,b
  6838  001222  6E29               	movwf	___awmod@dividend,c
  6839  001224  6A2A               	clrf	___awmod@dividend+1,c
  6840  001226  BE29               	btfsc	___awmod@dividend,7,c
  6841  001228  062A               	decf	___awmod@dividend+1,f,c
  6842  00122A  EC8A  F016         	call	___awmod	;wreg free
  6843  00122E  C029  F037         	movff	?___awmod,___wmul@multiplier
  6844  001232  C02A  F038         	movff	?___awmod+1,___wmul@multiplier+1
  6845  001236  EC7C  F019         	call	___wmul	;wreg free
  6846  00123A  0ECA               	movlw	low __npowers_
  6847  00123C  2437               	addwf	?___wmul,w,c
  6848  00123E  6EF6               	movwf	tblptrl,c
  6849  001240  0EFE               	movlw	high __npowers_
  6850  001242  2038               	addwfc	?___wmul+1,w,c
  6851  001244  6EF7               	movwf	tblptrh,c
  6852  001246                     	if	0	;There are less than 3 active tblptr bytes
  6853  001246                     	endif
  6854  001246  0009               	tblrd		*+
  6855  001248  CFF5 F083          	movff	tablat,___ftmul@f2
  6856  00124C  0009               	tblrd		*+
  6857  00124E  CFF5 F084          	movff	tablat,___ftmul@f2+1
  6858  001252  000A               	tblrd		*-
  6859  001254  CFF5 F085          	movff	tablat,___ftmul@f2+2
  6860  001258  ECC8  F012         	call	___ftmul	;wreg free
  6861  00125C  C080  F08C         	movff	?___ftmul,?_scale
  6862  001260  C081  F08D         	movff	?___ftmul+1,?_scale+1
  6863  001264  C082  F08E         	movff	?___ftmul+2,?_scale+2
  6864  001268  0012               	return	
  6865  00126A                     l451:
  6866                           
  6867                           ;doprnt.c: 432: else if(scl > 10)
  6868  00126A  0100               	movlb	0	; () banked
  6869  00126C  5192               	movf	scale@scl& (0+255),w,b
  6870  00126E  0A80               	xorlw	128
  6871  001270  0F75               	addlw	-139
  6872  001272  A0D8               	btfss	status,0,c
  6873  001274  D054               	goto	l454
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6877  001276  0E00               	movlw	0
  6878  001278  6E32               	movwf	___awdiv@divisor+1,c
  6879  00127A  0E0A               	movlw	10
  6880  00127C  6E31               	movwf	___awdiv@divisor,c
  6881  00127E  5192               	movf	scale@scl& (0+255),w,b
  6882  001280  6E2F               	movwf	___awdiv@dividend,c
  6883  001282  6A30               	clrf	___awdiv@dividend+1,c
  6884  001284  BE2F               	btfsc	___awdiv@dividend,7,c
  6885  001286  0630               	decf	___awdiv@dividend+1,f,c
  6886  001288  EC07  F016         	call	___awdiv	;wreg free
  6887  00128C  0E09               	movlw	9
  6888  00128E  242F               	addwf	?___awdiv,w,c
  6889  001290  6E37               	movwf	___wmul@multiplier,c
  6890  001292  0E00               	movlw	0
  6891  001294  2030               	addwfc	?___awdiv+1,w,c
  6892  001296  6E38               	movwf	___wmul@multiplier+1,c
  6893  001298  0E00               	movlw	0
  6894  00129A  6E3A               	movwf	___wmul@multiplicand+1,c
  6895  00129C  0E03               	movlw	3
  6896  00129E  6E39               	movwf	___wmul@multiplicand,c
  6897  0012A0  EC7C  F019         	call	___wmul	;wreg free
  6898  0012A4  0ECA               	movlw	low __npowers_
  6899  0012A6  2437               	addwf	?___wmul,w,c
  6900  0012A8  6EF6               	movwf	tblptrl,c
  6901  0012AA  0EFE               	movlw	high __npowers_
  6902  0012AC  2038               	addwfc	?___wmul+1,w,c
  6903  0012AE  6EF7               	movwf	tblptrh,c
  6904  0012B0                     	if	0	;There are less than 3 active tblptr bytes
  6905  0012B0                     	endif
  6906  0012B0  0009               	tblrd		*+
  6907  0012B2  CFF5 F080          	movff	tablat,___ftmul@f1
  6908  0012B6  0009               	tblrd		*+
  6909  0012B8  CFF5 F081          	movff	tablat,___ftmul@f1+1
  6910  0012BC  000A               	tblrd		*-
  6911  0012BE  CFF5 F082          	movff	tablat,___ftmul@f1+2
  6912  0012C2  0E00               	movlw	0
  6913  0012C4  6E3A               	movwf	___wmul@multiplicand+1,c
  6914  0012C6  0E03               	movlw	3
  6915  0012C8  6E39               	movwf	___wmul@multiplicand,c
  6916  0012CA  0E00               	movlw	0
  6917  0012CC  6E2C               	movwf	___awmod@divisor+1,c
  6918  0012CE  0E0A               	movlw	10
  6919  0012D0  6E2B               	movwf	___awmod@divisor,c
  6920  0012D2  0100               	movlb	0	; () banked
  6921  0012D4  5192               	movf	scale@scl& (0+255),w,b
  6922  0012D6  6E29               	movwf	___awmod@dividend,c
  6923  0012D8  6A2A               	clrf	___awmod@dividend+1,c
  6924  0012DA  BE29               	btfsc	___awmod@dividend,7,c
  6925  0012DC  062A               	decf	___awmod@dividend+1,f,c
  6926  0012DE  EC8A  F016         	call	___awmod	;wreg free
  6927  0012E2  C029  F037         	movff	?___awmod,___wmul@multiplier
  6928  0012E6  C02A  F038         	movff	?___awmod+1,___wmul@multiplier+1
  6929  0012EA  EC7C  F019         	call	___wmul	;wreg free
  6930  0012EE  0ECA               	movlw	low __npowers_
  6931  0012F0  2437               	addwf	?___wmul,w,c
  6932  0012F2  6EF6               	movwf	tblptrl,c
  6933  0012F4  0EFE               	movlw	high __npowers_
  6934  0012F6  2038               	addwfc	?___wmul+1,w,c
  6935  0012F8  6EF7               	movwf	tblptrh,c
  6936  0012FA                     	if	0	;There are less than 3 active tblptr bytes
  6937  0012FA                     	endif
  6938  0012FA  0009               	tblrd		*+
  6939  0012FC  CFF5 F083          	movff	tablat,___ftmul@f2
  6940  001300  0009               	tblrd		*+
  6941  001302  CFF5 F084          	movff	tablat,___ftmul@f2+1
  6942  001306  000A               	tblrd		*-
  6943  001308  CFF5 F085          	movff	tablat,___ftmul@f2+2
  6944  00130C  ECC8  F012         	call	___ftmul	;wreg free
  6945  001310  C080  F08C         	movff	?___ftmul,?_scale
  6946  001314  C081  F08D         	movff	?___ftmul+1,?_scale+1
  6947  001318  C082  F08E         	movff	?___ftmul+2,?_scale+2
  6948  00131C  0012               	return	
  6949  00131E                     l454:
  6950                           
  6951                           ;doprnt.c: 434: return _npowers_[scl];
  6952  00131E  0100               	movlb	0	; () banked
  6953  001320  5192               	movf	scale@scl& (0+255),w,b
  6954  001322  0D03               	mullw	3
  6955  001324  0ECA               	movlw	low __npowers_
  6956  001326  24F3               	addwf	prodl,w,c
  6957  001328  6EF6               	movwf	tblptrl,c
  6958  00132A  0EFE               	movlw	high __npowers_
  6959  00132C  20F4               	addwfc	prodh,w,c
  6960  00132E  6EF7               	movwf	tblptrh,c
  6961  001330                     	if	0	;There are less than 3 active tblptr bytes
  6962  001330                     	endif
  6963  001330  0009               	tblrd		*+
  6964  001332  CFF5 F08C          	movff	tablat,?_scale
  6965  001336  0009               	tblrd		*+
  6966  001338  CFF5 F08D          	movff	tablat,?_scale+1
  6967  00133C  000A               	tblrd		*-
  6968  00133E  CFF5 F08E          	movff	tablat,?_scale+2
  6969                           
  6970                           ; BSR set to: 0
  6971  001342  0012               	return	
  6972  001344                     l450:
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;doprnt.c: 435: }
  6976                           ;doprnt.c: 436: if(scl>=110)
  6977                           
  6978                           ; BSR set to: 0
  6979  001344  5192               	movf	scale@scl& (0+255),w,b
  6980  001346  0A80               	xorlw	128
  6981  001348  0F12               	addlw	-238
  6982  00134A  A0D8               	btfss	status,0,c
  6983  00134C  D093               	goto	l455
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6987  00134E  0E00               	movlw	0
  6988  001350  6E3A               	movwf	___wmul@multiplicand+1,c
  6989  001352  0E03               	movlw	3
  6990  001354  6E39               	movwf	___wmul@multiplicand,c
  6991  001356  0E00               	movlw	0
  6992  001358  6E32               	movwf	___awdiv@divisor+1,c
  6993  00135A  0E0A               	movlw	10
  6994  00135C  6E31               	movwf	___awdiv@divisor,c
  6995  00135E  0E00               	movlw	0
  6996  001360  6E2C               	movwf	___awmod@divisor+1,c
  6997  001362  0E64               	movlw	100
  6998  001364  6E2B               	movwf	___awmod@divisor,c
  6999  001366  5192               	movf	scale@scl& (0+255),w,b
  7000  001368  6E29               	movwf	___awmod@dividend,c
  7001  00136A  6A2A               	clrf	___awmod@dividend+1,c
  7002  00136C  BE29               	btfsc	___awmod@dividend,7,c
  7003  00136E  062A               	decf	___awmod@dividend+1,f,c
  7004  001370  EC8A  F016         	call	___awmod	;wreg free
  7005  001374  C029  F02F         	movff	?___awmod,___awdiv@dividend
  7006  001378  C02A  F030         	movff	?___awmod+1,___awdiv@dividend+1
  7007  00137C  EC07  F016         	call	___awdiv	;wreg free
  7008  001380  0E09               	movlw	9
  7009  001382  242F               	addwf	?___awdiv,w,c
  7010  001384  6E37               	movwf	___wmul@multiplier,c
  7011  001386  0E00               	movlw	0
  7012  001388  2030               	addwfc	?___awdiv+1,w,c
  7013  00138A  6E38               	movwf	___wmul@multiplier+1,c
  7014  00138C  EC7C  F019         	call	___wmul	;wreg free
  7015  001390  0EA3               	movlw	low __powers_
  7016  001392  2437               	addwf	?___wmul,w,c
  7017  001394  6EF6               	movwf	tblptrl,c
  7018  001396  0EFE               	movlw	high __powers_
  7019  001398  2038               	addwfc	?___wmul+1,w,c
  7020  00139A  6EF7               	movwf	tblptrh,c
  7021  00139C                     	if	0	;There are less than 3 active tblptr bytes
  7022  00139C                     	endif
  7023  00139C  0009               	tblrd		*+
  7024  00139E  CFF5 F083          	movff	tablat,___ftmul@f2
  7025  0013A2  0009               	tblrd		*+
  7026  0013A4  CFF5 F084          	movff	tablat,___ftmul@f2+1
  7027  0013A8  000A               	tblrd		*-
  7028  0013AA  CFF5 F085          	movff	tablat,___ftmul@f2+2
  7029  0013AE  0E00               	movlw	0
  7030  0013B0  6E32               	movwf	___awdiv@divisor+1,c
  7031  0013B2  0E64               	movlw	100
  7032  0013B4  6E31               	movwf	___awdiv@divisor,c
  7033  0013B6  0100               	movlb	0	; () banked
  7034  0013B8  5192               	movf	scale@scl& (0+255),w,b
  7035  0013BA  6E2F               	movwf	___awdiv@dividend,c
  7036  0013BC  6A30               	clrf	___awdiv@dividend+1,c
  7037  0013BE  BE2F               	btfsc	___awdiv@dividend,7,c
  7038  0013C0  0630               	decf	___awdiv@dividend+1,f,c
  7039  0013C2  EC07  F016         	call	___awdiv	;wreg free
  7040  0013C6  0E12               	movlw	18
  7041  0013C8  242F               	addwf	?___awdiv,w,c
  7042  0013CA  6E37               	movwf	___wmul@multiplier,c
  7043  0013CC  0E00               	movlw	0
  7044  0013CE  2030               	addwfc	?___awdiv+1,w,c
  7045  0013D0  6E38               	movwf	___wmul@multiplier+1,c
  7046  0013D2  0E00               	movlw	0
  7047  0013D4  6E3A               	movwf	___wmul@multiplicand+1,c
  7048  0013D6  0E03               	movlw	3
  7049  0013D8  6E39               	movwf	___wmul@multiplicand,c
  7050  0013DA  EC7C  F019         	call	___wmul	;wreg free
  7051  0013DE  0EA3               	movlw	low __powers_
  7052  0013E0  2437               	addwf	?___wmul,w,c
  7053  0013E2  6EF6               	movwf	tblptrl,c
  7054  0013E4  0EFE               	movlw	high __powers_
  7055  0013E6  2038               	addwfc	?___wmul+1,w,c
  7056  0013E8  6EF7               	movwf	tblptrh,c
  7057  0013EA                     	if	0	;There are less than 3 active tblptr bytes
  7058  0013EA                     	endif
  7059  0013EA  0009               	tblrd		*+
  7060  0013EC  CFF5 F080          	movff	tablat,___ftmul@f1
  7061  0013F0  0009               	tblrd		*+
  7062  0013F2  CFF5 F081          	movff	tablat,___ftmul@f1+1
  7063  0013F6  000A               	tblrd		*-
  7064  0013F8  CFF5 F082          	movff	tablat,___ftmul@f1+2
  7065  0013FC  ECC8  F012         	call	___ftmul	;wreg free
  7066  001400  C080  F08F         	movff	?___ftmul,_scale$1906
  7067  001404  C081  F090         	movff	?___ftmul+1,_scale$1906+1
  7068  001408  C082  F091         	movff	?___ftmul+2,_scale$1906+2
  7069                           
  7070                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7071  00140C  C08F  F080         	movff	_scale$1906,___ftmul@f1
  7072  001410  C090  F081         	movff	_scale$1906+1,___ftmul@f1+1
  7073  001414  C091  F082         	movff	_scale$1906+2,___ftmul@f1+2
  7074  001418  0E00               	movlw	0
  7075  00141A  6E3A               	movwf	___wmul@multiplicand+1,c
  7076  00141C  0E03               	movlw	3
  7077  00141E  6E39               	movwf	___wmul@multiplicand,c
  7078  001420  0E00               	movlw	0
  7079  001422  6E2C               	movwf	___awmod@divisor+1,c
  7080  001424  0E0A               	movlw	10
  7081  001426  6E2B               	movwf	___awmod@divisor,c
  7082  001428  0100               	movlb	0	; () banked
  7083  00142A  5192               	movf	scale@scl& (0+255),w,b
  7084  00142C  6E29               	movwf	___awmod@dividend,c
  7085  00142E  6A2A               	clrf	___awmod@dividend+1,c
  7086  001430  BE29               	btfsc	___awmod@dividend,7,c
  7087  001432  062A               	decf	___awmod@dividend+1,f,c
  7088  001434  EC8A  F016         	call	___awmod	;wreg free
  7089  001438  C029  F037         	movff	?___awmod,___wmul@multiplier
  7090  00143C  C02A  F038         	movff	?___awmod+1,___wmul@multiplier+1
  7091  001440  EC7C  F019         	call	___wmul	;wreg free
  7092  001444  0EA3               	movlw	low __powers_
  7093  001446  2437               	addwf	?___wmul,w,c
  7094  001448  6EF6               	movwf	tblptrl,c
  7095  00144A  0EFE               	movlw	high __powers_
  7096  00144C  2038               	addwfc	?___wmul+1,w,c
  7097  00144E  6EF7               	movwf	tblptrh,c
  7098  001450                     	if	0	;There are less than 3 active tblptr bytes
  7099  001450                     	endif
  7100  001450  0009               	tblrd		*+
  7101  001452  CFF5 F083          	movff	tablat,___ftmul@f2
  7102  001456  0009               	tblrd		*+
  7103  001458  CFF5 F084          	movff	tablat,___ftmul@f2+1
  7104  00145C  000A               	tblrd		*-
  7105  00145E  CFF5 F085          	movff	tablat,___ftmul@f2+2
  7106  001462  ECC8  F012         	call	___ftmul	;wreg free
  7107  001466  C080  F08C         	movff	?___ftmul,?_scale
  7108  00146A  C081  F08D         	movff	?___ftmul+1,?_scale+1
  7109  00146E  C082  F08E         	movff	?___ftmul+2,?_scale+2
  7110  001472  0012               	return	
  7111  001474                     l455:
  7112                           
  7113                           ;doprnt.c: 438: else if(scl > 10)
  7114  001474  0100               	movlb	0	; () banked
  7115  001476  5192               	movf	scale@scl& (0+255),w,b
  7116  001478  0A80               	xorlw	128
  7117  00147A  0F75               	addlw	-139
  7118  00147C  A0D8               	btfss	status,0,c
  7119  00147E  D054               	goto	l457
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7123  001480  0E00               	movlw	0
  7124  001482  6E32               	movwf	___awdiv@divisor+1,c
  7125  001484  0E0A               	movlw	10
  7126  001486  6E31               	movwf	___awdiv@divisor,c
  7127  001488  5192               	movf	scale@scl& (0+255),w,b
  7128  00148A  6E2F               	movwf	___awdiv@dividend,c
  7129  00148C  6A30               	clrf	___awdiv@dividend+1,c
  7130  00148E  BE2F               	btfsc	___awdiv@dividend,7,c
  7131  001490  0630               	decf	___awdiv@dividend+1,f,c
  7132  001492  EC07  F016         	call	___awdiv	;wreg free
  7133  001496  0E09               	movlw	9
  7134  001498  242F               	addwf	?___awdiv,w,c
  7135  00149A  6E37               	movwf	___wmul@multiplier,c
  7136  00149C  0E00               	movlw	0
  7137  00149E  2030               	addwfc	?___awdiv+1,w,c
  7138  0014A0  6E38               	movwf	___wmul@multiplier+1,c
  7139  0014A2  0E00               	movlw	0
  7140  0014A4  6E3A               	movwf	___wmul@multiplicand+1,c
  7141  0014A6  0E03               	movlw	3
  7142  0014A8  6E39               	movwf	___wmul@multiplicand,c
  7143  0014AA  EC7C  F019         	call	___wmul	;wreg free
  7144  0014AE  0EA3               	movlw	low __powers_
  7145  0014B0  2437               	addwf	?___wmul,w,c
  7146  0014B2  6EF6               	movwf	tblptrl,c
  7147  0014B4  0EFE               	movlw	high __powers_
  7148  0014B6  2038               	addwfc	?___wmul+1,w,c
  7149  0014B8  6EF7               	movwf	tblptrh,c
  7150  0014BA                     	if	0	;There are less than 3 active tblptr bytes
  7151  0014BA                     	endif
  7152  0014BA  0009               	tblrd		*+
  7153  0014BC  CFF5 F080          	movff	tablat,___ftmul@f1
  7154  0014C0  0009               	tblrd		*+
  7155  0014C2  CFF5 F081          	movff	tablat,___ftmul@f1+1
  7156  0014C6  000A               	tblrd		*-
  7157  0014C8  CFF5 F082          	movff	tablat,___ftmul@f1+2
  7158  0014CC  0E00               	movlw	0
  7159  0014CE  6E3A               	movwf	___wmul@multiplicand+1,c
  7160  0014D0  0E03               	movlw	3
  7161  0014D2  6E39               	movwf	___wmul@multiplicand,c
  7162  0014D4  0E00               	movlw	0
  7163  0014D6  6E2C               	movwf	___awmod@divisor+1,c
  7164  0014D8  0E0A               	movlw	10
  7165  0014DA  6E2B               	movwf	___awmod@divisor,c
  7166  0014DC  0100               	movlb	0	; () banked
  7167  0014DE  5192               	movf	scale@scl& (0+255),w,b
  7168  0014E0  6E29               	movwf	___awmod@dividend,c
  7169  0014E2  6A2A               	clrf	___awmod@dividend+1,c
  7170  0014E4  BE29               	btfsc	___awmod@dividend,7,c
  7171  0014E6  062A               	decf	___awmod@dividend+1,f,c
  7172  0014E8  EC8A  F016         	call	___awmod	;wreg free
  7173  0014EC  C029  F037         	movff	?___awmod,___wmul@multiplier
  7174  0014F0  C02A  F038         	movff	?___awmod+1,___wmul@multiplier+1
  7175  0014F4  EC7C  F019         	call	___wmul	;wreg free
  7176  0014F8  0EA3               	movlw	low __powers_
  7177  0014FA  2437               	addwf	?___wmul,w,c
  7178  0014FC  6EF6               	movwf	tblptrl,c
  7179  0014FE  0EFE               	movlw	high __powers_
  7180  001500  2038               	addwfc	?___wmul+1,w,c
  7181  001502  6EF7               	movwf	tblptrh,c
  7182  001504                     	if	0	;There are less than 3 active tblptr bytes
  7183  001504                     	endif
  7184  001504  0009               	tblrd		*+
  7185  001506  CFF5 F083          	movff	tablat,___ftmul@f2
  7186  00150A  0009               	tblrd		*+
  7187  00150C  CFF5 F084          	movff	tablat,___ftmul@f2+1
  7188  001510  000A               	tblrd		*-
  7189  001512  CFF5 F085          	movff	tablat,___ftmul@f2+2
  7190  001516  ECC8  F012         	call	___ftmul	;wreg free
  7191  00151A  C080  F08C         	movff	?___ftmul,?_scale
  7192  00151E  C081  F08D         	movff	?___ftmul+1,?_scale+1
  7193  001522  C082  F08E         	movff	?___ftmul+2,?_scale+2
  7194  001526  0012               	return	
  7195  001528                     l457:
  7196                           
  7197                           ;doprnt.c: 440: return _powers_[scl];
  7198  001528  0100               	movlb	0	; () banked
  7199  00152A  5192               	movf	scale@scl& (0+255),w,b
  7200  00152C  0D03               	mullw	3
  7201  00152E  0EA3               	movlw	low __powers_
  7202  001530  24F3               	addwf	prodl,w,c
  7203  001532  6EF6               	movwf	tblptrl,c
  7204  001534  0EFE               	movlw	high __powers_
  7205  001536  20F4               	addwfc	prodh,w,c
  7206  001538  6EF7               	movwf	tblptrh,c
  7207  00153A                     	if	0	;There are less than 3 active tblptr bytes
  7208  00153A                     	endif
  7209  00153A  0009               	tblrd		*+
  7210  00153C  CFF5 F08C          	movff	tablat,?_scale
  7211  001540  0009               	tblrd		*+
  7212  001542  CFF5 F08D          	movff	tablat,?_scale+1
  7213  001546  000A               	tblrd		*-
  7214  001548  CFF5 F08E          	movff	tablat,?_scale+2
  7215  00154C  0012               	return	
  7216  00154E                     __end_of_scale:
  7217                           	opt stack 0
  7218                           tblptru	equ	0xFF8
  7219                           tblptrh	equ	0xFF7
  7220                           tblptrl	equ	0xFF6
  7221                           tablat	equ	0xFF5
  7222                           prodh	equ	0xFF4
  7223                           prodl	equ	0xFF3
  7224                           intcon	equ	0xFF2
  7225                           intcon2	equ	0xFF1
  7226                           intcon3	equ	0xFF0
  7227                           postinc0	equ	0xFEE
  7228                           wreg	equ	0xFE8
  7229                           indf1	equ	0xFE7
  7230                           postdec1	equ	0xFE5
  7231                           fsr1h	equ	0xFE2
  7232                           fsr1l	equ	0xFE1
  7233                           indf2	equ	0xFDF
  7234                           postinc2	equ	0xFDE
  7235                           postdec2	equ	0xFDD
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function _isdigit *****************
  7241 ;; Defined at:
  7242 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  c               1    wreg     unsigned char 
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  c               1   42[COMRAM] unsigned char 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;		None               void
  7249 ;; Registers used:
  7250 ;;		wreg, status,2, status,0
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;Total ram usage:        3 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    4
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_sprintf
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           	psect	text22
  7271  003438                     __ptext22:
  7272                           	opt stack 0
  7273  003438                     _isdigit:
  7274                           	opt stack 24
  7275                           
  7276                           ;incstack = 0
  7277                           ;isdigit@c stored from wreg
  7278  003438  6E2B               	movwf	isdigit@c,c
  7279  00343A  0E00               	movlw	0
  7280  00343C  6E2A               	movwf	_isdigit$1517,c
  7281  00343E  0E3A               	movlw	58
  7282  003440  602B               	cpfslt	isdigit@c,c
  7283  003442  D005               	goto	l918
  7284  003444  0E2F               	movlw	47
  7285  003446  642B               	cpfsgt	isdigit@c,c
  7286  003448  D002               	goto	l918
  7287  00344A  0E01               	movlw	1
  7288  00344C  6E2A               	movwf	_isdigit$1517,c
  7289  00344E                     l918:
  7290  00344E  C02A  F029         	movff	_isdigit$1517,??_isdigit
  7291  003452  3029               	rrcf	??_isdigit,w,c
  7292  003454  0012               	return	
  7293  003456                     __end_of_isdigit:
  7294                           	opt stack 0
  7295                           tblptru	equ	0xFF8
  7296                           tblptrh	equ	0xFF7
  7297                           tblptrl	equ	0xFF6
  7298                           tablat	equ	0xFF5
  7299                           prodh	equ	0xFF4
  7300                           prodl	equ	0xFF3
  7301                           intcon	equ	0xFF2
  7302                           intcon2	equ	0xFF1
  7303                           intcon3	equ	0xFF0
  7304                           postinc0	equ	0xFEE
  7305                           wreg	equ	0xFE8
  7306                           indf1	equ	0xFE7
  7307                           postdec1	equ	0xFE5
  7308                           fsr1h	equ	0xFE2
  7309                           fsr1l	equ	0xFE1
  7310                           indf2	equ	0xFDF
  7311                           postinc2	equ	0xFDE
  7312                           postdec2	equ	0xFDD
  7313                           fsr2h	equ	0xFDA
  7314                           fsr2l	equ	0xFD9
  7315                           status	equ	0xFD8
  7316                           
  7317 ;; *************** function _fround *****************
  7318 ;; Defined at:
  7319 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;  prec            1    wreg     unsigned char 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  prec            1   21[BANK0 ] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  3   12[BANK0 ] unsigned char 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7333 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7336 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;Total ram usage:       10 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    6
  7340 ;; This function calls:
  7341 ;;		___awdiv
  7342 ;;		___awmod
  7343 ;;		___ftmul
  7344 ;;		___wmul
  7345 ;; This function is called by:
  7346 ;;		_sprintf
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           	psect	text23
  7351  00154E                     __ptext23:
  7352                           	opt stack 0
  7353  00154E                     _fround:
  7354                           	opt stack 22
  7355                           
  7356                           ;incstack = 0
  7357                           ;fround@prec stored from wreg
  7358  00154E  0100               	movlb	0	; () banked
  7359  001550  6F95               	movwf	fround@prec& (0+255),b
  7360                           
  7361                           ;doprnt.c: 413: if(prec>=110)
  7362  001552  0E6D               	movlw	109
  7363  001554  0100               	movlb	0	; () banked
  7364  001556  6595               	cpfsgt	fround@prec& (0+255),b
  7365  001558  D0A0               	goto	l444
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7369  00155A  0E00               	movlw	0
  7370  00155C  6E3A               	movwf	___wmul@multiplicand+1,c
  7371  00155E  0E03               	movlw	3
  7372  001560  6E39               	movwf	___wmul@multiplicand,c
  7373  001562  0E00               	movlw	0
  7374  001564  6E32               	movwf	___awdiv@divisor+1,c
  7375  001566  0E0A               	movlw	10
  7376  001568  6E31               	movwf	___awdiv@divisor,c
  7377  00156A  0E00               	movlw	0
  7378  00156C  6E2C               	movwf	___awmod@divisor+1,c
  7379  00156E  0E64               	movlw	100
  7380  001570  6E2B               	movwf	___awmod@divisor,c
  7381  001572  C095  F029         	movff	fround@prec,___awmod@dividend
  7382  001576  6A2A               	clrf	___awmod@dividend+1,c
  7383  001578  EC8A  F016         	call	___awmod	;wreg free
  7384  00157C  C029  F02F         	movff	?___awmod,___awdiv@dividend
  7385  001580  C02A  F030         	movff	?___awmod+1,___awdiv@dividend+1
  7386  001584  EC07  F016         	call	___awdiv	;wreg free
  7387  001588  0E09               	movlw	9
  7388  00158A  242F               	addwf	?___awdiv,w,c
  7389  00158C  6E37               	movwf	___wmul@multiplier,c
  7390  00158E  0E00               	movlw	0
  7391  001590  2030               	addwfc	?___awdiv+1,w,c
  7392  001592  6E38               	movwf	___wmul@multiplier+1,c
  7393  001594  EC7C  F019         	call	___wmul	;wreg free
  7394  001598  0ECA               	movlw	low __npowers_
  7395  00159A  2437               	addwf	?___wmul,w,c
  7396  00159C  6EF6               	movwf	tblptrl,c
  7397  00159E  0EFE               	movlw	high __npowers_
  7398  0015A0  2038               	addwfc	?___wmul+1,w,c
  7399  0015A2  6EF7               	movwf	tblptrh,c
  7400  0015A4                     	if	0	;There are less than 3 active tblptr bytes
  7401  0015A4                     	endif
  7402  0015A4  0009               	tblrd		*+
  7403  0015A6  CFF5 F083          	movff	tablat,___ftmul@f2
  7404  0015AA  0009               	tblrd		*+
  7405  0015AC  CFF5 F084          	movff	tablat,___ftmul@f2+1
  7406  0015B0  000A               	tblrd		*-
  7407  0015B2  CFF5 F085          	movff	tablat,___ftmul@f2+2
  7408  0015B6  0E00               	movlw	0
  7409  0015B8  6E32               	movwf	___awdiv@divisor+1,c
  7410  0015BA  0E64               	movlw	100
  7411  0015BC  6E31               	movwf	___awdiv@divisor,c
  7412  0015BE  C095  F02F         	movff	fround@prec,___awdiv@dividend
  7413  0015C2  6A30               	clrf	___awdiv@dividend+1,c
  7414  0015C4  EC07  F016         	call	___awdiv	;wreg free
  7415  0015C8  0E12               	movlw	18
  7416  0015CA  242F               	addwf	?___awdiv,w,c
  7417  0015CC  6E37               	movwf	___wmul@multiplier,c
  7418  0015CE  0E00               	movlw	0
  7419  0015D0  2030               	addwfc	?___awdiv+1,w,c
  7420  0015D2  6E38               	movwf	___wmul@multiplier+1,c
  7421  0015D4  0E00               	movlw	0
  7422  0015D6  6E3A               	movwf	___wmul@multiplicand+1,c
  7423  0015D8  0E03               	movlw	3
  7424  0015DA  6E39               	movwf	___wmul@multiplicand,c
  7425  0015DC  EC7C  F019         	call	___wmul	;wreg free
  7426  0015E0  0ECA               	movlw	low __npowers_
  7427  0015E2  2437               	addwf	?___wmul,w,c
  7428  0015E4  6EF6               	movwf	tblptrl,c
  7429  0015E6  0EFE               	movlw	high __npowers_
  7430  0015E8  2038               	addwfc	?___wmul+1,w,c
  7431  0015EA  6EF7               	movwf	tblptrh,c
  7432  0015EC                     	if	0	;There are less than 3 active tblptr bytes
  7433  0015EC                     	endif
  7434  0015EC  0009               	tblrd		*+
  7435  0015EE  CFF5 F080          	movff	tablat,___ftmul@f1
  7436  0015F2  0009               	tblrd		*+
  7437  0015F4  CFF5 F081          	movff	tablat,___ftmul@f1+1
  7438  0015F8  000A               	tblrd		*-
  7439  0015FA  CFF5 F082          	movff	tablat,___ftmul@f1+2
  7440  0015FE  ECC8  F012         	call	___ftmul	;wreg free
  7441  001602  C080  F092         	movff	?___ftmul,_fround$1904
  7442  001606  C081  F093         	movff	?___ftmul+1,_fround$1904+1
  7443  00160A  C082  F094         	movff	?___ftmul+2,_fround$1904+2
  7444                           
  7445                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7446  00160E  0E00               	movlw	0
  7447  001610  6E3A               	movwf	___wmul@multiplicand+1,c
  7448  001612  0E03               	movlw	3
  7449  001614  6E39               	movwf	___wmul@multiplicand,c
  7450  001616  0E00               	movlw	0
  7451  001618  6E2C               	movwf	___awmod@divisor+1,c
  7452  00161A  0E0A               	movlw	10
  7453  00161C  6E2B               	movwf	___awmod@divisor,c
  7454  00161E  C095  F029         	movff	fround@prec,___awmod@dividend
  7455  001622  6A2A               	clrf	___awmod@dividend+1,c
  7456  001624  EC8A  F016         	call	___awmod	;wreg free
  7457  001628  C029  F037         	movff	?___awmod,___wmul@multiplier
  7458  00162C  C02A  F038         	movff	?___awmod+1,___wmul@multiplier+1
  7459  001630  EC7C  F019         	call	___wmul	;wreg free
  7460  001634  0ECA               	movlw	low __npowers_
  7461  001636  2437               	addwf	?___wmul,w,c
  7462  001638  6EF6               	movwf	tblptrl,c
  7463  00163A  0EFE               	movlw	high __npowers_
  7464  00163C  2038               	addwfc	?___wmul+1,w,c
  7465  00163E  6EF7               	movwf	tblptrh,c
  7466  001640                     	if	0	;There are less than 3 active tblptr bytes
  7467  001640                     	endif
  7468  001640  0009               	tblrd		*+
  7469  001642  CFF5 F083          	movff	tablat,___ftmul@f2
  7470  001646  0009               	tblrd		*+
  7471  001648  CFF5 F084          	movff	tablat,___ftmul@f2+1
  7472  00164C  000A               	tblrd		*-
  7473  00164E  CFF5 F085          	movff	tablat,___ftmul@f2+2
  7474  001652  C092  F080         	movff	_fround$1904,___ftmul@f1
  7475  001656  C093  F081         	movff	_fround$1904+1,___ftmul@f1+1
  7476  00165A  C094  F082         	movff	_fround$1904+2,___ftmul@f1+2
  7477  00165E  ECC8  F012         	call	___ftmul	;wreg free
  7478  001662  C080  F08F         	movff	?___ftmul,_fround$1905
  7479  001666  C081  F090         	movff	?___ftmul+1,_fround$1905+1
  7480  00166A  C082  F091         	movff	?___ftmul+2,_fround$1905+2
  7481                           
  7482                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7483  00166E  C08F  F080         	movff	_fround$1905,___ftmul@f1
  7484  001672  C090  F081         	movff	_fround$1905+1,___ftmul@f1+1
  7485  001676  C091  F082         	movff	_fround$1905+2,___ftmul@f1+2
  7486  00167A  0E00               	movlw	0
  7487  00167C  0100               	movlb	0	; () banked
  7488  00167E  6F83               	movwf	___ftmul@f2& (0+255),b
  7489  001680  0E00               	movlw	0
  7490  001682  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  7491  001684  0E3F               	movlw	63
  7492  001686  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  7493  001688  ECC8  F012         	call	___ftmul	;wreg free
  7494  00168C  C080  F08C         	movff	?___ftmul,?_fround
  7495  001690  C081  F08D         	movff	?___ftmul+1,?_fround+1
  7496  001694  C082  F08E         	movff	?___ftmul+2,?_fround+2
  7497  001698  0012               	return	
  7498  00169A                     l444:
  7499                           
  7500                           ;doprnt.c: 415: else if(prec > 10)
  7501  00169A  0E0A               	movlw	10
  7502  00169C  0100               	movlb	0	; () banked
  7503  00169E  6595               	cpfsgt	fround@prec& (0+255),b
  7504  0016A0  D064               	goto	l447
  7505                           
  7506                           ; BSR set to: 0
  7507                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7508  0016A2  0E00               	movlw	0
  7509  0016A4  6E3A               	movwf	___wmul@multiplicand+1,c
  7510  0016A6  0E03               	movlw	3
  7511  0016A8  6E39               	movwf	___wmul@multiplicand,c
  7512  0016AA  0E00               	movlw	0
  7513  0016AC  6E2C               	movwf	___awmod@divisor+1,c
  7514  0016AE  0E0A               	movlw	10
  7515  0016B0  6E2B               	movwf	___awmod@divisor,c
  7516  0016B2  C095  F029         	movff	fround@prec,___awmod@dividend
  7517  0016B6  6A2A               	clrf	___awmod@dividend+1,c
  7518  0016B8  EC8A  F016         	call	___awmod	;wreg free
  7519  0016BC  C029  F037         	movff	?___awmod,___wmul@multiplier
  7520  0016C0  C02A  F038         	movff	?___awmod+1,___wmul@multiplier+1
  7521  0016C4  EC7C  F019         	call	___wmul	;wreg free
  7522  0016C8  0ECA               	movlw	low __npowers_
  7523  0016CA  2437               	addwf	?___wmul,w,c
  7524  0016CC  6EF6               	movwf	tblptrl,c
  7525  0016CE  0EFE               	movlw	high __npowers_
  7526  0016D0  2038               	addwfc	?___wmul+1,w,c
  7527  0016D2  6EF7               	movwf	tblptrh,c
  7528  0016D4                     	if	0	;There are less than 3 active tblptr bytes
  7529  0016D4                     	endif
  7530  0016D4  0009               	tblrd		*+
  7531  0016D6  CFF5 F083          	movff	tablat,___ftmul@f2
  7532  0016DA  0009               	tblrd		*+
  7533  0016DC  CFF5 F084          	movff	tablat,___ftmul@f2+1
  7534  0016E0  000A               	tblrd		*-
  7535  0016E2  CFF5 F085          	movff	tablat,___ftmul@f2+2
  7536  0016E6  0E00               	movlw	0
  7537  0016E8  6E32               	movwf	___awdiv@divisor+1,c
  7538  0016EA  0E0A               	movlw	10
  7539  0016EC  6E31               	movwf	___awdiv@divisor,c
  7540  0016EE  C095  F02F         	movff	fround@prec,___awdiv@dividend
  7541  0016F2  6A30               	clrf	___awdiv@dividend+1,c
  7542  0016F4  EC07  F016         	call	___awdiv	;wreg free
  7543  0016F8  0E09               	movlw	9
  7544  0016FA  242F               	addwf	?___awdiv,w,c
  7545  0016FC  6E37               	movwf	___wmul@multiplier,c
  7546  0016FE  0E00               	movlw	0
  7547  001700  2030               	addwfc	?___awdiv+1,w,c
  7548  001702  6E38               	movwf	___wmul@multiplier+1,c
  7549  001704  0E00               	movlw	0
  7550  001706  6E3A               	movwf	___wmul@multiplicand+1,c
  7551  001708  0E03               	movlw	3
  7552  00170A  6E39               	movwf	___wmul@multiplicand,c
  7553  00170C  EC7C  F019         	call	___wmul	;wreg free
  7554  001710  0ECA               	movlw	low __npowers_
  7555  001712  2437               	addwf	?___wmul,w,c
  7556  001714  6EF6               	movwf	tblptrl,c
  7557  001716  0EFE               	movlw	high __npowers_
  7558  001718  2038               	addwfc	?___wmul+1,w,c
  7559  00171A  6EF7               	movwf	tblptrh,c
  7560  00171C                     	if	0	;There are less than 3 active tblptr bytes
  7561  00171C                     	endif
  7562  00171C  0009               	tblrd		*+
  7563  00171E  CFF5 F080          	movff	tablat,___ftmul@f1
  7564  001722  0009               	tblrd		*+
  7565  001724  CFF5 F081          	movff	tablat,___ftmul@f1+1
  7566  001728  000A               	tblrd		*-
  7567  00172A  CFF5 F082          	movff	tablat,___ftmul@f1+2
  7568  00172E  ECC8  F012         	call	___ftmul	;wreg free
  7569  001732  C080  F092         	movff	?___ftmul,_fround$1904
  7570  001736  C081  F093         	movff	?___ftmul+1,_fround$1904+1
  7571  00173A  C082  F094         	movff	?___ftmul+2,_fround$1904+2
  7572                           
  7573                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7574  00173E  C092  F080         	movff	_fround$1904,___ftmul@f1
  7575  001742  C093  F081         	movff	_fround$1904+1,___ftmul@f1+1
  7576  001746  C094  F082         	movff	_fround$1904+2,___ftmul@f1+2
  7577  00174A  0E00               	movlw	0
  7578  00174C  0100               	movlb	0	; () banked
  7579  00174E  6F83               	movwf	___ftmul@f2& (0+255),b
  7580  001750  0E00               	movlw	0
  7581  001752  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  7582  001754  0E3F               	movlw	63
  7583  001756  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  7584  001758  ECC8  F012         	call	___ftmul	;wreg free
  7585  00175C  C080  F08C         	movff	?___ftmul,?_fround
  7586  001760  C081  F08D         	movff	?___ftmul+1,?_fround+1
  7587  001764  C082  F08E         	movff	?___ftmul+2,?_fround+2
  7588  001768  0012               	return	
  7589  00176A                     l447:
  7590                           
  7591                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7592  00176A  0100               	movlb	0	; () banked
  7593  00176C  5195               	movf	fround@prec& (0+255),w,b
  7594  00176E  0D03               	mullw	3
  7595  001770  0ECA               	movlw	low __npowers_
  7596  001772  24F3               	addwf	prodl,w,c
  7597  001774  6EF6               	movwf	tblptrl,c
  7598  001776  0EFE               	movlw	high __npowers_
  7599  001778  20F4               	addwfc	prodh,w,c
  7600  00177A  6EF7               	movwf	tblptrh,c
  7601  00177C                     	if	0	;There are less than 3 active tblptr bytes
  7602  00177C                     	endif
  7603  00177C  0009               	tblrd		*+
  7604  00177E  CFF5 F080          	movff	tablat,___ftmul@f1
  7605  001782  0009               	tblrd		*+
  7606  001784  CFF5 F081          	movff	tablat,___ftmul@f1+1
  7607  001788  000A               	tblrd		*-
  7608  00178A  CFF5 F082          	movff	tablat,___ftmul@f1+2
  7609  00178E  0E00               	movlw	0
  7610  001790  6F83               	movwf	___ftmul@f2& (0+255),b
  7611  001792  0E00               	movlw	0
  7612  001794  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  7613  001796  0E3F               	movlw	63
  7614  001798  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  7615  00179A  ECC8  F012         	call	___ftmul	;wreg free
  7616  00179E  C080  F08C         	movff	?___ftmul,?_fround
  7617  0017A2  C081  F08D         	movff	?___ftmul+1,?_fround+1
  7618  0017A6  C082  F08E         	movff	?___ftmul+2,?_fround+2
  7619  0017AA  0012               	return	
  7620  0017AC                     __end_of_fround:
  7621                           	opt stack 0
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           intcon	equ	0xFF2
  7629                           intcon2	equ	0xFF1
  7630                           intcon3	equ	0xFF0
  7631                           postinc0	equ	0xFEE
  7632                           wreg	equ	0xFE8
  7633                           indf1	equ	0xFE7
  7634                           postdec1	equ	0xFE5
  7635                           fsr1h	equ	0xFE2
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644 ;; *************** function ___wmul *****************
  7645 ;; Defined at:
  7646 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;  multiplier      2   54[COMRAM] unsigned int 
  7649 ;;  multiplicand    2   56[COMRAM] unsigned int 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  product         2   58[COMRAM] unsigned int 
  7652 ;; Return value:  Size  Location     Type
  7653 ;;                  2   54[COMRAM] unsigned int 
  7654 ;; Registers used:
  7655 ;;		wreg, status,2, status,0, prodl, prodh
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7661 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;Total ram usage:        6 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    4
  7668 ;; This function calls:
  7669 ;;		Nothing
  7670 ;; This function is called by:
  7671 ;;		_read_adc_voltage
  7672 ;;		_fround
  7673 ;;		_scale
  7674 ;;		_sprintf
  7675 ;; This function uses a non-reentrant model
  7676 ;;
  7677                           
  7678                           	psect	text24
  7679  0032F8                     __ptext24:
  7680                           	opt stack 0
  7681  0032F8                     ___wmul:
  7682                           	opt stack 25
  7683                           
  7684                           ;incstack = 0
  7685  0032F8  5037               	movf	___wmul@multiplier,w,c
  7686  0032FA  0239               	mulwf	___wmul@multiplicand,c
  7687  0032FC  CFF3 F03B          	movff	prodl,___wmul@product
  7688  003300  CFF4 F03C          	movff	prodh,___wmul@product+1
  7689  003304  5037               	movf	___wmul@multiplier,w,c
  7690  003306  023A               	mulwf	___wmul@multiplicand+1,c
  7691  003308  50F3               	movf	prodl,w,c
  7692  00330A  263C               	addwf	___wmul@product+1,f,c
  7693  00330C  5038               	movf	___wmul@multiplier+1,w,c
  7694  00330E  0239               	mulwf	___wmul@multiplicand,c
  7695  003310  50F3               	movf	prodl,w,c
  7696  003312  263C               	addwf	___wmul@product+1,f,c
  7697  003314  C03B  F037         	movff	___wmul@product,?___wmul
  7698  003318  C03C  F038         	movff	___wmul@product+1,?___wmul+1
  7699  00331C  0012               	return	
  7700  00331E                     __end_of___wmul:
  7701                           	opt stack 0
  7702                           tblptru	equ	0xFF8
  7703                           tblptrh	equ	0xFF7
  7704                           tblptrl	equ	0xFF6
  7705                           tablat	equ	0xFF5
  7706                           prodh	equ	0xFF4
  7707                           prodl	equ	0xFF3
  7708                           intcon	equ	0xFF2
  7709                           intcon2	equ	0xFF1
  7710                           intcon3	equ	0xFF0
  7711                           postinc0	equ	0xFEE
  7712                           wreg	equ	0xFE8
  7713                           indf1	equ	0xFE7
  7714                           postdec1	equ	0xFE5
  7715                           fsr1h	equ	0xFE2
  7716                           fsr1l	equ	0xFE1
  7717                           indf2	equ	0xFDF
  7718                           postinc2	equ	0xFDE
  7719                           postdec2	equ	0xFDD
  7720                           fsr2h	equ	0xFDA
  7721                           fsr2l	equ	0xFD9
  7722                           status	equ	0xFD8
  7723                           
  7724 ;; *************** function ___ftmul *****************
  7725 ;; Defined at:
  7726 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;  f1              3    0[BANK0 ] float 
  7729 ;;  f2              3    3[BANK0 ] float 
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  7732 ;;  sign            1   11[BANK0 ] unsigned char 
  7733 ;;  cntr            1   10[BANK0 ] unsigned char 
  7734 ;;  exp             1    6[BANK0 ] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  3    0[BANK0 ] float 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7744 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;Total ram usage:       15 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    5
  7751 ;; This function calls:
  7752 ;;		___ftpack
  7753 ;; This function is called by:
  7754 ;;		_OffMode
  7755 ;;		_CoolMode
  7756 ;;		_heatMode
  7757 ;;		_autoCool
  7758 ;;		_printingOnScreen
  7759 ;;		_main
  7760 ;;		_SerialHandler
  7761 ;;		_set_pwm1_percent
  7762 ;;		_fround
  7763 ;;		_scale
  7764 ;;		_sprintf
  7765 ;;		_autoHeat
  7766 ;;		_set_pwm1_voltage
  7767 ;;		_set_pwm1_general
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           	psect	text25
  7772  002590                     __ptext25:
  7773                           	opt stack 0
  7774  002590                     ___ftmul:
  7775                           	opt stack 22
  7776                           
  7777                           ;incstack = 0
  7778  002590  C082  F03D         	movff	___ftmul@f1+2,??___ftmul
  7779  002594  6A3E               	clrf	(??___ftmul+1)& (0+255),c
  7780  002596  6A3F               	clrf	(??___ftmul+2)& (0+255),c
  7781  002598  0100               	movlb	0	; () banked
  7782  00259A  3581               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7783  00259C  363D               	rlcf	??___ftmul& (0+255),f,c
  7784  00259E  E301               	bnc	u5131
  7785  0025A0  803E               	bsf	(??___ftmul+1)& (0+255),0,c
  7786  0025A2                     u5131:
  7787  0025A2  503D               	movf	??___ftmul,w,c
  7788  0025A4  6F86               	movwf	___ftmul@exp& (0+255),b
  7789  0025A6  5186               	movf	___ftmul@exp& (0+255),w,b
  7790  0025A8  A4D8               	btfss	status,2,c
  7791  0025AA  D007               	goto	l882
  7792                           
  7793                           ; BSR set to: 0
  7794  0025AC  0E00               	movlw	0
  7795  0025AE  6F80               	movwf	?___ftmul& (0+255),b
  7796  0025B0  0E00               	movlw	0
  7797  0025B2  6F81               	movwf	(?___ftmul+1)& (0+255),b
  7798  0025B4  0E00               	movlw	0
  7799  0025B6  6F82               	movwf	(?___ftmul+2)& (0+255),b
  7800                           
  7801                           ; BSR set to: 0
  7802  0025B8  0012               	return	
  7803  0025BA                     l882:
  7804                           
  7805                           ; BSR set to: 0
  7806                           
  7807                           ; BSR set to: 0
  7808  0025BA  C085  F03D         	movff	___ftmul@f2+2,??___ftmul
  7809  0025BE  6A3E               	clrf	(??___ftmul+1)& (0+255),c
  7810  0025C0  6A3F               	clrf	(??___ftmul+2)& (0+255),c
  7811  0025C2  3584               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7812  0025C4  363D               	rlcf	??___ftmul& (0+255),f,c
  7813  0025C6  E301               	bnc	u5151
  7814  0025C8  803E               	bsf	(??___ftmul+1)& (0+255),0,c
  7815  0025CA                     u5151:
  7816  0025CA  503D               	movf	??___ftmul,w,c
  7817  0025CC  6F8B               	movwf	___ftmul@sign& (0+255),b
  7818  0025CE  518B               	movf	___ftmul@sign& (0+255),w,b
  7819  0025D0  A4D8               	btfss	status,2,c
  7820  0025D2  D007               	goto	l884
  7821                           
  7822                           ; BSR set to: 0
  7823  0025D4  0E00               	movlw	0
  7824  0025D6  6F80               	movwf	?___ftmul& (0+255),b
  7825  0025D8  0E00               	movlw	0
  7826  0025DA  6F81               	movwf	(?___ftmul+1)& (0+255),b
  7827  0025DC  0E00               	movlw	0
  7828  0025DE  6F82               	movwf	(?___ftmul+2)& (0+255),b
  7829                           
  7830                           ; BSR set to: 0
  7831  0025E0  0012               	return	
  7832  0025E2                     l884:
  7833                           
  7834                           ; BSR set to: 0
  7835                           
  7836                           ; BSR set to: 0
  7837  0025E2  518B               	movf	___ftmul@sign& (0+255),w,b
  7838  0025E4  0F7B               	addlw	123
  7839  0025E6  2786               	addwf	___ftmul@exp& (0+255),f,b
  7840                           
  7841                           ; BSR set to: 0
  7842  0025E8  C082  F08B         	movff	___ftmul@f1+2,___ftmul@sign
  7843  0025EC  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
  7844  0025EE  1B8B               	xorwf	___ftmul@sign& (0+255),f,b
  7845  0025F0  0E80               	movlw	128
  7846  0025F2  178B               	andwf	___ftmul@sign& (0+255),f,b
  7847                           
  7848                           ; BSR set to: 0
  7849  0025F4  8F81               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7850                           
  7851                           ; BSR set to: 0
  7852  0025F6  8F84               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7853                           
  7854                           ; BSR set to: 0
  7855  0025F8  0EFF               	movlw	255
  7856  0025FA  1783               	andwf	___ftmul@f2& (0+255),f,b
  7857  0025FC  0EFF               	movlw	255
  7858  0025FE  1784               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7859  002600  0E00               	movlw	0
  7860  002602  1785               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7861                           
  7862                           ; BSR set to: 0
  7863  002604  0E00               	movlw	0
  7864  002606  6F87               	movwf	___ftmul@f3_as_product& (0+255),b
  7865  002608  0E00               	movlw	0
  7866  00260A  6F88               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7867  00260C  0E00               	movlw	0
  7868  00260E  6F89               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7869                           
  7870                           ; BSR set to: 0
  7871  002610  0E07               	movlw	7
  7872  002612  6F8A               	movwf	___ftmul@cntr& (0+255),b
  7873  002614                     
  7874                           ; BSR set to: 0
  7875                           
  7876                           ; BSR set to: 0
  7877  002614  A180               	btfss	___ftmul@f1& (0+255),0,b
  7878  002616  D006               	goto	l886
  7879                           
  7880                           ; BSR set to: 0
  7881  002618  5183               	movf	___ftmul@f2& (0+255),w,b
  7882  00261A  2787               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7883  00261C  5184               	movf	(___ftmul@f2+1)& (0+255),w,b
  7884  00261E  2388               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7885  002620  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
  7886  002622  2389               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7887  002624                     l886:
  7888                           
  7889                           ; BSR set to: 0
  7890                           
  7891                           ; BSR set to: 0
  7892  002624  90D8               	bcf	status,0,c
  7893  002626  3382               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7894  002628  3381               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7895  00262A  3380               	rrcf	___ftmul@f1& (0+255),f,b
  7896  00262C  90D8               	bcf	status,0,c
  7897  00262E  3783               	rlcf	___ftmul@f2& (0+255),f,b
  7898  002630  3784               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7899  002632  3785               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7900                           
  7901                           ; BSR set to: 0
  7902  002634  2F8A               	decfsz	___ftmul@cntr& (0+255),f,b
  7903  002636  D7EE               	goto	l885
  7904                           
  7905                           ; BSR set to: 0
  7906                           
  7907                           ; BSR set to: 0
  7908  002638  0E09               	movlw	9
  7909  00263A  6F8A               	movwf	___ftmul@cntr& (0+255),b
  7910  00263C                     
  7911                           ; BSR set to: 0
  7912                           
  7913                           ; BSR set to: 0
  7914  00263C  A180               	btfss	___ftmul@f1& (0+255),0,b
  7915  00263E  D006               	goto	l889
  7916                           
  7917                           ; BSR set to: 0
  7918  002640  5183               	movf	___ftmul@f2& (0+255),w,b
  7919  002642  2787               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7920  002644  5184               	movf	(___ftmul@f2+1)& (0+255),w,b
  7921  002646  2388               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7922  002648  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
  7923  00264A  2389               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7924  00264C                     l889:
  7925                           
  7926                           ; BSR set to: 0
  7927                           
  7928                           ; BSR set to: 0
  7929  00264C  90D8               	bcf	status,0,c
  7930  00264E  3382               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7931  002650  3381               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7932  002652  3380               	rrcf	___ftmul@f1& (0+255),f,b
  7933  002654  90D8               	bcf	status,0,c
  7934  002656  3389               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7935  002658  3388               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7936  00265A  3387               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7937                           
  7938                           ; BSR set to: 0
  7939  00265C  2F8A               	decfsz	___ftmul@cntr& (0+255),f,b
  7940  00265E  D7EE               	goto	l888
  7941                           
  7942                           ; BSR set to: 0
  7943                           
  7944                           ; BSR set to: 0
  7945  002660  C087  F029         	movff	___ftmul@f3_as_product,___ftpack@arg
  7946  002664  C088  F02A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7947  002668  C089  F02B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7948  00266C  C086  F02C         	movff	___ftmul@exp,___ftpack@exp
  7949  002670  C08B  F02D         	movff	___ftmul@sign,___ftpack@sign
  7950  002674  EC70  F014         	call	___ftpack	;wreg free
  7951  002678  C029  F080         	movff	?___ftpack,?___ftmul
  7952  00267C  C02A  F081         	movff	?___ftpack+1,?___ftmul+1
  7953  002680  C02B  F082         	movff	?___ftpack+2,?___ftmul+2
  7954  002684  0012               	return	
  7955  002686                     __end_of___ftmul:
  7956                           	opt stack 0
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           intcon	equ	0xFF2
  7964                           intcon2	equ	0xFF1
  7965                           intcon3	equ	0xFF0
  7966                           postinc0	equ	0xFEE
  7967                           wreg	equ	0xFE8
  7968                           indf1	equ	0xFE7
  7969                           postdec1	equ	0xFE5
  7970                           fsr1h	equ	0xFE2
  7971                           fsr1l	equ	0xFE1
  7972                           indf2	equ	0xFDF
  7973                           postinc2	equ	0xFDE
  7974                           postdec2	equ	0xFDD
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function ___awmod *****************
  7980 ;; Defined at:
  7981 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  dividend        2   40[COMRAM] int 
  7984 ;;  divisor         2   42[COMRAM] int 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  sign            1   45[COMRAM] unsigned char 
  7987 ;;  counter         1   44[COMRAM] unsigned char 
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  2   40[COMRAM] int 
  7990 ;; Registers used:
  7991 ;;		wreg, status,2, status,0
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7997 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;Total ram usage:        6 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    4
  8004 ;; This function calls:
  8005 ;;		Nothing
  8006 ;; This function is called by:
  8007 ;;		_fround
  8008 ;;		_scale
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text26
  8013  002D14                     __ptext26:
  8014                           	opt stack 0
  8015  002D14                     ___awmod:
  8016                           	opt stack 23
  8017                           
  8018                           ;incstack = 0
  8019  002D14  0E00               	movlw	0
  8020  002D16  6E2E               	movwf	___awmod@sign,c
  8021  002D18  AE2A               	btfss	___awmod@dividend+1,7,c
  8022  002D1A  D006               	goto	l735
  8023  002D1C  6C29               	negf	___awmod@dividend,c
  8024  002D1E  1E2A               	comf	___awmod@dividend+1,f,c
  8025  002D20  B0D8               	btfsc	status,0,c
  8026  002D22  2A2A               	incf	___awmod@dividend+1,f,c
  8027  002D24  0E01               	movlw	1
  8028  002D26  6E2E               	movwf	___awmod@sign,c
  8029  002D28                     l735:
  8030  002D28  AE2C               	btfss	___awmod@divisor+1,7,c
  8031  002D2A  D004               	goto	l736
  8032  002D2C  6C2B               	negf	___awmod@divisor,c
  8033  002D2E  1E2C               	comf	___awmod@divisor+1,f,c
  8034  002D30  B0D8               	btfsc	status,0,c
  8035  002D32  2A2C               	incf	___awmod@divisor+1,f,c
  8036  002D34                     l736:
  8037  002D34  502B               	movf	___awmod@divisor,w,c
  8038  002D36  102C               	iorwf	___awmod@divisor+1,w,c
  8039  002D38  B4D8               	btfsc	status,2,c
  8040  002D3A  D018               	goto	l743
  8041  002D3C  0E01               	movlw	1
  8042  002D3E  6E2D               	movwf	___awmod@counter,c
  8043  002D40  D004               	goto	l738
  8044  002D42  90D8               	bcf	status,0,c
  8045  002D44  362B               	rlcf	___awmod@divisor,f,c
  8046  002D46  362C               	rlcf	___awmod@divisor+1,f,c
  8047  002D48  2A2D               	incf	___awmod@counter,f,c
  8048  002D4A                     l738:
  8049  002D4A  AE2C               	btfss	___awmod@divisor+1,7,c
  8050  002D4C  D7FA               	goto	l739
  8051  002D4E                     u5280:
  8052  002D4E  502B               	movf	___awmod@divisor,w,c
  8053  002D50  5C29               	subwf	___awmod@dividend,w,c
  8054  002D52  502C               	movf	___awmod@divisor+1,w,c
  8055  002D54  582A               	subwfb	___awmod@dividend+1,w,c
  8056  002D56  A0D8               	btfss	status,0,c
  8057  002D58  D004               	goto	l742
  8058  002D5A  502B               	movf	___awmod@divisor,w,c
  8059  002D5C  5E29               	subwf	___awmod@dividend,f,c
  8060  002D5E  502C               	movf	___awmod@divisor+1,w,c
  8061  002D60  5A2A               	subwfb	___awmod@dividend+1,f,c
  8062  002D62                     l742:
  8063  002D62  90D8               	bcf	status,0,c
  8064  002D64  322C               	rrcf	___awmod@divisor+1,f,c
  8065  002D66  322B               	rrcf	___awmod@divisor,f,c
  8066  002D68  2E2D               	decfsz	___awmod@counter,f,c
  8067  002D6A  D7F1               	goto	u5280
  8068  002D6C                     l743:
  8069  002D6C  502E               	movf	___awmod@sign,w,c
  8070  002D6E  B4D8               	btfsc	status,2,c
  8071  002D70  D004               	goto	l744
  8072  002D72  6C29               	negf	___awmod@dividend,c
  8073  002D74  1E2A               	comf	___awmod@dividend+1,f,c
  8074  002D76  B0D8               	btfsc	status,0,c
  8075  002D78  2A2A               	incf	___awmod@dividend+1,f,c
  8076  002D7A                     l744:
  8077  002D7A  C029  F029         	movff	___awmod@dividend,?___awmod
  8078  002D7E  C02A  F02A         	movff	___awmod@dividend+1,?___awmod+1
  8079  002D82  0012               	return	
  8080  002D84                     __end_of___awmod:
  8081                           	opt stack 0
  8082                           tblptru	equ	0xFF8
  8083                           tblptrh	equ	0xFF7
  8084                           tblptrl	equ	0xFF6
  8085                           tablat	equ	0xFF5
  8086                           prodh	equ	0xFF4
  8087                           prodl	equ	0xFF3
  8088                           intcon	equ	0xFF2
  8089                           intcon2	equ	0xFF1
  8090                           intcon3	equ	0xFF0
  8091                           postinc0	equ	0xFEE
  8092                           wreg	equ	0xFE8
  8093                           indf1	equ	0xFE7
  8094                           postdec1	equ	0xFE5
  8095                           fsr1h	equ	0xFE2
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           fsr2h	equ	0xFDA
  8101                           fsr2l	equ	0xFD9
  8102                           status	equ	0xFD8
  8103                           
  8104 ;; *************** function ___awdiv *****************
  8105 ;; Defined at:
  8106 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  dividend        2   46[COMRAM] int 
  8109 ;;  divisor         2   48[COMRAM] int 
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;  quotient        2   52[COMRAM] int 
  8112 ;;  sign            1   51[COMRAM] unsigned char 
  8113 ;;  counter         1   50[COMRAM] unsigned char 
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  2   46[COMRAM] int 
  8116 ;; Registers used:
  8117 ;;		wreg, status,2, status,0
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8123 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;Total ram usage:        8 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    4
  8130 ;; This function calls:
  8131 ;;		Nothing
  8132 ;; This function is called by:
  8133 ;;		_fround
  8134 ;;		_scale
  8135 ;;		_sprintf
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	text27
  8140  002C0E                     __ptext27:
  8141                           	opt stack 0
  8142  002C0E                     ___awdiv:
  8143                           	opt stack 23
  8144                           
  8145                           ;incstack = 0
  8146  002C0E  0E00               	movlw	0
  8147  002C10  6E34               	movwf	___awdiv@sign,c
  8148  002C12  AE32               	btfss	___awdiv@divisor+1,7,c
  8149  002C14  D006               	goto	l722
  8150  002C16  6C31               	negf	___awdiv@divisor,c
  8151  002C18  1E32               	comf	___awdiv@divisor+1,f,c
  8152  002C1A  B0D8               	btfsc	status,0,c
  8153  002C1C  2A32               	incf	___awdiv@divisor+1,f,c
  8154  002C1E  0E01               	movlw	1
  8155  002C20  6E34               	movwf	___awdiv@sign,c
  8156  002C22                     l722:
  8157  002C22  AE30               	btfss	___awdiv@dividend+1,7,c
  8158  002C24  D006               	goto	l723
  8159  002C26  6C2F               	negf	___awdiv@dividend,c
  8160  002C28  1E30               	comf	___awdiv@dividend+1,f,c
  8161  002C2A  B0D8               	btfsc	status,0,c
  8162  002C2C  2A30               	incf	___awdiv@dividend+1,f,c
  8163  002C2E  0E01               	movlw	1
  8164  002C30  1A34               	xorwf	___awdiv@sign,f,c
  8165  002C32                     l723:
  8166  002C32  0E00               	movlw	0
  8167  002C34  6E36               	movwf	___awdiv@quotient+1,c
  8168  002C36  0E00               	movlw	0
  8169  002C38  6E35               	movwf	___awdiv@quotient,c
  8170  002C3A  5031               	movf	___awdiv@divisor,w,c
  8171  002C3C  1032               	iorwf	___awdiv@divisor+1,w,c
  8172  002C3E  B4D8               	btfsc	status,2,c
  8173  002C40  D01C               	goto	l730
  8174  002C42  0E01               	movlw	1
  8175  002C44  6E33               	movwf	___awdiv@counter,c
  8176  002C46  D004               	goto	l725
  8177  002C48  90D8               	bcf	status,0,c
  8178  002C4A  3631               	rlcf	___awdiv@divisor,f,c
  8179  002C4C  3632               	rlcf	___awdiv@divisor+1,f,c
  8180  002C4E  2A33               	incf	___awdiv@counter,f,c
  8181  002C50                     l725:
  8182  002C50  AE32               	btfss	___awdiv@divisor+1,7,c
  8183  002C52  D7FA               	goto	l726
  8184  002C54                     u5220:
  8185  002C54  90D8               	bcf	status,0,c
  8186  002C56  3635               	rlcf	___awdiv@quotient,f,c
  8187  002C58  3636               	rlcf	___awdiv@quotient+1,f,c
  8188  002C5A  5031               	movf	___awdiv@divisor,w,c
  8189  002C5C  5C2F               	subwf	___awdiv@dividend,w,c
  8190  002C5E  5032               	movf	___awdiv@divisor+1,w,c
  8191  002C60  5830               	subwfb	___awdiv@dividend+1,w,c
  8192  002C62  A0D8               	btfss	status,0,c
  8193  002C64  D005               	goto	l729
  8194  002C66  5031               	movf	___awdiv@divisor,w,c
  8195  002C68  5E2F               	subwf	___awdiv@dividend,f,c
  8196  002C6A  5032               	movf	___awdiv@divisor+1,w,c
  8197  002C6C  5A30               	subwfb	___awdiv@dividend+1,f,c
  8198  002C6E  8035               	bsf	___awdiv@quotient,0,c
  8199  002C70                     l729:
  8200  002C70  90D8               	bcf	status,0,c
  8201  002C72  3232               	rrcf	___awdiv@divisor+1,f,c
  8202  002C74  3231               	rrcf	___awdiv@divisor,f,c
  8203  002C76  2E33               	decfsz	___awdiv@counter,f,c
  8204  002C78  D7ED               	goto	u5220
  8205  002C7A                     l730:
  8206  002C7A  5034               	movf	___awdiv@sign,w,c
  8207  002C7C  B4D8               	btfsc	status,2,c
  8208  002C7E  D004               	goto	l731
  8209  002C80  6C35               	negf	___awdiv@quotient,c
  8210  002C82  1E36               	comf	___awdiv@quotient+1,f,c
  8211  002C84  B0D8               	btfsc	status,0,c
  8212  002C86  2A36               	incf	___awdiv@quotient+1,f,c
  8213  002C88                     l731:
  8214  002C88  C035  F02F         	movff	___awdiv@quotient,?___awdiv
  8215  002C8C  C036  F030         	movff	___awdiv@quotient+1,?___awdiv+1
  8216  002C90  0012               	return	
  8217  002C92                     __end_of___awdiv:
  8218                           	opt stack 0
  8219                           tblptru	equ	0xFF8
  8220                           tblptrh	equ	0xFF7
  8221                           tblptrl	equ	0xFF6
  8222                           tablat	equ	0xFF5
  8223                           prodh	equ	0xFF4
  8224                           prodl	equ	0xFF3
  8225                           intcon	equ	0xFF2
  8226                           intcon2	equ	0xFF1
  8227                           intcon3	equ	0xFF0
  8228                           postinc0	equ	0xFEE
  8229                           wreg	equ	0xFE8
  8230                           indf1	equ	0xFE7
  8231                           postdec1	equ	0xFE5
  8232                           fsr1h	equ	0xFE2
  8233                           fsr1l	equ	0xFE1
  8234                           indf2	equ	0xFDF
  8235                           postinc2	equ	0xFDE
  8236                           postdec2	equ	0xFDD
  8237                           fsr2h	equ	0xFDA
  8238                           fsr2l	equ	0xFD9
  8239                           status	equ	0xFD8
  8240                           
  8241 ;; *************** function __tdiv_to_l_ *****************
  8242 ;; Defined at:
  8243 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;  f1              3   40[COMRAM] float 
  8246 ;;  f2              3   43[COMRAM] float 
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  quot            4   49[COMRAM] unsigned long 
  8249 ;;  exp1            1   54[COMRAM] unsigned char 
  8250 ;;  cntr            1   53[COMRAM] unsigned char 
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  4   40[COMRAM] unsigned long 
  8253 ;; Registers used:
  8254 ;;		wreg, status,2, status,0
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8260 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;Total ram usage:       15 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    4
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;;		_sprintf
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text28
  8275  00223E                     __ptext28:
  8276                           	opt stack 0
  8277  00223E                     __tdiv_to_l_:
  8278                           	opt stack 24
  8279                           
  8280                           ;incstack = 0
  8281  00223E  C02B  F02F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8282  002242  6A30               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8283  002244  6A31               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8284  002246  342A               	rlcf	__tdiv_to_l_@f1+1,w,c
  8285  002248  362F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8286  00224A  E301               	bnc	u5401
  8287  00224C  8030               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8288  00224E                     u5401:
  8289  00224E  502F               	movf	??__tdiv_to_l_,w,c
  8290  002250  6E37               	movwf	__tdiv_to_l_@exp1,c
  8291  002252  5037               	movf	__tdiv_to_l_@exp1,w,c
  8292  002254  A4D8               	btfss	status,2,c
  8293  002256  D009               	goto	l858
  8294  002258  0E00               	movlw	0
  8295  00225A  6E29               	movwf	?__tdiv_to_l_,c
  8296  00225C  0E00               	movlw	0
  8297  00225E  6E2A               	movwf	?__tdiv_to_l_+1,c
  8298  002260  0E00               	movlw	0
  8299  002262  6E2B               	movwf	?__tdiv_to_l_+2,c
  8300  002264  0E00               	movlw	0
  8301  002266  6E2C               	movwf	?__tdiv_to_l_+3,c
  8302  002268  0012               	return	
  8303  00226A                     l858:
  8304  00226A  C02E  F02F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8305  00226E  6A30               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8306  002270  6A31               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8307  002272  342D               	rlcf	__tdiv_to_l_@f2+1,w,c
  8308  002274  362F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8309  002276  E301               	bnc	u5421
  8310  002278  8030               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8311  00227A                     u5421:
  8312  00227A  502F               	movf	??__tdiv_to_l_,w,c
  8313  00227C  6E36               	movwf	__tdiv_to_l_@cntr,c
  8314  00227E  5036               	movf	__tdiv_to_l_@cntr,w,c
  8315  002280  A4D8               	btfss	status,2,c
  8316  002282  D009               	goto	l860
  8317  002284  0E00               	movlw	0
  8318  002286  6E29               	movwf	?__tdiv_to_l_,c
  8319  002288  0E00               	movlw	0
  8320  00228A  6E2A               	movwf	?__tdiv_to_l_+1,c
  8321  00228C  0E00               	movlw	0
  8322  00228E  6E2B               	movwf	?__tdiv_to_l_+2,c
  8323  002290  0E00               	movlw	0
  8324  002292  6E2C               	movwf	?__tdiv_to_l_+3,c
  8325  002294  0012               	return	
  8326  002296                     l860:
  8327  002296  8E2A               	bsf	__tdiv_to_l_@f1+1,7,c
  8328  002298  0EFF               	movlw	255
  8329  00229A  1629               	andwf	__tdiv_to_l_@f1,f,c
  8330  00229C  0EFF               	movlw	255
  8331  00229E  162A               	andwf	__tdiv_to_l_@f1+1,f,c
  8332  0022A0  0E00               	movlw	0
  8333  0022A2  162B               	andwf	__tdiv_to_l_@f1+2,f,c
  8334  0022A4  8E2D               	bsf	__tdiv_to_l_@f2+1,7,c
  8335  0022A6  0EFF               	movlw	255
  8336  0022A8  162C               	andwf	__tdiv_to_l_@f2,f,c
  8337  0022AA  0EFF               	movlw	255
  8338  0022AC  162D               	andwf	__tdiv_to_l_@f2+1,f,c
  8339  0022AE  0E00               	movlw	0
  8340  0022B0  162E               	andwf	__tdiv_to_l_@f2+2,f,c
  8341  0022B2  0E00               	movlw	0
  8342  0022B4  6E32               	movwf	__tdiv_to_l_@quot,c
  8343  0022B6  0E00               	movlw	0
  8344  0022B8  6E33               	movwf	__tdiv_to_l_@quot+1,c
  8345  0022BA  0E00               	movlw	0
  8346  0022BC  6E34               	movwf	__tdiv_to_l_@quot+2,c
  8347  0022BE  0E00               	movlw	0
  8348  0022C0  6E35               	movwf	__tdiv_to_l_@quot+3,c
  8349  0022C2  0E7F               	movlw	127
  8350  0022C4  5E37               	subwf	__tdiv_to_l_@exp1,f,c
  8351  0022C6  5036               	movf	__tdiv_to_l_@cntr,w,c
  8352  0022C8  0F98               	addlw	152
  8353  0022CA  5E37               	subwf	__tdiv_to_l_@exp1,f,c
  8354  0022CC  0E18               	movlw	24
  8355  0022CE  6E36               	movwf	__tdiv_to_l_@cntr,c
  8356  0022D0                     l861:
  8357  0022D0  90D8               	bcf	status,0,c
  8358  0022D2  3632               	rlcf	__tdiv_to_l_@quot,f,c
  8359  0022D4  3633               	rlcf	__tdiv_to_l_@quot+1,f,c
  8360  0022D6  3634               	rlcf	__tdiv_to_l_@quot+2,f,c
  8361  0022D8  3635               	rlcf	__tdiv_to_l_@quot+3,f,c
  8362  0022DA  502C               	movf	__tdiv_to_l_@f2,w,c
  8363  0022DC  5C29               	subwf	__tdiv_to_l_@f1,w,c
  8364  0022DE  502D               	movf	__tdiv_to_l_@f2+1,w,c
  8365  0022E0  582A               	subwfb	__tdiv_to_l_@f1+1,w,c
  8366  0022E2  502E               	movf	__tdiv_to_l_@f2+2,w,c
  8367  0022E4  582B               	subwfb	__tdiv_to_l_@f1+2,w,c
  8368  0022E6  A0D8               	btfss	status,0,c
  8369  0022E8  D007               	goto	l862
  8370  0022EA  502C               	movf	__tdiv_to_l_@f2,w,c
  8371  0022EC  5E29               	subwf	__tdiv_to_l_@f1,f,c
  8372  0022EE  502D               	movf	__tdiv_to_l_@f2+1,w,c
  8373  0022F0  5A2A               	subwfb	__tdiv_to_l_@f1+1,f,c
  8374  0022F2  502E               	movf	__tdiv_to_l_@f2+2,w,c
  8375  0022F4  5A2B               	subwfb	__tdiv_to_l_@f1+2,f,c
  8376  0022F6  8032               	bsf	__tdiv_to_l_@quot,0,c
  8377  0022F8                     l862:
  8378  0022F8  90D8               	bcf	status,0,c
  8379  0022FA  3629               	rlcf	__tdiv_to_l_@f1,f,c
  8380  0022FC  362A               	rlcf	__tdiv_to_l_@f1+1,f,c
  8381  0022FE  362B               	rlcf	__tdiv_to_l_@f1+2,f,c
  8382  002300  2E36               	decfsz	__tdiv_to_l_@cntr,f,c
  8383  002302  D7E6               	goto	l861
  8384  002304  AE37               	btfss	__tdiv_to_l_@exp1,7,c
  8385  002306  D016               	goto	l864
  8386  002308  5037               	movf	__tdiv_to_l_@exp1,w,c
  8387  00230A  0A80               	xorlw	128
  8388  00230C  0F97               	addlw	151
  8389  00230E  B0D8               	btfsc	status,0,c
  8390  002310  D009               	goto	l865
  8391  002312  0E00               	movlw	0
  8392  002314  6E29               	movwf	?__tdiv_to_l_,c
  8393  002316  0E00               	movlw	0
  8394  002318  6E2A               	movwf	?__tdiv_to_l_+1,c
  8395  00231A  0E00               	movlw	0
  8396  00231C  6E2B               	movwf	?__tdiv_to_l_+2,c
  8397  00231E  0E00               	movlw	0
  8398  002320  6E2C               	movwf	?__tdiv_to_l_+3,c
  8399  002322  0012               	return	
  8400  002324                     l865:
  8401  002324  90D8               	bcf	status,0,c
  8402  002326  3235               	rrcf	__tdiv_to_l_@quot+3,f,c
  8403  002328  3234               	rrcf	__tdiv_to_l_@quot+2,f,c
  8404  00232A  3233               	rrcf	__tdiv_to_l_@quot+1,f,c
  8405  00232C  3232               	rrcf	__tdiv_to_l_@quot,f,c
  8406  00232E  3E37               	incfsz	__tdiv_to_l_@exp1,f,c
  8407  002330  D7F9               	goto	l865
  8408  002332  D015               	goto	u5480
  8409  002334                     l864:
  8410  002334  0E17               	movlw	23
  8411  002336  6437               	cpfsgt	__tdiv_to_l_@exp1,c
  8412  002338  D00F               	goto	l870
  8413  00233A  0E00               	movlw	0
  8414  00233C  6E29               	movwf	?__tdiv_to_l_,c
  8415  00233E  0E00               	movlw	0
  8416  002340  6E2A               	movwf	?__tdiv_to_l_+1,c
  8417  002342  0E00               	movlw	0
  8418  002344  6E2B               	movwf	?__tdiv_to_l_+2,c
  8419  002346  0E00               	movlw	0
  8420  002348  6E2C               	movwf	?__tdiv_to_l_+3,c
  8421  00234A  0012               	return	
  8422  00234C  90D8               	bcf	status,0,c
  8423  00234E  3632               	rlcf	__tdiv_to_l_@quot,f,c
  8424  002350  3633               	rlcf	__tdiv_to_l_@quot+1,f,c
  8425  002352  3634               	rlcf	__tdiv_to_l_@quot+2,f,c
  8426  002354  3635               	rlcf	__tdiv_to_l_@quot+3,f,c
  8427  002356  0637               	decf	__tdiv_to_l_@exp1,f,c
  8428  002358                     l870:
  8429  002358  5037               	movf	__tdiv_to_l_@exp1,w,c
  8430  00235A  A4D8               	btfss	status,2,c
  8431  00235C  D7F7               	goto	l871
  8432  00235E                     u5480:
  8433  00235E  C032  F029         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8434  002362  C033  F02A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8435  002366  C034  F02B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8436  00236A  C035  F02C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8437  00236E  0012               	return		;funcret
  8438  002370                     __end_of__tdiv_to_l_:
  8439                           	opt stack 0
  8440                           tblptru	equ	0xFF8
  8441                           tblptrh	equ	0xFF7
  8442                           tblptrl	equ	0xFF6
  8443                           tablat	equ	0xFF5
  8444                           prodh	equ	0xFF4
  8445                           prodl	equ	0xFF3
  8446                           intcon	equ	0xFF2
  8447                           intcon2	equ	0xFF1
  8448                           intcon3	equ	0xFF0
  8449                           postinc0	equ	0xFEE
  8450                           wreg	equ	0xFE8
  8451                           indf1	equ	0xFE7
  8452                           postdec1	equ	0xFE5
  8453                           fsr1h	equ	0xFE2
  8454                           fsr1l	equ	0xFE1
  8455                           indf2	equ	0xFDF
  8456                           postinc2	equ	0xFDE
  8457                           postdec2	equ	0xFDD
  8458                           fsr2h	equ	0xFDA
  8459                           fsr2l	equ	0xFD9
  8460                           status	equ	0xFD8
  8461                           
  8462 ;; *************** function __div_to_l_ *****************
  8463 ;; Defined at:
  8464 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  f1              3   40[COMRAM] unsigned long 
  8467 ;;  f2              3   43[COMRAM] unsigned long 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  quot            4   46[COMRAM] unsigned long 
  8470 ;;  exp1            1   51[COMRAM] unsigned char 
  8471 ;;  cntr            1   50[COMRAM] unsigned char 
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  4   40[COMRAM] unsigned long 
  8474 ;; Registers used:
  8475 ;;		wreg, status,2, status,0
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8481 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;Total ram usage:       12 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    4
  8488 ;; This function calls:
  8489 ;;		Nothing
  8490 ;; This function is called by:
  8491 ;;		_sprintf
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text29
  8496  002370                     __ptext29:
  8497                           	opt stack 0
  8498  002370                     __div_to_l_:
  8499                           	opt stack 24
  8500                           
  8501                           ;incstack = 0
  8502  002370  342B               	rlcf	__div_to_l_@f1+2,w,c
  8503  002372  342C               	rlcf	__div_to_l_@f1+3,w,c
  8504  002374  6E34               	movwf	__div_to_l_@exp1,c
  8505  002376  5034               	movf	__div_to_l_@exp1,w,c
  8506  002378  A4D8               	btfss	status,2,c
  8507  00237A  D009               	goto	l754
  8508  00237C  0E00               	movlw	0
  8509  00237E  6E29               	movwf	?__div_to_l_,c
  8510  002380  0E00               	movlw	0
  8511  002382  6E2A               	movwf	?__div_to_l_+1,c
  8512  002384  0E00               	movlw	0
  8513  002386  6E2B               	movwf	?__div_to_l_+2,c
  8514  002388  0E00               	movlw	0
  8515  00238A  6E2C               	movwf	?__div_to_l_+3,c
  8516  00238C  0012               	return	
  8517  00238E                     l754:
  8518  00238E  342E               	rlcf	__div_to_l_@f2+2,w,c
  8519  002390  342F               	rlcf	__div_to_l_@f2+3,w,c
  8520  002392  6E33               	movwf	__div_to_l_@cntr,c
  8521  002394  5033               	movf	__div_to_l_@cntr,w,c
  8522  002396  A4D8               	btfss	status,2,c
  8523  002398  D009               	goto	l756
  8524  00239A  0E00               	movlw	0
  8525  00239C  6E29               	movwf	?__div_to_l_,c
  8526  00239E  0E00               	movlw	0
  8527  0023A0  6E2A               	movwf	?__div_to_l_+1,c
  8528  0023A2  0E00               	movlw	0
  8529  0023A4  6E2B               	movwf	?__div_to_l_+2,c
  8530  0023A6  0E00               	movlw	0
  8531  0023A8  6E2C               	movwf	?__div_to_l_+3,c
  8532  0023AA  0012               	return	
  8533  0023AC                     l756:
  8534  0023AC  8E2B               	bsf	__div_to_l_@f1+2,7,c
  8535  0023AE  0EFF               	movlw	255
  8536  0023B0  1629               	andwf	__div_to_l_@f1,f,c
  8537  0023B2  0EFF               	movlw	255
  8538  0023B4  162A               	andwf	__div_to_l_@f1+1,f,c
  8539  0023B6  0EFF               	movlw	255
  8540  0023B8  162B               	andwf	__div_to_l_@f1+2,f,c
  8541  0023BA  0E00               	movlw	0
  8542  0023BC  162C               	andwf	__div_to_l_@f1+3,f,c
  8543  0023BE  8E2E               	bsf	__div_to_l_@f2+2,7,c
  8544  0023C0  0EFF               	movlw	255
  8545  0023C2  162C               	andwf	__div_to_l_@f2,f,c
  8546  0023C4  0EFF               	movlw	255
  8547  0023C6  162D               	andwf	__div_to_l_@f2+1,f,c
  8548  0023C8  0EFF               	movlw	255
  8549  0023CA  162E               	andwf	__div_to_l_@f2+2,f,c
  8550  0023CC  0E00               	movlw	0
  8551  0023CE  162F               	andwf	__div_to_l_@f2+3,f,c
  8552  0023D0  0E00               	movlw	0
  8553  0023D2  6E2F               	movwf	__div_to_l_@quot,c
  8554  0023D4  0E00               	movlw	0
  8555  0023D6  6E30               	movwf	__div_to_l_@quot+1,c
  8556  0023D8  0E00               	movlw	0
  8557  0023DA  6E31               	movwf	__div_to_l_@quot+2,c
  8558  0023DC  0E00               	movlw	0
  8559  0023DE  6E32               	movwf	__div_to_l_@quot+3,c
  8560  0023E0  0E7F               	movlw	127
  8561  0023E2  5E34               	subwf	__div_to_l_@exp1,f,c
  8562  0023E4  5033               	movf	__div_to_l_@cntr,w,c
  8563  0023E6  0FA0               	addlw	160
  8564  0023E8  5E34               	subwf	__div_to_l_@exp1,f,c
  8565  0023EA  0E20               	movlw	32
  8566  0023EC  6E33               	movwf	__div_to_l_@cntr,c
  8567  0023EE  90D8               	bcf	status,0,c
  8568  0023F0  362F               	rlcf	__div_to_l_@quot,f,c
  8569  0023F2  3630               	rlcf	__div_to_l_@quot+1,f,c
  8570  0023F4  3631               	rlcf	__div_to_l_@quot+2,f,c
  8571  0023F6  3632               	rlcf	__div_to_l_@quot+3,f,c
  8572  0023F8  502C               	movf	__div_to_l_@f2,w,c
  8573  0023FA  5C29               	subwf	__div_to_l_@f1,w,c
  8574  0023FC  502D               	movf	__div_to_l_@f2+1,w,c
  8575  0023FE  582A               	subwfb	__div_to_l_@f1+1,w,c
  8576  002400  502E               	movf	__div_to_l_@f2+2,w,c
  8577  002402  582B               	subwfb	__div_to_l_@f1+2,w,c
  8578  002404  502F               	movf	__div_to_l_@f2+3,w,c
  8579  002406  582C               	subwfb	__div_to_l_@f1+3,w,c
  8580  002408  A0D8               	btfss	status,0,c
  8581  00240A  D009               	goto	l758
  8582  00240C  502C               	movf	__div_to_l_@f2,w,c
  8583  00240E  5E29               	subwf	__div_to_l_@f1,f,c
  8584  002410  502D               	movf	__div_to_l_@f2+1,w,c
  8585  002412  5A2A               	subwfb	__div_to_l_@f1+1,f,c
  8586  002414  502E               	movf	__div_to_l_@f2+2,w,c
  8587  002416  5A2B               	subwfb	__div_to_l_@f1+2,f,c
  8588  002418  502F               	movf	__div_to_l_@f2+3,w,c
  8589  00241A  5A2C               	subwfb	__div_to_l_@f1+3,f,c
  8590  00241C  802F               	bsf	__div_to_l_@quot,0,c
  8591  00241E                     l758:
  8592  00241E  90D8               	bcf	status,0,c
  8593  002420  3629               	rlcf	__div_to_l_@f1,f,c
  8594  002422  362A               	rlcf	__div_to_l_@f1+1,f,c
  8595  002424  362B               	rlcf	__div_to_l_@f1+2,f,c
  8596  002426  362C               	rlcf	__div_to_l_@f1+3,f,c
  8597  002428  2E33               	decfsz	__div_to_l_@cntr,f,c
  8598  00242A  D7E1               	goto	l757
  8599  00242C  AE34               	btfss	__div_to_l_@exp1,7,c
  8600  00242E  D016               	goto	l760
  8601  002430  5034               	movf	__div_to_l_@exp1,w,c
  8602  002432  0A80               	xorlw	128
  8603  002434  0F9F               	addlw	159
  8604  002436  B0D8               	btfsc	status,0,c
  8605  002438  D009               	goto	l761
  8606  00243A  0E00               	movlw	0
  8607  00243C  6E29               	movwf	?__div_to_l_,c
  8608  00243E  0E00               	movlw	0
  8609  002440  6E2A               	movwf	?__div_to_l_+1,c
  8610  002442  0E00               	movlw	0
  8611  002444  6E2B               	movwf	?__div_to_l_+2,c
  8612  002446  0E00               	movlw	0
  8613  002448  6E2C               	movwf	?__div_to_l_+3,c
  8614  00244A  0012               	return	
  8615  00244C                     l761:
  8616  00244C  90D8               	bcf	status,0,c
  8617  00244E  3232               	rrcf	__div_to_l_@quot+3,f,c
  8618  002450  3231               	rrcf	__div_to_l_@quot+2,f,c
  8619  002452  3230               	rrcf	__div_to_l_@quot+1,f,c
  8620  002454  322F               	rrcf	__div_to_l_@quot,f,c
  8621  002456  3E34               	incfsz	__div_to_l_@exp1,f,c
  8622  002458  D7F9               	goto	l761
  8623  00245A  D015               	goto	u5550
  8624  00245C                     l760:
  8625  00245C  0E1F               	movlw	31
  8626  00245E  6434               	cpfsgt	__div_to_l_@exp1,c
  8627  002460  D00F               	goto	l766
  8628  002462  0E00               	movlw	0
  8629  002464  6E29               	movwf	?__div_to_l_,c
  8630  002466  0E00               	movlw	0
  8631  002468  6E2A               	movwf	?__div_to_l_+1,c
  8632  00246A  0E00               	movlw	0
  8633  00246C  6E2B               	movwf	?__div_to_l_+2,c
  8634  00246E  0E00               	movlw	0
  8635  002470  6E2C               	movwf	?__div_to_l_+3,c
  8636  002472  0012               	return	
  8637  002474  90D8               	bcf	status,0,c
  8638  002476  362F               	rlcf	__div_to_l_@quot,f,c
  8639  002478  3630               	rlcf	__div_to_l_@quot+1,f,c
  8640  00247A  3631               	rlcf	__div_to_l_@quot+2,f,c
  8641  00247C  3632               	rlcf	__div_to_l_@quot+3,f,c
  8642  00247E  0634               	decf	__div_to_l_@exp1,f,c
  8643  002480                     l766:
  8644  002480  5034               	movf	__div_to_l_@exp1,w,c
  8645  002482  A4D8               	btfss	status,2,c
  8646  002484  D7F7               	goto	l767
  8647  002486                     u5550:
  8648  002486  C02F  F029         	movff	__div_to_l_@quot,?__div_to_l_
  8649  00248A  C030  F02A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8650  00248E  C031  F02B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8651  002492  C032  F02C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8652  002496  0012               	return		;funcret
  8653  002498                     __end_of__div_to_l_:
  8654                           	opt stack 0
  8655                           tblptru	equ	0xFF8
  8656                           tblptrh	equ	0xFF7
  8657                           tblptrl	equ	0xFF6
  8658                           tablat	equ	0xFF5
  8659                           prodh	equ	0xFF4
  8660                           prodl	equ	0xFF3
  8661                           intcon	equ	0xFF2
  8662                           intcon2	equ	0xFF1
  8663                           intcon3	equ	0xFF0
  8664                           postinc0	equ	0xFEE
  8665                           wreg	equ	0xFE8
  8666                           indf1	equ	0xFE7
  8667                           postdec1	equ	0xFE5
  8668                           fsr1h	equ	0xFE2
  8669                           fsr1l	equ	0xFE1
  8670                           indf2	equ	0xFDF
  8671                           postinc2	equ	0xFDE
  8672                           postdec2	equ	0xFDD
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8
  8676                           
  8677 ;; *************** function ___lltoft *****************
  8678 ;; Defined at:
  8679 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  c               4   48[COMRAM] unsigned long 
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  exp             1   56[COMRAM] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  3   48[COMRAM] float 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8693 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;Total ram usage:        9 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    5
  8700 ;; This function calls:
  8701 ;;		___ftpack
  8702 ;; This function is called by:
  8703 ;;		_sprintf
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           	psect	text30
  8708  002F94                     __ptext30:
  8709                           	opt stack 0
  8710  002F94                     ___lltoft:
  8711                           	opt stack 23
  8712                           
  8713                           ;incstack = 0
  8714  002F94  0E8E               	movlw	142
  8715  002F96  6E39               	movwf	___lltoft@exp,c
  8716  002F98  D006               	goto	l965
  8717  002F9A  90D8               	bcf	status,0,c
  8718  002F9C  3234               	rrcf	___lltoft@c+3,f,c
  8719  002F9E  3233               	rrcf	___lltoft@c+2,f,c
  8720  002FA0  3232               	rrcf	___lltoft@c+1,f,c
  8721  002FA2  3231               	rrcf	___lltoft@c,f,c
  8722  002FA4  2A39               	incf	___lltoft@exp,f,c
  8723  002FA6                     l965:
  8724  002FA6  0E00               	movlw	0
  8725  002FA8  1431               	andwf	___lltoft@c,w,c
  8726  002FAA  6E35               	movwf	??___lltoft& (0+255),c
  8727  002FAC  0E00               	movlw	0
  8728  002FAE  1432               	andwf	___lltoft@c+1,w,c
  8729  002FB0  6E36               	movwf	(??___lltoft+1)& (0+255),c
  8730  002FB2  0E00               	movlw	0
  8731  002FB4  1433               	andwf	___lltoft@c+2,w,c
  8732  002FB6  6E37               	movwf	(??___lltoft+2)& (0+255),c
  8733  002FB8  0EFF               	movlw	255
  8734  002FBA  1434               	andwf	___lltoft@c+3,w,c
  8735  002FBC  6E38               	movwf	(??___lltoft+3)& (0+255),c
  8736  002FBE  5035               	movf	??___lltoft,w,c
  8737  002FC0  1036               	iorwf	??___lltoft+1,w,c
  8738  002FC2  1037               	iorwf	??___lltoft+2,w,c
  8739  002FC4  1038               	iorwf	??___lltoft+3,w,c
  8740  002FC6  A4D8               	btfss	status,2,c
  8741  002FC8  D7E8               	goto	l966
  8742  002FCA  C031  F029         	movff	___lltoft@c,___ftpack@arg
  8743  002FCE  C032  F02A         	movff	___lltoft@c+1,___ftpack@arg+1
  8744  002FD2  C033  F02B         	movff	___lltoft@c+2,___ftpack@arg+2
  8745  002FD6  C039  F02C         	movff	___lltoft@exp,___ftpack@exp
  8746  002FDA  0E00               	movlw	0
  8747  002FDC  6E2D               	movwf	___ftpack@sign,c
  8748  002FDE  EC70  F014         	call	___ftpack	;wreg free
  8749  002FE2  C029  F031         	movff	?___ftpack,?___lltoft
  8750  002FE6  C02A  F032         	movff	?___ftpack+1,?___lltoft+1
  8751  002FEA  C02B  F033         	movff	?___ftpack+2,?___lltoft+2
  8752  002FEE  0012               	return	
  8753  002FF0                     __end_of___lltoft:
  8754                           	opt stack 0
  8755                           tblptru	equ	0xFF8
  8756                           tblptrh	equ	0xFF7
  8757                           tblptrl	equ	0xFF6
  8758                           tablat	equ	0xFF5
  8759                           prodh	equ	0xFF4
  8760                           prodl	equ	0xFF3
  8761                           intcon	equ	0xFF2
  8762                           intcon2	equ	0xFF1
  8763                           intcon3	equ	0xFF0
  8764                           postinc0	equ	0xFEE
  8765                           wreg	equ	0xFE8
  8766                           indf1	equ	0xFE7
  8767                           postdec1	equ	0xFE5
  8768                           fsr1h	equ	0xFE2
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function ___llmod *****************
  8778 ;; Defined at:
  8779 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;  dividend        4   53[COMRAM] unsigned long 
  8782 ;;  divisor         4   57[COMRAM] unsigned long 
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;  counter         1   61[COMRAM] unsigned char 
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  4   53[COMRAM] unsigned long 
  8787 ;; Registers used:
  8788 ;;		wreg, status,2, status,0
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8794 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;Total ram usage:        9 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    4
  8801 ;; This function calls:
  8802 ;;		Nothing
  8803 ;; This function is called by:
  8804 ;;		_sprintf
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text31
  8809  002ECC                     __ptext31:
  8810                           	opt stack 0
  8811  002ECC                     ___llmod:
  8812                           	opt stack 24
  8813                           
  8814                           ;incstack = 0
  8815  002ECC  503A               	movf	___llmod@divisor,w,c
  8816  002ECE  103B               	iorwf	___llmod@divisor+1,w,c
  8817  002ED0  103C               	iorwf	___llmod@divisor+2,w,c
  8818  002ED2  103D               	iorwf	___llmod@divisor+3,w,c
  8819  002ED4  B4D8               	btfsc	status,2,c
  8820  002ED6  D024               	goto	l959
  8821  002ED8  0E01               	movlw	1
  8822  002EDA  6E3E               	movwf	___llmod@counter,c
  8823  002EDC  D006               	goto	l954
  8824  002EDE  90D8               	bcf	status,0,c
  8825  002EE0  363A               	rlcf	___llmod@divisor,f,c
  8826  002EE2  363B               	rlcf	___llmod@divisor+1,f,c
  8827  002EE4  363C               	rlcf	___llmod@divisor+2,f,c
  8828  002EE6  363D               	rlcf	___llmod@divisor+3,f,c
  8829  002EE8  2A3E               	incf	___llmod@counter,f,c
  8830  002EEA                     l954:
  8831  002EEA  AE3D               	btfss	___llmod@divisor+3,7,c
  8832  002EEC  D7F8               	goto	l955
  8833  002EEE                     u5780:
  8834  002EEE  503A               	movf	___llmod@divisor,w,c
  8835  002EF0  5C36               	subwf	___llmod@dividend,w,c
  8836  002EF2  503B               	movf	___llmod@divisor+1,w,c
  8837  002EF4  5837               	subwfb	___llmod@dividend+1,w,c
  8838  002EF6  503C               	movf	___llmod@divisor+2,w,c
  8839  002EF8  5838               	subwfb	___llmod@dividend+2,w,c
  8840  002EFA  503D               	movf	___llmod@divisor+3,w,c
  8841  002EFC  5839               	subwfb	___llmod@dividend+3,w,c
  8842  002EFE  A0D8               	btfss	status,0,c
  8843  002F00  D008               	goto	l958
  8844  002F02  503A               	movf	___llmod@divisor,w,c
  8845  002F04  5E36               	subwf	___llmod@dividend,f,c
  8846  002F06  503B               	movf	___llmod@divisor+1,w,c
  8847  002F08  5A37               	subwfb	___llmod@dividend+1,f,c
  8848  002F0A  503C               	movf	___llmod@divisor+2,w,c
  8849  002F0C  5A38               	subwfb	___llmod@dividend+2,f,c
  8850  002F0E  503D               	movf	___llmod@divisor+3,w,c
  8851  002F10  5A39               	subwfb	___llmod@dividend+3,f,c
  8852  002F12                     l958:
  8853  002F12  90D8               	bcf	status,0,c
  8854  002F14  323D               	rrcf	___llmod@divisor+3,f,c
  8855  002F16  323C               	rrcf	___llmod@divisor+2,f,c
  8856  002F18  323B               	rrcf	___llmod@divisor+1,f,c
  8857  002F1A  323A               	rrcf	___llmod@divisor,f,c
  8858  002F1C  2E3E               	decfsz	___llmod@counter,f,c
  8859  002F1E  D7E7               	goto	u5780
  8860  002F20                     l959:
  8861  002F20  C036  F036         	movff	___llmod@dividend,?___llmod
  8862  002F24  C037  F037         	movff	___llmod@dividend+1,?___llmod+1
  8863  002F28  C038  F038         	movff	___llmod@dividend+2,?___llmod+2
  8864  002F2C  C039  F039         	movff	___llmod@dividend+3,?___llmod+3
  8865  002F30  0012               	return		;funcret
  8866  002F32                     __end_of___llmod:
  8867                           	opt stack 0
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           intcon	equ	0xFF2
  8875                           intcon2	equ	0xFF1
  8876                           intcon3	equ	0xFF0
  8877                           postinc0	equ	0xFEE
  8878                           wreg	equ	0xFE8
  8879                           indf1	equ	0xFE7
  8880                           postdec1	equ	0xFE5
  8881                           fsr1h	equ	0xFE2
  8882                           fsr1l	equ	0xFE1
  8883                           indf2	equ	0xFDF
  8884                           postinc2	equ	0xFDE
  8885                           postdec2	equ	0xFDD
  8886                           fsr2h	equ	0xFDA
  8887                           fsr2l	equ	0xFD9
  8888                           status	equ	0xFD8
  8889                           
  8890 ;; *************** function ___lldiv *****************
  8891 ;; Defined at:
  8892 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  dividend        4   40[COMRAM] unsigned long 
  8895 ;;  divisor         4   44[COMRAM] unsigned long 
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;  quotient        4   48[COMRAM] unsigned long 
  8898 ;;  counter         1   52[COMRAM] unsigned char 
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  4   40[COMRAM] unsigned long 
  8901 ;; Registers used:
  8902 ;;		wreg, status,2, status,0
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8908 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;Total ram usage:       13 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    4
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_sprintf
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           	psect	text32
  8923  002C92                     __ptext32:
  8924                           	opt stack 0
  8925  002C92                     ___lldiv:
  8926                           	opt stack 24
  8927                           
  8928                           ;incstack = 0
  8929  002C92  0E00               	movlw	0
  8930  002C94  6E31               	movwf	___lldiv@quotient,c
  8931  002C96  0E00               	movlw	0
  8932  002C98  6E32               	movwf	___lldiv@quotient+1,c
  8933  002C9A  0E00               	movlw	0
  8934  002C9C  6E33               	movwf	___lldiv@quotient+2,c
  8935  002C9E  0E00               	movlw	0
  8936  002CA0  6E34               	movwf	___lldiv@quotient+3,c
  8937  002CA2  502D               	movf	___lldiv@divisor,w,c
  8938  002CA4  102E               	iorwf	___lldiv@divisor+1,w,c
  8939  002CA6  102F               	iorwf	___lldiv@divisor+2,w,c
  8940  002CA8  1030               	iorwf	___lldiv@divisor+3,w,c
  8941  002CAA  B4D8               	btfsc	status,2,c
  8942  002CAC  D02A               	goto	l949
  8943  002CAE  0E01               	movlw	1
  8944  002CB0  6E35               	movwf	___lldiv@counter,c
  8945  002CB2  D006               	goto	l944
  8946  002CB4  90D8               	bcf	status,0,c
  8947  002CB6  362D               	rlcf	___lldiv@divisor,f,c
  8948  002CB8  362E               	rlcf	___lldiv@divisor+1,f,c
  8949  002CBA  362F               	rlcf	___lldiv@divisor+2,f,c
  8950  002CBC  3630               	rlcf	___lldiv@divisor+3,f,c
  8951  002CBE  2A35               	incf	___lldiv@counter,f,c
  8952  002CC0                     l944:
  8953  002CC0  AE30               	btfss	___lldiv@divisor+3,7,c
  8954  002CC2  D7F8               	goto	l945
  8955  002CC4                     u5750:
  8956  002CC4  90D8               	bcf	status,0,c
  8957  002CC6  3631               	rlcf	___lldiv@quotient,f,c
  8958  002CC8  3632               	rlcf	___lldiv@quotient+1,f,c
  8959  002CCA  3633               	rlcf	___lldiv@quotient+2,f,c
  8960  002CCC  3634               	rlcf	___lldiv@quotient+3,f,c
  8961  002CCE  502D               	movf	___lldiv@divisor,w,c
  8962  002CD0  5C29               	subwf	___lldiv@dividend,w,c
  8963  002CD2  502E               	movf	___lldiv@divisor+1,w,c
  8964  002CD4  582A               	subwfb	___lldiv@dividend+1,w,c
  8965  002CD6  502F               	movf	___lldiv@divisor+2,w,c
  8966  002CD8  582B               	subwfb	___lldiv@dividend+2,w,c
  8967  002CDA  5030               	movf	___lldiv@divisor+3,w,c
  8968  002CDC  582C               	subwfb	___lldiv@dividend+3,w,c
  8969  002CDE  A0D8               	btfss	status,0,c
  8970  002CE0  D009               	goto	l948
  8971  002CE2  502D               	movf	___lldiv@divisor,w,c
  8972  002CE4  5E29               	subwf	___lldiv@dividend,f,c
  8973  002CE6  502E               	movf	___lldiv@divisor+1,w,c
  8974  002CE8  5A2A               	subwfb	___lldiv@dividend+1,f,c
  8975  002CEA  502F               	movf	___lldiv@divisor+2,w,c
  8976  002CEC  5A2B               	subwfb	___lldiv@dividend+2,f,c
  8977  002CEE  5030               	movf	___lldiv@divisor+3,w,c
  8978  002CF0  5A2C               	subwfb	___lldiv@dividend+3,f,c
  8979  002CF2  8031               	bsf	___lldiv@quotient,0,c
  8980  002CF4                     l948:
  8981  002CF4  90D8               	bcf	status,0,c
  8982  002CF6  3230               	rrcf	___lldiv@divisor+3,f,c
  8983  002CF8  322F               	rrcf	___lldiv@divisor+2,f,c
  8984  002CFA  322E               	rrcf	___lldiv@divisor+1,f,c
  8985  002CFC  322D               	rrcf	___lldiv@divisor,f,c
  8986  002CFE  2E35               	decfsz	___lldiv@counter,f,c
  8987  002D00  D7E1               	goto	u5750
  8988  002D02                     l949:
  8989  002D02  C031  F029         	movff	___lldiv@quotient,?___lldiv
  8990  002D06  C032  F02A         	movff	___lldiv@quotient+1,?___lldiv+1
  8991  002D0A  C033  F02B         	movff	___lldiv@quotient+2,?___lldiv+2
  8992  002D0E  C034  F02C         	movff	___lldiv@quotient+3,?___lldiv+3
  8993  002D12  0012               	return		;funcret
  8994  002D14                     __end_of___lldiv:
  8995                           	opt stack 0
  8996                           tblptru	equ	0xFF8
  8997                           tblptrh	equ	0xFF7
  8998                           tblptrl	equ	0xFF6
  8999                           tablat	equ	0xFF5
  9000                           prodh	equ	0xFF4
  9001                           prodl	equ	0xFF3
  9002                           intcon	equ	0xFF2
  9003                           intcon2	equ	0xFF1
  9004                           intcon3	equ	0xFF0
  9005                           postinc0	equ	0xFEE
  9006                           wreg	equ	0xFE8
  9007                           indf1	equ	0xFE7
  9008                           postdec1	equ	0xFE5
  9009                           fsr1h	equ	0xFE2
  9010                           fsr1l	equ	0xFE1
  9011                           indf2	equ	0xFDF
  9012                           postinc2	equ	0xFDE
  9013                           postdec2	equ	0xFDD
  9014                           fsr2h	equ	0xFDA
  9015                           fsr2l	equ	0xFD9
  9016                           status	equ	0xFD8
  9017                           
  9018 ;; *************** function ___fttol *****************
  9019 ;; Defined at:
  9020 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;  f1              3   34[BANK0 ] float 
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;  lval            4   44[BANK0 ] unsigned long 
  9025 ;;  exp1            1   48[BANK0 ] unsigned char 
  9026 ;;  sign1           1   43[BANK0 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  4   34[BANK0 ] long 
  9029 ;; Registers used:
  9030 ;;		wreg, status,2, status,0
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9036 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;Total ram usage:       15 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    4
  9043 ;; This function calls:
  9044 ;;		Nothing
  9045 ;; This function is called by:
  9046 ;;		_autoCool
  9047 ;;		_set_pwm1_percent
  9048 ;;		_sprintf
  9049 ;;		_autoHeat
  9050 ;;		_set_pwm1_voltage
  9051 ;;		_set_pwm1_general
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           	psect	text33
  9056  002498                     __ptext33:
  9057                           	opt stack 0
  9058  002498                     ___fttol:
  9059                           	opt stack 24
  9060                           
  9061                           ;incstack = 0
  9062  002498  C0A4  F0A6         	movff	___fttol@f1+2,??___fttol
  9063  00249C  0100               	movlb	0	; () banked
  9064  00249E  6BA7               	clrf	(??___fttol+1)& (0+255),b
  9065  0024A0  6BA8               	clrf	(??___fttol+2)& (0+255),b
  9066  0024A2  35A3               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9067  0024A4  37A6               	rlcf	??___fttol& (0+255),f,b
  9068  0024A6  E301               	bnc	u5661
  9069  0024A8  81A7               	bsf	(??___fttol+1)& (0+255),0,b
  9070  0024AA                     u5661:
  9071  0024AA  51A6               	movf	??___fttol& (0+255),w,b
  9072  0024AC  6FB0               	movwf	___fttol@exp1& (0+255),b
  9073  0024AE  51B0               	movf	___fttol@exp1& (0+255),w,b
  9074  0024B0  A4D8               	btfss	status,2,c
  9075  0024B2  D009               	goto	l903
  9076                           
  9077                           ; BSR set to: 0
  9078  0024B4  0E00               	movlw	0
  9079  0024B6  6FA2               	movwf	?___fttol& (0+255),b
  9080  0024B8  0E00               	movlw	0
  9081  0024BA  6FA3               	movwf	(?___fttol+1)& (0+255),b
  9082  0024BC  0E00               	movlw	0
  9083  0024BE  6FA4               	movwf	(?___fttol+2)& (0+255),b
  9084  0024C0  0E00               	movlw	0
  9085  0024C2  6FA5               	movwf	(?___fttol+3)& (0+255),b
  9086                           
  9087                           ; BSR set to: 0
  9088  0024C4  0012               	return	
  9089  0024C6                     l903:
  9090                           
  9091                           ; BSR set to: 0
  9092                           
  9093                           ; BSR set to: 0
  9094  0024C6  0E17               	movlw	23
  9095  0024C8  6FA6               	movwf	??___fttol& (0+255),b
  9096  0024CA  C0A2  F0A7         	movff	___fttol@f1,??___fttol+1
  9097  0024CE  C0A3  F0A8         	movff	___fttol@f1+1,??___fttol+2
  9098  0024D2  C0A4  F0A9         	movff	___fttol@f1+2,??___fttol+3
  9099  0024D6  29A6               	incf	??___fttol& (0+255),w,b
  9100  0024D8  6FAA               	movwf	(??___fttol+4)& (0+255),b
  9101  0024DA  D004               	goto	u5680
  9102  0024DC                     u5685:
  9103  0024DC  90D8               	bcf	status,0,c
  9104  0024DE  33A9               	rrcf	(??___fttol+3)& (0+255),f,b
  9105  0024E0  33A8               	rrcf	(??___fttol+2)& (0+255),f,b
  9106  0024E2  33A7               	rrcf	(??___fttol+1)& (0+255),f,b
  9107  0024E4                     u5680:
  9108  0024E4  2FAA               	decfsz	(??___fttol+4)& (0+255),f,b
  9109  0024E6  D7FA               	goto	u5685
  9110  0024E8  0100               	movlb	0	; () banked
  9111  0024EA  51A7               	movf	(??___fttol+1)& (0+255),w,b
  9112  0024EC  6FAB               	movwf	___fttol@sign1& (0+255),b
  9113                           
  9114                           ; BSR set to: 0
  9115  0024EE  8FA3               	bsf	(___fttol@f1+1)& (0+255),7,b
  9116                           
  9117                           ; BSR set to: 0
  9118  0024F0  0EFF               	movlw	255
  9119  0024F2  17A2               	andwf	___fttol@f1& (0+255),f,b
  9120  0024F4  0EFF               	movlw	255
  9121  0024F6  17A3               	andwf	(___fttol@f1+1)& (0+255),f,b
  9122  0024F8  0E00               	movlw	0
  9123  0024FA  17A4               	andwf	(___fttol@f1+2)& (0+255),f,b
  9124                           
  9125                           ; BSR set to: 0
  9126  0024FC  51A2               	movf	___fttol@f1& (0+255),w,b
  9127  0024FE  6FAC               	movwf	___fttol@lval& (0+255),b
  9128  002500  51A3               	movf	(___fttol@f1+1)& (0+255),w,b
  9129  002502  6FAD               	movwf	(___fttol@lval+1)& (0+255),b
  9130  002504  51A4               	movf	(___fttol@f1+2)& (0+255),w,b
  9131  002506  6FAE               	movwf	(___fttol@lval+2)& (0+255),b
  9132  002508  6BAF               	clrf	(___fttol@lval+3)& (0+255),b
  9133                           
  9134                           ; BSR set to: 0
  9135  00250A  0E8E               	movlw	142
  9136  00250C  5FB0               	subwf	___fttol@exp1& (0+255),f,b
  9137                           
  9138                           ; BSR set to: 0
  9139  00250E  AFB0               	btfss	___fttol@exp1& (0+255),7,b
  9140  002510  D016               	goto	l905
  9141                           
  9142                           ; BSR set to: 0
  9143  002512  51B0               	movf	___fttol@exp1& (0+255),w,b
  9144  002514  0A80               	xorlw	128
  9145  002516  0F8F               	addlw	143
  9146  002518  B0D8               	btfsc	status,0,c
  9147  00251A  D009               	goto	l906
  9148                           
  9149                           ; BSR set to: 0
  9150  00251C  0E00               	movlw	0
  9151  00251E  6FA2               	movwf	?___fttol& (0+255),b
  9152  002520  0E00               	movlw	0
  9153  002522  6FA3               	movwf	(?___fttol+1)& (0+255),b
  9154  002524  0E00               	movlw	0
  9155  002526  6FA4               	movwf	(?___fttol+2)& (0+255),b
  9156  002528  0E00               	movlw	0
  9157  00252A  6FA5               	movwf	(?___fttol+3)& (0+255),b
  9158                           
  9159                           ; BSR set to: 0
  9160  00252C  0012               	return	
  9161  00252E                     l906:
  9162                           
  9163                           ; BSR set to: 0
  9164                           
  9165                           ; BSR set to: 0
  9166                           
  9167                           ; BSR set to: 0
  9168  00252E  90D8               	bcf	status,0,c
  9169  002530  33AF               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9170  002532  33AE               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9171  002534  33AD               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9172  002536  33AC               	rrcf	___fttol@lval& (0+255),f,b
  9173                           
  9174                           ; BSR set to: 0
  9175  002538  3FB0               	incfsz	___fttol@exp1& (0+255),f,b
  9176  00253A  D7F9               	goto	l906
  9177                           
  9178                           ; BSR set to: 0
  9179  00253C  D015               	goto	u5720
  9180  00253E                     l905:
  9181                           
  9182                           ; BSR set to: 0
  9183                           
  9184                           ; BSR set to: 0
  9185  00253E  0E17               	movlw	23
  9186  002540  65B0               	cpfsgt	___fttol@exp1& (0+255),b
  9187  002542  D00F               	goto	l911
  9188                           
  9189                           ; BSR set to: 0
  9190  002544  0E00               	movlw	0
  9191  002546  6FA2               	movwf	?___fttol& (0+255),b
  9192  002548  0E00               	movlw	0
  9193  00254A  6FA3               	movwf	(?___fttol+1)& (0+255),b
  9194  00254C  0E00               	movlw	0
  9195  00254E  6FA4               	movwf	(?___fttol+2)& (0+255),b
  9196  002550  0E00               	movlw	0
  9197  002552  6FA5               	movwf	(?___fttol+3)& (0+255),b
  9198                           
  9199                           ; BSR set to: 0
  9200  002554  0012               	return	
  9201  002556                     
  9202                           ; BSR set to: 0
  9203                           
  9204                           ; BSR set to: 0
  9205  002556  90D8               	bcf	status,0,c
  9206  002558  37AC               	rlcf	___fttol@lval& (0+255),f,b
  9207  00255A  37AD               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9208  00255C  37AE               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9209  00255E  37AF               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9210  002560  07B0               	decf	___fttol@exp1& (0+255),f,b
  9211  002562                     l911:
  9212                           
  9213                           ; BSR set to: 0
  9214                           
  9215                           ; BSR set to: 0
  9216  002562  51B0               	movf	___fttol@exp1& (0+255),w,b
  9217  002564  A4D8               	btfss	status,2,c
  9218  002566  D7F7               	goto	l912
  9219  002568                     u5720:
  9220                           
  9221                           ; BSR set to: 0
  9222                           
  9223                           ; BSR set to: 0
  9224                           
  9225                           ; BSR set to: 0
  9226  002568  51AB               	movf	___fttol@sign1& (0+255),w,b
  9227  00256A  B4D8               	btfsc	status,2,c
  9228  00256C  D008               	goto	l914
  9229                           
  9230                           ; BSR set to: 0
  9231  00256E  1FAF               	comf	(___fttol@lval+3)& (0+255),f,b
  9232  002570  1FAE               	comf	(___fttol@lval+2)& (0+255),f,b
  9233  002572  1FAD               	comf	(___fttol@lval+1)& (0+255),f,b
  9234  002574  6DAC               	negf	___fttol@lval& (0+255),b
  9235  002576  0E00               	movlw	0
  9236  002578  23AD               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9237  00257A  23AE               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9238  00257C  23AF               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9239  00257E                     l914:
  9240                           
  9241                           ; BSR set to: 0
  9242                           
  9243                           ; BSR set to: 0
  9244  00257E  C0AC  F0A2         	movff	___fttol@lval,?___fttol
  9245  002582  C0AD  F0A3         	movff	___fttol@lval+1,?___fttol+1
  9246  002586  C0AE  F0A4         	movff	___fttol@lval+2,?___fttol+2
  9247  00258A  C0AF  F0A5         	movff	___fttol@lval+3,?___fttol+3
  9248  00258E  0012               	return	
  9249  002590                     __end_of___fttol:
  9250                           	opt stack 0
  9251                           tblptru	equ	0xFF8
  9252                           tblptrh	equ	0xFF7
  9253                           tblptrl	equ	0xFF6
  9254                           tablat	equ	0xFF5
  9255                           prodh	equ	0xFF4
  9256                           prodl	equ	0xFF3
  9257                           intcon	equ	0xFF2
  9258                           intcon2	equ	0xFF1
  9259                           intcon3	equ	0xFF0
  9260                           postinc0	equ	0xFEE
  9261                           wreg	equ	0xFE8
  9262                           indf1	equ	0xFE7
  9263                           postdec1	equ	0xFE5
  9264                           fsr1h	equ	0xFE2
  9265                           fsr1l	equ	0xFE1
  9266                           indf2	equ	0xFDF
  9267                           postinc2	equ	0xFDE
  9268                           postdec2	equ	0xFDD
  9269                           fsr2h	equ	0xFDA
  9270                           fsr2l	equ	0xFD9
  9271                           status	equ	0xFD8
  9272                           
  9273 ;; *************** function ___ftsub *****************
  9274 ;; Defined at:
  9275 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;  f1              3   34[BANK0 ] float 
  9278 ;;  f2              3   37[BANK0 ] float 
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;		None
  9281 ;; Return value:  Size  Location     Type
  9282 ;;                  3   34[BANK0 ] float 
  9283 ;; Registers used:
  9284 ;;		wreg, status,2, status,0, cstack
  9285 ;; Tracked objects:
  9286 ;;		On entry : 0/0
  9287 ;;		On exit  : 0/0
  9288 ;;		Unchanged: 0/0
  9289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9290 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9293 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9294 ;;Total ram usage:        6 bytes
  9295 ;; Hardware stack levels used:    1
  9296 ;; Hardware stack levels required when called:    6
  9297 ;; This function calls:
  9298 ;;		___ftadd
  9299 ;; This function is called by:
  9300 ;;		_sprintf
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           	psect	text34
  9305  003178                     __ptext34:
  9306                           	opt stack 0
  9307  003178                     ___ftsub:
  9308                           	opt stack 22
  9309                           
  9310                           ; BSR set to: 0
  9311                           ;incstack = 0
  9312  003178  0100               	movlb	0	; () banked
  9313  00317A  51A5               	movf	___ftsub@f2& (0+255),w,b
  9314  00317C  11A6               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9315  00317E  11A7               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9316  003180  B4D8               	btfsc	status,2,c
  9317  003182  D006               	goto	l899
  9318                           
  9319                           ; BSR set to: 0
  9320  003184  0E00               	movlw	0
  9321  003186  1BA5               	xorwf	___ftsub@f2& (0+255),f,b
  9322  003188  0E00               	movlw	0
  9323  00318A  1BA6               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9324  00318C  0E80               	movlw	128
  9325  00318E  1BA7               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9326  003190                     l899:
  9327                           
  9328                           ; BSR set to: 0
  9329                           
  9330                           ; BSR set to: 0
  9331  003190  C0A2  F096         	movff	___ftsub@f1,___ftadd@f1
  9332  003194  C0A3  F097         	movff	___ftsub@f1+1,___ftadd@f1+1
  9333  003198  C0A4  F098         	movff	___ftsub@f1+2,___ftadd@f1+2
  9334  00319C  C0A5  F099         	movff	___ftsub@f2,___ftadd@f2
  9335  0031A0  C0A6  F09A         	movff	___ftsub@f2+1,___ftadd@f2+1
  9336  0031A4  C0A7  F09B         	movff	___ftsub@f2+2,___ftadd@f2+2
  9337  0031A8  EC72  F00F         	call	___ftadd	;wreg free
  9338  0031AC  C096  F0A2         	movff	?___ftadd,?___ftsub
  9339  0031B0  C097  F0A3         	movff	?___ftadd+1,?___ftsub+1
  9340  0031B4  C098  F0A4         	movff	?___ftadd+2,?___ftsub+2
  9341  0031B8  0012               	return	
  9342  0031BA                     __end_of___ftsub:
  9343                           	opt stack 0
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodh	equ	0xFF4
  9349                           prodl	equ	0xFF3
  9350                           intcon	equ	0xFF2
  9351                           intcon2	equ	0xFF1
  9352                           intcon3	equ	0xFF0
  9353                           postinc0	equ	0xFEE
  9354                           wreg	equ	0xFE8
  9355                           indf1	equ	0xFE7
  9356                           postdec1	equ	0xFE5
  9357                           fsr1h	equ	0xFE2
  9358                           fsr1l	equ	0xFE1
  9359                           indf2	equ	0xFDF
  9360                           postinc2	equ	0xFDE
  9361                           postdec2	equ	0xFDD
  9362                           fsr2h	equ	0xFDA
  9363                           fsr2l	equ	0xFD9
  9364                           status	equ	0xFD8
  9365                           
  9366 ;; *************** function ___ftadd *****************
  9367 ;; Defined at:
  9368 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;  f1              3   22[BANK0 ] float 
  9371 ;;  f2              3   25[BANK0 ] float 
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;  exp1            1   33[BANK0 ] unsigned char 
  9374 ;;  exp2            1   32[BANK0 ] unsigned char 
  9375 ;;  sign            1   31[BANK0 ] unsigned char 
  9376 ;; Return value:  Size  Location     Type
  9377 ;;                  3   22[BANK0 ] float 
  9378 ;; Registers used:
  9379 ;;		wreg, status,2, status,0, cstack
  9380 ;; Tracked objects:
  9381 ;;		On entry : 0/0
  9382 ;;		On exit  : 0/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9385 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9386 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9388 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9389 ;;Total ram usage:       12 bytes
  9390 ;; Hardware stack levels used:    1
  9391 ;; Hardware stack levels required when called:    5
  9392 ;; This function calls:
  9393 ;;		___ftpack
  9394 ;; This function is called by:
  9395 ;;		_autoCool
  9396 ;;		_set_pwm1_percent
  9397 ;;		_sprintf
  9398 ;;		___ftsub
  9399 ;;		_autoHeat
  9400 ;;		_set_pwm1_voltage
  9401 ;;		_set_pwm1_general
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text35
  9406  001EE4                     __ptext35:
  9407                           	opt stack 0
  9408  001EE4                     ___ftadd:
  9409                           	opt stack 22
  9410                           
  9411                           ;incstack = 0
  9412  001EE4  C098  F09C         	movff	___ftadd@f1+2,??___ftadd
  9413  001EE8  0100               	movlb	0	; () banked
  9414  001EEA  6B9D               	clrf	(??___ftadd+1)& (0+255),b
  9415  001EEC  6B9E               	clrf	(??___ftadd+2)& (0+255),b
  9416  001EEE  3597               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9417  001EF0  379C               	rlcf	??___ftadd& (0+255),f,b
  9418  001EF2  E301               	bnc	u4921
  9419  001EF4  819D               	bsf	(??___ftadd+1)& (0+255),0,b
  9420  001EF6                     u4921:
  9421  001EF6  519C               	movf	??___ftadd& (0+255),w,b
  9422  001EF8  6FA1               	movwf	___ftadd@exp1& (0+255),b
  9423  001EFA  C09B  F09C         	movff	___ftadd@f2+2,??___ftadd
  9424  001EFE  6B9D               	clrf	(??___ftadd+1)& (0+255),b
  9425  001F00  6B9E               	clrf	(??___ftadd+2)& (0+255),b
  9426  001F02  359A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9427  001F04  379C               	rlcf	??___ftadd& (0+255),f,b
  9428  001F06  E301               	bnc	u4931
  9429  001F08  819D               	bsf	(??___ftadd+1)& (0+255),0,b
  9430  001F0A                     u4931:
  9431  001F0A  519C               	movf	??___ftadd& (0+255),w,b
  9432  001F0C  6FA0               	movwf	___ftadd@exp2& (0+255),b
  9433                           
  9434                           ; BSR set to: 0
  9435  001F0E  51A1               	movf	___ftadd@exp1& (0+255),w,b
  9436  001F10  B4D8               	btfsc	status,2,c
  9437  001F12  D00B               	goto	u4960
  9438                           
  9439                           ; BSR set to: 0
  9440  001F14  51A0               	movf	___ftadd@exp2& (0+255),w,b
  9441  001F16  5DA1               	subwf	___ftadd@exp1& (0+255),w,b
  9442  001F18  B0D8               	btfsc	status,0,c
  9443  001F1A  D00E               	goto	l817
  9444                           
  9445                           ; BSR set to: 0
  9446  001F1C  51A1               	movf	___ftadd@exp1& (0+255),w,b
  9447  001F1E  0800               	sublw	0
  9448  001F20  25A0               	addwf	___ftadd@exp2& (0+255),w,b
  9449  001F22  6F9C               	movwf	??___ftadd& (0+255),b
  9450  001F24  0E18               	movlw	24
  9451  001F26  659C               	cpfsgt	??___ftadd& (0+255),b
  9452  001F28  D007               	goto	l817
  9453  001F2A                     u4960:
  9454                           
  9455                           ; BSR set to: 0
  9456  001F2A  C099  F096         	movff	___ftadd@f2,?___ftadd
  9457  001F2E  C09A  F097         	movff	___ftadd@f2+1,?___ftadd+1
  9458  001F32  C09B  F098         	movff	___ftadd@f2+2,?___ftadd+2
  9459  001F36  0012               	return	
  9460  001F38                     l817:
  9461                           
  9462                           ; BSR set to: 0
  9463                           
  9464                           ; BSR set to: 0
  9465  001F38  51A0               	movf	___ftadd@exp2& (0+255),w,b
  9466  001F3A  B4D8               	btfsc	status,2,c
  9467  001F3C  D00B               	goto	u4990
  9468                           
  9469                           ; BSR set to: 0
  9470  001F3E  51A1               	movf	___ftadd@exp1& (0+255),w,b
  9471  001F40  5DA0               	subwf	___ftadd@exp2& (0+255),w,b
  9472  001F42  B0D8               	btfsc	status,0,c
  9473  001F44  D00E               	goto	l821
  9474                           
  9475                           ; BSR set to: 0
  9476  001F46  51A0               	movf	___ftadd@exp2& (0+255),w,b
  9477  001F48  0800               	sublw	0
  9478  001F4A  25A1               	addwf	___ftadd@exp1& (0+255),w,b
  9479  001F4C  6F9C               	movwf	??___ftadd& (0+255),b
  9480  001F4E  0E18               	movlw	24
  9481  001F50  659C               	cpfsgt	??___ftadd& (0+255),b
  9482  001F52  D007               	goto	l821
  9483  001F54                     u4990:
  9484                           
  9485                           ; BSR set to: 0
  9486  001F54  C096  F096         	movff	___ftadd@f1,?___ftadd
  9487  001F58  C097  F097         	movff	___ftadd@f1+1,?___ftadd+1
  9488  001F5C  C098  F098         	movff	___ftadd@f1+2,?___ftadd+2
  9489  001F60  0012               	return	
  9490  001F62                     l821:
  9491                           
  9492                           ; BSR set to: 0
  9493                           
  9494                           ; BSR set to: 0
  9495  001F62  0E06               	movlw	6
  9496  001F64  6F9F               	movwf	___ftadd@sign& (0+255),b
  9497                           
  9498                           ; BSR set to: 0
  9499  001F66  BF98               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  9500                           
  9501                           ; BSR set to: 0
  9502  001F68  8F9F               	bsf	___ftadd@sign& (0+255),7,b
  9503                           
  9504                           ; BSR set to: 0
  9505                           
  9506                           ; BSR set to: 0
  9507  001F6A  BF9B               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  9508                           
  9509                           ; BSR set to: 0
  9510  001F6C  8D9F               	bsf	___ftadd@sign& (0+255),6,b
  9511                           
  9512                           ; BSR set to: 0
  9513  001F6E  8F97               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9514                           
  9515                           ; BSR set to: 0
  9516  001F70  0EFF               	movlw	255
  9517  001F72  1796               	andwf	___ftadd@f1& (0+255),f,b
  9518  001F74  0EFF               	movlw	255
  9519  001F76  1797               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9520  001F78  0E00               	movlw	0
  9521  001F7A  1798               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9522  001F7C  8F9A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9523                           
  9524                           ; BSR set to: 0
  9525  001F7E  0EFF               	movlw	255
  9526  001F80  1799               	andwf	___ftadd@f2& (0+255),f,b
  9527  001F82  0EFF               	movlw	255
  9528  001F84  179A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9529  001F86  0E00               	movlw	0
  9530  001F88  179B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9531                           
  9532                           ; BSR set to: 0
  9533  001F8A  51A0               	movf	___ftadd@exp2& (0+255),w,b
  9534  001F8C  5DA1               	subwf	___ftadd@exp1& (0+255),w,b
  9535  001F8E  B0D8               	btfsc	status,0,c
  9536  001F90  D01B               	goto	l826
  9537  001F92                     u5020:
  9538                           
  9539                           ; BSR set to: 0
  9540                           
  9541                           ; BSR set to: 0
  9542  001F92  90D8               	bcf	status,0,c
  9543  001F94  3799               	rlcf	___ftadd@f2& (0+255),f,b
  9544  001F96  379A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9545  001F98  379B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9546  001F9A  07A0               	decf	___ftadd@exp2& (0+255),f,b
  9547                           
  9548                           ; BSR set to: 0
  9549  001F9C  51A1               	movf	___ftadd@exp1& (0+255),w,b
  9550  001F9E  19A0               	xorwf	___ftadd@exp2& (0+255),w,b
  9551  001FA0  B4D8               	btfsc	status,2,c
  9552  001FA2  D00D               	goto	l831
  9553                           
  9554                           ; BSR set to: 0
  9555  001FA4  079F               	decf	___ftadd@sign& (0+255),f,b
  9556  001FA6  C09F  F09C         	movff	___ftadd@sign,??___ftadd
  9557  001FAA  0E07               	movlw	7
  9558  001FAC  179C               	andwf	??___ftadd& (0+255),f,b
  9559  001FAE  B4D8               	btfsc	status,2,c
  9560  001FB0  D006               	goto	l831
  9561  001FB2  D7EF               	goto	u5020
  9562  001FB4                     
  9563                           ; BSR set to: 0
  9564                           
  9565                           ; BSR set to: 0
  9566  001FB4  90D8               	bcf	status,0,c
  9567  001FB6  3398               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9568  001FB8  3397               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9569  001FBA  3396               	rrcf	___ftadd@f1& (0+255),f,b
  9570  001FBC  2BA1               	incf	___ftadd@exp1& (0+255),f,b
  9571  001FBE                     l831:
  9572                           
  9573                           ; BSR set to: 0
  9574                           
  9575                           ; BSR set to: 0
  9576  001FBE  51A0               	movf	___ftadd@exp2& (0+255),w,b
  9577  001FC0  19A1               	xorwf	___ftadd@exp1& (0+255),w,b
  9578  001FC2  B4D8               	btfsc	status,2,c
  9579  001FC4  D01F               	goto	u5090
  9580  001FC6  D7F6               	goto	l832
  9581  001FC8                     l826:
  9582                           
  9583                           ; BSR set to: 0
  9584                           
  9585                           ; BSR set to: 0
  9586  001FC8  51A1               	movf	___ftadd@exp1& (0+255),w,b
  9587  001FCA  5DA0               	subwf	___ftadd@exp2& (0+255),w,b
  9588  001FCC  B0D8               	btfsc	status,0,c
  9589  001FCE  D01A               	goto	u5090
  9590  001FD0                     u5060:
  9591                           
  9592                           ; BSR set to: 0
  9593                           
  9594                           ; BSR set to: 0
  9595  001FD0  90D8               	bcf	status,0,c
  9596  001FD2  3796               	rlcf	___ftadd@f1& (0+255),f,b
  9597  001FD4  3797               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9598  001FD6  3798               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9599  001FD8  07A1               	decf	___ftadd@exp1& (0+255),f,b
  9600                           
  9601                           ; BSR set to: 0
  9602  001FDA  51A1               	movf	___ftadd@exp1& (0+255),w,b
  9603  001FDC  19A0               	xorwf	___ftadd@exp2& (0+255),w,b
  9604  001FDE  B4D8               	btfsc	status,2,c
  9605  001FE0  D00D               	goto	l840
  9606                           
  9607                           ; BSR set to: 0
  9608  001FE2  079F               	decf	___ftadd@sign& (0+255),f,b
  9609  001FE4  C09F  F09C         	movff	___ftadd@sign,??___ftadd
  9610  001FE8  0E07               	movlw	7
  9611  001FEA  179C               	andwf	??___ftadd& (0+255),f,b
  9612  001FEC  B4D8               	btfsc	status,2,c
  9613  001FEE  D006               	goto	l840
  9614  001FF0  D7EF               	goto	u5060
  9615  001FF2                     
  9616                           ; BSR set to: 0
  9617                           
  9618                           ; BSR set to: 0
  9619  001FF2  90D8               	bcf	status,0,c
  9620  001FF4  339B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9621  001FF6  339A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9622  001FF8  3399               	rrcf	___ftadd@f2& (0+255),f,b
  9623  001FFA  2BA0               	incf	___ftadd@exp2& (0+255),f,b
  9624  001FFC                     l840:
  9625                           
  9626                           ; BSR set to: 0
  9627                           
  9628                           ; BSR set to: 0
  9629  001FFC  51A0               	movf	___ftadd@exp2& (0+255),w,b
  9630  001FFE  19A1               	xorwf	___ftadd@exp1& (0+255),w,b
  9631  002000  A4D8               	btfss	status,2,c
  9632  002002  D7F7               	goto	l841
  9633  002004                     u5090:
  9634                           
  9635                           ; BSR set to: 0
  9636                           
  9637                           ; BSR set to: 0
  9638                           
  9639                           ; BSR set to: 0
  9640  002004  AF9F               	btfss	___ftadd@sign& (0+255),7,b
  9641  002006  D00C               	goto	l843
  9642                           
  9643                           ; BSR set to: 0
  9644  002008  0EFF               	movlw	255
  9645  00200A  1B96               	xorwf	___ftadd@f1& (0+255),f,b
  9646  00200C  0EFF               	movlw	255
  9647  00200E  1B97               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9648  002010  0EFF               	movlw	255
  9649  002012  1B98               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9650  002014  0E01               	movlw	1
  9651  002016  2796               	addwf	___ftadd@f1& (0+255),f,b
  9652  002018  0E00               	movlw	0
  9653  00201A  2397               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9654  00201C  0E00               	movlw	0
  9655  00201E  2398               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9656  002020                     l843:
  9657                           
  9658                           ; BSR set to: 0
  9659  002020  AD9F               	btfss	___ftadd@sign& (0+255),6,b
  9660  002022  D00C               	goto	l844
  9661                           
  9662                           ; BSR set to: 0
  9663  002024  0EFF               	movlw	255
  9664  002026  1B99               	xorwf	___ftadd@f2& (0+255),f,b
  9665  002028  0EFF               	movlw	255
  9666  00202A  1B9A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9667  00202C  0EFF               	movlw	255
  9668  00202E  1B9B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9669  002030  0E01               	movlw	1
  9670  002032  2799               	addwf	___ftadd@f2& (0+255),f,b
  9671  002034  0E00               	movlw	0
  9672  002036  239A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9673  002038  0E00               	movlw	0
  9674  00203A  239B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9675  00203C                     l844:
  9676                           
  9677                           ; BSR set to: 0
  9678                           
  9679                           ; BSR set to: 0
  9680  00203C  0E00               	movlw	0
  9681  00203E  6F9F               	movwf	___ftadd@sign& (0+255),b
  9682                           
  9683                           ; BSR set to: 0
  9684  002040  5196               	movf	___ftadd@f1& (0+255),w,b
  9685  002042  2799               	addwf	___ftadd@f2& (0+255),f,b
  9686  002044  5197               	movf	(___ftadd@f1+1)& (0+255),w,b
  9687  002046  239A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9688  002048  5198               	movf	(___ftadd@f1+2)& (0+255),w,b
  9689  00204A  239B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9690                           
  9691                           ; BSR set to: 0
  9692  00204C  AF9B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9693  00204E  D00E               	goto	l845
  9694                           
  9695                           ; BSR set to: 0
  9696  002050  0EFF               	movlw	255
  9697  002052  1B99               	xorwf	___ftadd@f2& (0+255),f,b
  9698  002054  0EFF               	movlw	255
  9699  002056  1B9A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9700  002058  0EFF               	movlw	255
  9701  00205A  1B9B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9702  00205C  0E01               	movlw	1
  9703  00205E  2799               	addwf	___ftadd@f2& (0+255),f,b
  9704  002060  0E00               	movlw	0
  9705  002062  239A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9706  002064  0E00               	movlw	0
  9707  002066  239B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9708                           
  9709                           ; BSR set to: 0
  9710  002068  0E01               	movlw	1
  9711  00206A  6F9F               	movwf	___ftadd@sign& (0+255),b
  9712  00206C                     l845:
  9713                           
  9714                           ; BSR set to: 0
  9715                           
  9716                           ; BSR set to: 0
  9717  00206C  C099  F029         	movff	___ftadd@f2,___ftpack@arg
  9718  002070  C09A  F02A         	movff	___ftadd@f2+1,___ftpack@arg+1
  9719  002074  C09B  F02B         	movff	___ftadd@f2+2,___ftpack@arg+2
  9720  002078  C0A1  F02C         	movff	___ftadd@exp1,___ftpack@exp
  9721  00207C  C09F  F02D         	movff	___ftadd@sign,___ftpack@sign
  9722  002080  EC70  F014         	call	___ftpack	;wreg free
  9723  002084  C029  F096         	movff	?___ftpack,?___ftadd
  9724  002088  C02A  F097         	movff	?___ftpack+1,?___ftadd+1
  9725  00208C  C02B  F098         	movff	?___ftpack+2,?___ftadd+2
  9726  002090  0012               	return	
  9727  002092                     __end_of___ftadd:
  9728                           	opt stack 0
  9729                           tblptru	equ	0xFF8
  9730                           tblptrh	equ	0xFF7
  9731                           tblptrl	equ	0xFF6
  9732                           tablat	equ	0xFF5
  9733                           prodh	equ	0xFF4
  9734                           prodl	equ	0xFF3
  9735                           intcon	equ	0xFF2
  9736                           intcon2	equ	0xFF1
  9737                           intcon3	equ	0xFF0
  9738                           postinc0	equ	0xFEE
  9739                           wreg	equ	0xFE8
  9740                           indf1	equ	0xFE7
  9741                           postdec1	equ	0xFE5
  9742                           fsr1h	equ	0xFE2
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           
  9751 ;; *************** function ___ftneg *****************
  9752 ;; Defined at:
  9753 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  f1              3    0[BANK0 ] float 
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;		None
  9758 ;; Return value:  Size  Location     Type
  9759 ;;                  3    0[BANK0 ] float 
  9760 ;; Registers used:
  9761 ;;		wreg, status,2, status,0
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9767 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;Total ram usage:        3 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    4
  9774 ;; This function calls:
  9775 ;;		Nothing
  9776 ;; This function is called by:
  9777 ;;		_autoCool
  9778 ;;		_sprintf
  9779 ;;		_autoHeat
  9780 ;;		_set_pwm1_general
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           	psect	text36
  9785  00331E                     __ptext36:
  9786                           	opt stack 0
  9787  00331E                     ___ftneg:
  9788                           	opt stack 24
  9789                           
  9790                           ;incstack = 0
  9791  00331E  0100               	movlb	0	; () banked
  9792  003320  5180               	movf	___ftneg@f1& (0+255),w,b
  9793  003322  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  9794  003324  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  9795  003326  B4D8               	btfsc	status,2,c
  9796  003328  D006               	goto	l893
  9797                           
  9798                           ; BSR set to: 0
  9799  00332A  0E00               	movlw	0
  9800  00332C  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  9801  00332E  0E00               	movlw	0
  9802  003330  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  9803  003332  0E80               	movlw	128
  9804  003334  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  9805  003336                     l893:
  9806                           
  9807                           ; BSR set to: 0
  9808  003336  C080  F080         	movff	___ftneg@f1,?___ftneg
  9809  00333A  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  9810  00333E  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  9811                           
  9812                           ; BSR set to: 0
  9813  003342  0012               	return		;funcret
  9814  003344                     __end_of___ftneg:
  9815                           	opt stack 0
  9816                           tblptru	equ	0xFF8
  9817                           tblptrh	equ	0xFF7
  9818                           tblptrl	equ	0xFF6
  9819                           tablat	equ	0xFF5
  9820                           prodh	equ	0xFF4
  9821                           prodl	equ	0xFF3
  9822                           intcon	equ	0xFF2
  9823                           intcon2	equ	0xFF1
  9824                           intcon3	equ	0xFF0
  9825                           postinc0	equ	0xFEE
  9826                           wreg	equ	0xFE8
  9827                           indf1	equ	0xFE7
  9828                           postdec1	equ	0xFE5
  9829                           fsr1h	equ	0xFE2
  9830                           fsr1l	equ	0xFE1
  9831                           indf2	equ	0xFDF
  9832                           postinc2	equ	0xFDE
  9833                           postdec2	equ	0xFDD
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838 ;; *************** function ___ftge *****************
  9839 ;; Defined at:
  9840 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9841 ;; Parameters:    Size  Location     Type
  9842 ;;  ff1             3   34[BANK0 ] float 
  9843 ;;  ff2             3   37[BANK0 ] float 
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;		None
  9846 ;; Return value:  Size  Location     Type
  9847 ;;		None               void
  9848 ;; Registers used:
  9849 ;;		wreg, status,2, status,0
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9855 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;Total ram usage:        9 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    4
  9862 ;; This function calls:
  9863 ;;		Nothing
  9864 ;; This function is called by:
  9865 ;;		_autoCool
  9866 ;;		_main
  9867 ;;		_sprintf
  9868 ;;		_autoHeat
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           	psect	text37
  9873  002B7C                     __ptext37:
  9874                           	opt stack 0
  9875  002B7C                     ___ftge:
  9876                           	opt stack 24
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;incstack = 0
  9880  002B7C  0100               	movlb	0	; () banked
  9881  002B7E  AFA4               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9882  002B80  D016               	goto	l875
  9883                           
  9884                           ; BSR set to: 0
  9885  002B82  C0A2  F0A8         	movff	___ftge@ff1,??___ftge
  9886  002B86  C0A3  F0A9         	movff	___ftge@ff1+1,??___ftge+1
  9887  002B8A  C0A4  F0AA         	movff	___ftge@ff1+2,??___ftge+2
  9888  002B8E  1FA8               	comf	??___ftge& (0+255),f,b
  9889  002B90  1FA9               	comf	(??___ftge+1)& (0+255),f,b
  9890  002B92  1FAA               	comf	(??___ftge+2)& (0+255),f,b
  9891  002B94  2BA8               	incf	??___ftge& (0+255),f,b
  9892  002B96  0E00               	movlw	0
  9893  002B98  23A9               	addwfc	(??___ftge+1)& (0+255),f,b
  9894  002B9A  23AA               	addwfc	(??___ftge+2)& (0+255),f,b
  9895  002B9C  0E00               	movlw	0
  9896  002B9E  25A8               	addwf	??___ftge& (0+255),w,b
  9897  002BA0  6FA2               	movwf	___ftge@ff1& (0+255),b
  9898  002BA2  0E00               	movlw	0
  9899  002BA4  21A9               	addwfc	(??___ftge+1)& (0+255),w,b
  9900  002BA6  6FA3               	movwf	(___ftge@ff1+1)& (0+255),b
  9901  002BA8  0E80               	movlw	128
  9902  002BAA  21AA               	addwfc	(??___ftge+2)& (0+255),w,b
  9903  002BAC  6FA4               	movwf	(___ftge@ff1+2)& (0+255),b
  9904  002BAE                     l875:
  9905                           
  9906                           ; BSR set to: 0
  9907                           
  9908                           ; BSR set to: 0
  9909  002BAE  AFA7               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9910  002BB0  D016               	goto	l876
  9911                           
  9912                           ; BSR set to: 0
  9913  002BB2  C0A5  F0A8         	movff	___ftge@ff2,??___ftge
  9914  002BB6  C0A6  F0A9         	movff	___ftge@ff2+1,??___ftge+1
  9915  002BBA  C0A7  F0AA         	movff	___ftge@ff2+2,??___ftge+2
  9916  002BBE  1FA8               	comf	??___ftge& (0+255),f,b
  9917  002BC0  1FA9               	comf	(??___ftge+1)& (0+255),f,b
  9918  002BC2  1FAA               	comf	(??___ftge+2)& (0+255),f,b
  9919  002BC4  2BA8               	incf	??___ftge& (0+255),f,b
  9920  002BC6  0E00               	movlw	0
  9921  002BC8  23A9               	addwfc	(??___ftge+1)& (0+255),f,b
  9922  002BCA  23AA               	addwfc	(??___ftge+2)& (0+255),f,b
  9923  002BCC  0E00               	movlw	0
  9924  002BCE  25A8               	addwf	??___ftge& (0+255),w,b
  9925  002BD0  6FA5               	movwf	___ftge@ff2& (0+255),b
  9926  002BD2  0E00               	movlw	0
  9927  002BD4  21A9               	addwfc	(??___ftge+1)& (0+255),w,b
  9928  002BD6  6FA6               	movwf	(___ftge@ff2+1)& (0+255),b
  9929  002BD8  0E80               	movlw	128
  9930  002BDA  21AA               	addwfc	(??___ftge+2)& (0+255),w,b
  9931  002BDC  6FA7               	movwf	(___ftge@ff2+2)& (0+255),b
  9932  002BDE                     l876:
  9933                           
  9934                           ; BSR set to: 0
  9935                           
  9936                           ; BSR set to: 0
  9937  002BDE  0E00               	movlw	0
  9938  002BE0  1BA2               	xorwf	___ftge@ff1& (0+255),f,b
  9939  002BE2  0E00               	movlw	0
  9940  002BE4  1BA3               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9941  002BE6  0E80               	movlw	128
  9942  002BE8  1BA4               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9943                           
  9944                           ; BSR set to: 0
  9945  002BEA  0E00               	movlw	0
  9946  002BEC  1BA5               	xorwf	___ftge@ff2& (0+255),f,b
  9947  002BEE  0E00               	movlw	0
  9948  002BF0  1BA6               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9949  002BF2  0E80               	movlw	128
  9950  002BF4  1BA7               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9951  002BF6  51A5               	movf	___ftge@ff2& (0+255),w,b
  9952  002BF8  5DA2               	subwf	___ftge@ff1& (0+255),w,b
  9953  002BFA  51A6               	movf	(___ftge@ff2+1)& (0+255),w,b
  9954  002BFC  59A3               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9955  002BFE  51A7               	movf	(___ftge@ff2+2)& (0+255),w,b
  9956  002C00  59A4               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9957  002C02  B0D8               	btfsc	status,0,c
  9958  002C04  D002               	goto	l4571
  9959                           
  9960                           ; BSR set to: 0
  9961  002C06  90D8               	bcf	status,0,c
  9962  002C08  0012               	return	
  9963  002C0A                     l4571:
  9964                           
  9965                           ; BSR set to: 0
  9966                           
  9967                           ; BSR set to: 0
  9968  002C0A  80D8               	bsf	status,0,c
  9969                           
  9970                           ; BSR set to: 0
  9971  002C0C  0012               	return	
  9972  002C0E                     __end_of___ftge:
  9973                           	opt stack 0
  9974                           tblptru	equ	0xFF8
  9975                           tblptrh	equ	0xFF7
  9976                           tblptrl	equ	0xFF6
  9977                           tablat	equ	0xFF5
  9978                           prodh	equ	0xFF4
  9979                           prodl	equ	0xFF3
  9980                           intcon	equ	0xFF2
  9981                           intcon2	equ	0xFF1
  9982                           intcon3	equ	0xFF0
  9983                           postinc0	equ	0xFEE
  9984                           wreg	equ	0xFE8
  9985                           indf1	equ	0xFE7
  9986                           postdec1	equ	0xFE5
  9987                           fsr1h	equ	0xFE2
  9988                           fsr1l	equ	0xFE1
  9989                           indf2	equ	0xFDF
  9990                           postinc2	equ	0xFDE
  9991                           postdec2	equ	0xFDD
  9992                           fsr2h	equ	0xFDA
  9993                           fsr2l	equ	0xFD9
  9994                           status	equ	0xFD8
  9995                           
  9996 ;; *************** function _set_pwm1_raw *****************
  9997 ;; Defined at:
  9998 ;;		line 14 in file "my_pwm.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;  raw_value       2   40[COMRAM] unsigned int 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;		None
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  1    wreg      void 
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10012 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;Total ram usage:        4 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    4
 10019 ;; This function calls:
 10020 ;;		Nothing
 10021 ;; This function is called by:
 10022 ;;		_CoolMode
 10023 ;;		_set_pwm1_percent
 10024 ;;		_set_pwm1_voltage
 10025 ;;		_set_pwm1_general
 10026 ;; This function uses a non-reentrant model
 10027 ;;
 10028                           
 10029                           	psect	text38
 10030  00329C                     __ptext38:
 10031                           	opt stack 0
 10032  00329C                     _set_pwm1_raw:
 10033                           	opt stack 24
 10034                           
 10035                           ;my_pwm.c: 16: CCPR1L = (raw_value >> 2) & 0x00FF;
 10036                           
 10037                           ; BSR set to: 0
 10038                           ;incstack = 0
 10039  00329C  C029  F02B         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
 10040  0032A0  C02A  F02C         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
 10041  0032A4  90D8               	bcf	status,0,c
 10042  0032A6  322C               	rrcf	??_set_pwm1_raw+1,f,c
 10043  0032A8  322B               	rrcf	??_set_pwm1_raw,f,c
 10044  0032AA  90D8               	bcf	status,0,c
 10045  0032AC  322C               	rrcf	??_set_pwm1_raw+1,f,c
 10046  0032AE  322B               	rrcf	??_set_pwm1_raw,f,c
 10047  0032B0  502B               	movf	??_set_pwm1_raw,w,c
 10048  0032B2  6EBE               	movwf	4030,c	;volatile
 10049                           
 10050                           ;my_pwm.c: 17: CCP1CONbits.DC1B = raw_value & 0x0003;
 10051  0032B4  C029  F02B         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
 10052  0032B8  0E03               	movlw	3
 10053  0032BA  162B               	andwf	??_set_pwm1_raw,f,c
 10054  0032BC  3A2B               	swapf	??_set_pwm1_raw,f,c
 10055  0032BE  50BD               	movf	4029,w,c	;volatile
 10056  0032C0  182B               	xorwf	??_set_pwm1_raw,w,c
 10057  0032C2  0BCF               	andlw	-49
 10058  0032C4  182B               	xorwf	??_set_pwm1_raw,w,c
 10059  0032C6  6EBD               	movwf	4029,c	;volatile
 10060  0032C8  0012               	return		;funcret
 10061  0032CA                     __end_of_set_pwm1_raw:
 10062                           	opt stack 0
 10063                           tblptru	equ	0xFF8
 10064                           tblptrh	equ	0xFF7
 10065                           tblptrl	equ	0xFF6
 10066                           tablat	equ	0xFF5
 10067                           prodh	equ	0xFF4
 10068                           prodl	equ	0xFF3
 10069                           intcon	equ	0xFF2
 10070                           intcon2	equ	0xFF1
 10071                           intcon3	equ	0xFF0
 10072                           postinc0	equ	0xFEE
 10073                           wreg	equ	0xFE8
 10074                           indf1	equ	0xFE7
 10075                           postdec1	equ	0xFE5
 10076                           fsr1h	equ	0xFE2
 10077                           fsr1l	equ	0xFE1
 10078                           indf2	equ	0xFDF
 10079                           postinc2	equ	0xFDE
 10080                           postdec2	equ	0xFDD
 10081                           fsr2h	equ	0xFDA
 10082                           fsr2l	equ	0xFD9
 10083                           status	equ	0xFD8
 10084                           
 10085 ;; *************** function _read_adc_raw_no_lib *****************
 10086 ;; Defined at:
 10087 ;;		line 32 in file "my_adc.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;  channel         1    wreg     unsigned char 
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;  channel         1   44[COMRAM] unsigned char 
 10092 ;;  raw_value       2   45[COMRAM] int 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  2   40[COMRAM] int 
 10095 ;; Registers used:
 10096 ;;		wreg, status,2, status,0
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10102 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;Total ram usage:        7 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    4
 10109 ;; This function calls:
 10110 ;;		Nothing
 10111 ;; This function is called by:
 10112 ;;		_OffMode
 10113 ;;		_CoolMode
 10114 ;;		_heatMode
 10115 ;;		_autoCool
 10116 ;;		_printingOnScreen
 10117 ;;		_main
 10118 ;;		_read_adc_voltage
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           	psect	text39
 10123  0031FC                     __ptext39:
 10124                           	opt stack 0
 10125  0031FC                     _read_adc_raw_no_lib:
 10126                           	opt stack 25
 10127                           
 10128                           ;incstack = 0
 10129                           ;read_adc_raw_no_lib@channel stored from wreg
 10130  0031FC  6E2D               	movwf	read_adc_raw_no_lib@channel,c
 10131                           
 10132                           ;my_adc.c: 33: int raw_value;
 10133                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
 10134  0031FE  C02D  F02B         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
 10135  003202  462B               	rlncf	??_read_adc_raw_no_lib,f,c
 10136  003204  462B               	rlncf	??_read_adc_raw_no_lib,f,c
 10137  003206  50C2               	movf	4034,w,c	;volatile
 10138  003208  182B               	xorwf	??_read_adc_raw_no_lib,w,c
 10139  00320A  0BC3               	andlw	-61
 10140  00320C  182B               	xorwf	??_read_adc_raw_no_lib,w,c
 10141  00320E  6EC2               	movwf	4034,c	;volatile
 10142                           
 10143                           ;my_adc.c: 37: ADCON0bits.GO = 1;
 10144  003210  82C2               	bsf	4034,1,c	;volatile
 10145  003212  B2C2               	btfsc	4034,1,c	;volatile
 10146  003214  D7FE               	goto	l342
 10147                           
 10148                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
 10149  003216  50C3               	movf	4035,w,c	;volatile
 10150  003218  CFC4 F02B          	movff	4036,??_read_adc_raw_no_lib	;volatile
 10151  00321C  6A2C               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
 10152  00321E  C02B  F02C         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
 10153  003222  6A2B               	clrf	??_read_adc_raw_no_lib,c
 10154  003224  102B               	iorwf	??_read_adc_raw_no_lib,w,c
 10155  003226  6E2E               	movwf	read_adc_raw_no_lib@raw_value,c
 10156  003228  502C               	movf	??_read_adc_raw_no_lib+1,w,c
 10157  00322A  6E2F               	movwf	read_adc_raw_no_lib@raw_value+1,c
 10158                           
 10159                           ;my_adc.c: 45: return raw_value;
 10160  00322C  C02E  F029         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
 10161  003230  C02F  F02A         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
 10162  003234  0012               	return	
 10163  003236                     __end_of_read_adc_raw_no_lib:
 10164                           	opt stack 0
 10165                           tblptru	equ	0xFF8
 10166                           tblptrh	equ	0xFF7
 10167                           tblptrl	equ	0xFF6
 10168                           tablat	equ	0xFF5
 10169                           prodh	equ	0xFF4
 10170                           prodl	equ	0xFF3
 10171                           intcon	equ	0xFF2
 10172                           intcon2	equ	0xFF1
 10173                           intcon3	equ	0xFF0
 10174                           postinc0	equ	0xFEE
 10175                           wreg	equ	0xFE8
 10176                           indf1	equ	0xFE7
 10177                           postdec1	equ	0xFE5
 10178                           fsr1h	equ	0xFE2
 10179                           fsr1l	equ	0xFE1
 10180                           indf2	equ	0xFDF
 10181                           postinc2	equ	0xFDE
 10182                           postdec2	equ	0xFDD
 10183                           fsr2h	equ	0xFDA
 10184                           fsr2l	equ	0xFD9
 10185                           status	equ	0xFD8
 10186                           
 10187 ;; *************** function _lcd_puts *****************
 10188 ;; Defined at:
 10189 ;;		line 120 in file "lcd_x8.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;  s               2   54[COMRAM] PTR unsigned char 
 10192 ;;		 -> Buffer(32), 
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;		None
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  1    wreg      void 
 10197 ;; Registers used:
 10198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10208 ;;Total ram usage:        2 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    9
 10211 ;; This function calls:
 10212 ;;		_lcd_putc
 10213 ;; This function is called by:
 10214 ;;		_OffMode
 10215 ;;		_CoolMode
 10216 ;;		_heatMode
 10217 ;;		_autoCool
 10218 ;;		_printingOnScreen
 10219 ;;		_autoHeat
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           	psect	text40
 10224  0033B2                     __ptext40:
 10225                           	opt stack 0
 10226  0033B2                     _lcd_puts:
 10227                           	opt stack 20
 10228                           
 10229                           ;lcd_x8.c: 121: while (*s) {
 10230                           
 10231                           ;incstack = 0
 10232  0033B2  D009               	goto	l316
 10233  0033B4                     
 10234                           ;lcd_x8.c: 122: lcd_putc(*s);
 10235  0033B4  C037  FFD9         	movff	lcd_puts@s,fsr2l
 10236  0033B8  C038  FFDA         	movff	lcd_puts@s+1,fsr2h
 10237  0033BC  50DF               	movf	indf2,w,c
 10238  0033BE  ECF8  F017         	call	_lcd_putc
 10239                           
 10240                           ;lcd_x8.c: 123: s++;
 10241  0033C2  4A37               	infsnz	lcd_puts@s,f,c
 10242  0033C4  2A38               	incf	lcd_puts@s+1,f,c
 10243  0033C6                     l316:
 10244  0033C6  C037  FFD9         	movff	lcd_puts@s,fsr2l
 10245  0033CA  C038  FFDA         	movff	lcd_puts@s+1,fsr2h
 10246  0033CE  50DF               	movf	indf2,w,c
 10247  0033D0  B4D8               	btfsc	status,2,c
 10248  0033D2  0012               	return	
 10249  0033D4  D7EF               	goto	l317
 10250  0033D6                     __end_of_lcd_puts:
 10251                           	opt stack 0
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           intcon2	equ	0xFF1
 10260                           intcon3	equ	0xFF0
 10261                           postinc0	equ	0xFEE
 10262                           wreg	equ	0xFE8
 10263                           indf1	equ	0xFE7
 10264                           postdec1	equ	0xFE5
 10265                           fsr1h	equ	0xFE2
 10266                           fsr1l	equ	0xFE1
 10267                           indf2	equ	0xFDF
 10268                           postinc2	equ	0xFDE
 10269                           postdec2	equ	0xFDD
 10270                           fsr2h	equ	0xFDA
 10271                           fsr2l	equ	0xFD9
 10272                           status	equ	0xFD8
 10273                           
 10274 ;; *************** function _lcd_putc *****************
 10275 ;; Defined at:
 10276 ;;		line 106 in file "lcd_x8.c"
 10277 ;; Parameters:    Size  Location     Type
 10278 ;;  c               1    wreg     unsigned char 
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;  c               1   53[COMRAM] unsigned char 
 10281 ;; Return value:  Size  Location     Type
 10282 ;;                  1    wreg      void 
 10283 ;; Registers used:
 10284 ;;		wreg, status,2, status,0, cstack
 10285 ;; Tracked objects:
 10286 ;;		On entry : 0/0
 10287 ;;		On exit  : 0/0
 10288 ;;		Unchanged: 0/0
 10289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;Total ram usage:        1 bytes
 10295 ;; Hardware stack levels used:    1
 10296 ;; Hardware stack levels required when called:    8
 10297 ;; This function calls:
 10298 ;;		_delay_ms
 10299 ;;		_lcd_gotoxy
 10300 ;;		_lcd_send_byte
 10301 ;; This function is called by:
 10302 ;;		_lcd_puts
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           	psect	text41
 10307  002FF0                     __ptext41:
 10308                           	opt stack 0
 10309  002FF0                     _lcd_putc:
 10310                           	opt stack 20
 10311                           
 10312                           ;incstack = 0
 10313                           ;lcd_putc@c stored from wreg
 10314  002FF0  6E36               	movwf	lcd_putc@c,c
 10315                           
 10316                           ;lcd_x8.c: 107: switch (c) {
 10317  002FF2  D01E               	goto	l307
 10318  002FF4  0E01               	movlw	1
 10319  002FF6  6E31               	movwf	lcd_send_byte@n,c
 10320  002FF8  0E00               	movlw	0
 10321  002FFA  EC98  F018         	call	_lcd_send_byte
 10322                           
 10323                           ;lcd_x8.c: 109: delay_ms(2);
 10324  002FFE  0E00               	movlw	0
 10325  003000  6E2A               	movwf	delay_ms@n+1,c
 10326  003002  0E02               	movlw	2
 10327  003004  6E29               	movwf	delay_ms@n,c
 10328  003006  ECA2  F019         	call	_delay_ms	;wreg free
 10329                           
 10330                           ;lcd_x8.c: 110: break;
 10331  00300A  0012               	return	
 10332  00300C  0E02               	movlw	2
 10333  00300E  6E33               	movwf	lcd_gotoxy@y,c
 10334  003010  0E01               	movlw	1
 10335  003012  ECDD  F018         	call	_lcd_gotoxy
 10336                           
 10337                           ;lcd_x8.c: 112: break;
 10338  003016  0012               	return	
 10339  003018  0E10               	movlw	16
 10340  00301A  6E31               	movwf	lcd_send_byte@n,c
 10341  00301C  0E00               	movlw	0
 10342  00301E  EC98  F018         	call	_lcd_send_byte
 10343                           
 10344                           ;lcd_x8.c: 114: break;
 10345  003022  0012               	return	
 10346  003024  C036  F031         	movff	lcd_putc@c,lcd_send_byte@n
 10347  003028  0E01               	movlw	1
 10348  00302A  EC98  F018         	call	_lcd_send_byte
 10349                           
 10350                           ;lcd_x8.c: 117: }
 10351                           
 10352                           ;lcd_x8.c: 116: break;
 10353  00302E  0012               	return	
 10354  003030                     l307:
 10355  003030  5036               	movf	lcd_putc@c,w,c
 10356                           
 10357                           ; Switch size 1, requested type "space"
 10358                           ; Number of cases is 3, Range of values is 8 to 12
 10359                           ; switch strategies available:
 10360                           ; Name         Instructions Cycles
 10361                           ; simple_byte           10     6 (average)
 10362                           ;	Chosen strategy is simple_byte
 10363  003032  0A08               	xorlw	8	; case 8
 10364  003034  B4D8               	btfsc	status,2,c
 10365  003036  D7F0               	goto	l311
 10366  003038  0A02               	xorlw	2	; case 10
 10367  00303A  B4D8               	btfsc	status,2,c
 10368  00303C  D7E7               	goto	l310
 10369  00303E  0A06               	xorlw	6	; case 12
 10370  003040  B4D8               	btfsc	status,2,c
 10371  003042  D7D8               	goto	l308
 10372  003044  D7EF               	goto	l312
 10373  003046                     __end_of_lcd_putc:
 10374                           	opt stack 0
 10375                           tblptru	equ	0xFF8
 10376                           tblptrh	equ	0xFF7
 10377                           tblptrl	equ	0xFF6
 10378                           tablat	equ	0xFF5
 10379                           prodh	equ	0xFF4
 10380                           prodl	equ	0xFF3
 10381                           intcon	equ	0xFF2
 10382                           intcon2	equ	0xFF1
 10383                           intcon3	equ	0xFF0
 10384                           postinc0	equ	0xFEE
 10385                           wreg	equ	0xFE8
 10386                           indf1	equ	0xFE7
 10387                           postdec1	equ	0xFE5
 10388                           fsr1h	equ	0xFE2
 10389                           fsr1l	equ	0xFE1
 10390                           indf2	equ	0xFDF
 10391                           postinc2	equ	0xFDE
 10392                           postdec2	equ	0xFDD
 10393                           fsr2h	equ	0xFDA
 10394                           fsr2l	equ	0xFD9
 10395                           status	equ	0xFD8
 10396                           
 10397 ;; *************** function _lcd_gotoxy *****************
 10398 ;; Defined at:
 10399 ;;		line 89 in file "lcd_x8.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;  x               1    wreg     unsigned char 
 10402 ;;  y               1   50[COMRAM] unsigned char 
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;  x               1   51[COMRAM] unsigned char 
 10405 ;;  address         1   52[COMRAM] unsigned char 
 10406 ;; Return value:  Size  Location     Type
 10407 ;;                  1    wreg      void 
 10408 ;; Registers used:
 10409 ;;		wreg, status,2, status,0, cstack
 10410 ;; Tracked objects:
 10411 ;;		On entry : 0/0
 10412 ;;		On exit  : 0/0
 10413 ;;		Unchanged: 0/0
 10414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10415 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10416 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10418 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;Total ram usage:        3 bytes
 10420 ;; Hardware stack levels used:    1
 10421 ;; Hardware stack levels required when called:    7
 10422 ;; This function calls:
 10423 ;;		_lcd_send_byte
 10424 ;; This function is called by:
 10425 ;;		_OffMode
 10426 ;;		_CoolMode
 10427 ;;		_heatMode
 10428 ;;		_autoCool
 10429 ;;		_printingOnScreen
 10430 ;;		_lcd_putc
 10431 ;;		_autoHeat
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           	psect	text42
 10436  0031BA                     __ptext42:
 10437                           	opt stack 0
 10438  0031BA                     _lcd_gotoxy:
 10439                           	opt stack 20
 10440                           
 10441                           ;incstack = 0
 10442                           ;lcd_gotoxy@x stored from wreg
 10443  0031BA  6E34               	movwf	lcd_gotoxy@x,c
 10444                           
 10445                           ;lcd_x8.c: 90: unsigned char address;
 10446                           ;lcd_x8.c: 92: switch (y) {
 10447  0031BC  D009               	goto	l298
 10448  0031BE  0E80               	movlw	128
 10449  0031C0  D005               	goto	L5
 10450  0031C2  0EC0               	movlw	192
 10451  0031C4  D003               	goto	L5
 10452  0031C6  0E90               	movlw	144
 10453  0031C8  D001               	goto	L5
 10454  0031CA  0ED0               	movlw	208
 10455  0031CC                     L5:
 10456  0031CC  6E35               	movwf	lcd_gotoxy@address,c
 10457                           
 10458                           ;lcd_x8.c: 101: }
 10459                           
 10460                           ;lcd_x8.c: 100: break;
 10461  0031CE  D00D               	goto	l300
 10462  0031D0                     l298:
 10463  0031D0  5033               	movf	lcd_gotoxy@y,w,c
 10464                           
 10465                           ; Switch size 1, requested type "space"
 10466                           ; Number of cases is 4, Range of values is 1 to 4
 10467                           ; switch strategies available:
 10468                           ; Name         Instructions Cycles
 10469                           ; simple_byte           13     7 (average)
 10470                           ;	Chosen strategy is simple_byte
 10471  0031D2  0A01               	xorlw	1	; case 1
 10472  0031D4  B4D8               	btfsc	status,2,c
 10473  0031D6  D7F3               	goto	l299
 10474  0031D8  0A03               	xorlw	3	; case 2
 10475  0031DA  B4D8               	btfsc	status,2,c
 10476  0031DC  D7F2               	goto	l301
 10477  0031DE  0A01               	xorlw	1	; case 3
 10478  0031E0  B4D8               	btfsc	status,2,c
 10479  0031E2  D7F1               	goto	l302
 10480  0031E4  0A07               	xorlw	7	; case 4
 10481  0031E6  B4D8               	btfsc	status,2,c
 10482  0031E8  D7F0               	goto	l303
 10483  0031EA                     l300:
 10484                           
 10485                           ;lcd_x8.c: 102: address += x - 1;
 10486  0031EA  0434               	decf	lcd_gotoxy@x,w,c
 10487  0031EC  2635               	addwf	lcd_gotoxy@address,f,c
 10488                           
 10489                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
 10490  0031EE  5035               	movf	lcd_gotoxy@address,w,c
 10491  0031F0  0980               	iorlw	128
 10492  0031F2  6E31               	movwf	lcd_send_byte@n,c
 10493  0031F4  0E00               	movlw	0
 10494  0031F6  EC98  F018         	call	_lcd_send_byte
 10495  0031FA  0012               	return		;funcret
 10496  0031FC                     __end_of_lcd_gotoxy:
 10497                           	opt stack 0
 10498                           tblptru	equ	0xFF8
 10499                           tblptrh	equ	0xFF7
 10500                           tblptrl	equ	0xFF6
 10501                           tablat	equ	0xFF5
 10502                           prodh	equ	0xFF4
 10503                           prodl	equ	0xFF3
 10504                           intcon	equ	0xFF2
 10505                           intcon2	equ	0xFF1
 10506                           intcon3	equ	0xFF0
 10507                           postinc0	equ	0xFEE
 10508                           wreg	equ	0xFE8
 10509                           indf1	equ	0xFE7
 10510                           postdec1	equ	0xFE5
 10511                           fsr1h	equ	0xFE2
 10512                           fsr1l	equ	0xFE1
 10513                           indf2	equ	0xFDF
 10514                           postinc2	equ	0xFDE
 10515                           postdec2	equ	0xFDD
 10516                           fsr2h	equ	0xFDA
 10517                           fsr2l	equ	0xFD9
 10518                           status	equ	0xFD8
 10519                           
 10520 ;; *************** function _lcd_send_byte *****************
 10521 ;; Defined at:
 10522 ;;		line 39 in file "lcd_x8.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;  cm_data         1    wreg     unsigned char 
 10525 ;;  n               1   48[COMRAM] unsigned char 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;  cm_data         1   49[COMRAM] unsigned char 
 10528 ;; Return value:  Size  Location     Type
 10529 ;;                  1    wreg      void 
 10530 ;; Registers used:
 10531 ;;		wreg, status,2, status,0, cstack
 10532 ;; Tracked objects:
 10533 ;;		On entry : 0/0
 10534 ;;		On exit  : 0/0
 10535 ;;		Unchanged: 0/0
 10536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10537 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;Total ram usage:        2 bytes
 10542 ;; Hardware stack levels used:    1
 10543 ;; Hardware stack levels required when called:    6
 10544 ;; This function calls:
 10545 ;;		_delay_cycles
 10546 ;;		_delay_ms
 10547 ;;		_lcd_send_nibble
 10548 ;; This function is called by:
 10549 ;;		_lcd_init
 10550 ;;		_lcd_gotoxy
 10551 ;;		_lcd_putc
 10552 ;;		_Lcd_Shift_Right
 10553 ;;		_Lcd_Shift_Left
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           	psect	text43
 10558  003130                     __ptext43:
 10559                           	opt stack 0
 10560  003130                     _lcd_send_byte:
 10561                           	opt stack 22
 10562                           
 10563                           ;incstack = 0
 10564                           ;lcd_send_byte@cm_data stored from wreg
 10565  003130  6E32               	movwf	lcd_send_byte@cm_data,c
 10566                           
 10567                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
 10568  003132  B032               	btfsc	lcd_send_byte@cm_data,0,c
 10569  003134  D002               	bra	u4825
 10570  003136  9484               	bcf	3972,2,c	;volatile
 10571  003138  D001               	bra	u4826
 10572  00313A                     u4825:
 10573  00313A  8484               	bsf	3972,2,c	;volatile
 10574  00313C                     u4826:
 10575                           
 10576                           ;lcd_x8.c: 44: delay_cycles(1);
 10577  00313C  0E01               	movlw	1
 10578  00313E  EC65  F019         	call	_delay_cycles
 10579                           
 10580                           ;lcd_x8.c: 46: delay_cycles(1);
 10581  003142  0E01               	movlw	1
 10582  003144  EC65  F019         	call	_delay_cycles
 10583                           
 10584                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
 10585  003148  9284               	bcf	3972,1,c	;volatile
 10586                           
 10587                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
 10588  00314A  3831               	swapf	lcd_send_byte@n,w,c
 10589  00314C  0B0F               	andlw	15
 10590  00314E  ECFC  F019         	call	_lcd_send_nibble
 10591                           
 10592                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
 10593  003152  5031               	movf	lcd_send_byte@n,w,c
 10594  003154  0B0F               	andlw	15
 10595  003156  ECFC  F019         	call	_lcd_send_nibble
 10596                           
 10597                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
 10598  00315A  5032               	movf	lcd_send_byte@cm_data,w,c
 10599  00315C  B4D8               	btfsc	status,2,c
 10600  00315E  D005               	goto	l286
 10601  003160  0E32               	movlw	50
 10602  003162                     u6717:
 10603  003162  0004               	clrwdt	
 10604  003164  2EE8               	decfsz	wreg,f,c
 10605  003166  D7FD               	bra	u6717
 10606  003168  0012               	return	
 10607  00316A                     l286:
 10608                           
 10609                           ;lcd_x8.c: 51: else
 10610                           ;lcd_x8.c: 52: delay_ms(2);
 10611  00316A  0E00               	movlw	0
 10612  00316C  6E2A               	movwf	delay_ms@n+1,c
 10613  00316E  0E02               	movlw	2
 10614  003170  6E29               	movwf	delay_ms@n,c
 10615  003172  ECA2  F019         	call	_delay_ms	;wreg free
 10616  003176  0012               	return	
 10617  003178                     __end_of_lcd_send_byte:
 10618                           	opt stack 0
 10619                           tblptru	equ	0xFF8
 10620                           tblptrh	equ	0xFF7
 10621                           tblptrl	equ	0xFF6
 10622                           tablat	equ	0xFF5
 10623                           prodh	equ	0xFF4
 10624                           prodl	equ	0xFF3
 10625                           intcon	equ	0xFF2
 10626                           intcon2	equ	0xFF1
 10627                           intcon3	equ	0xFF0
 10628                           postinc0	equ	0xFEE
 10629                           wreg	equ	0xFE8
 10630                           indf1	equ	0xFE7
 10631                           postdec1	equ	0xFE5
 10632                           fsr1h	equ	0xFE2
 10633                           fsr1l	equ	0xFE1
 10634                           indf2	equ	0xFDF
 10635                           postinc2	equ	0xFDE
 10636                           postdec2	equ	0xFDD
 10637                           fsr2h	equ	0xFDA
 10638                           fsr2l	equ	0xFD9
 10639                           status	equ	0xFD8
 10640                           
 10641 ;; *************** function _lcd_send_nibble *****************
 10642 ;; Defined at:
 10643 ;;		line 29 in file "lcd_x8.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;  n               1    wreg     unsigned char 
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;  n               1   47[COMRAM] unsigned char 
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  1    wreg      void 
 10650 ;; Registers used:
 10651 ;;		wreg, status,2, status,0, cstack
 10652 ;; Tracked objects:
 10653 ;;		On entry : 0/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10661 ;;Total ram usage:        2 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:    5
 10664 ;; This function calls:
 10665 ;;		_delay_cycles
 10666 ;; This function is called by:
 10667 ;;		_lcd_send_byte
 10668 ;;		_lcd_init
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text44
 10673  0033F8                     __ptext44:
 10674                           	opt stack 0
 10675  0033F8                     _lcd_send_nibble:
 10676                           	opt stack 23
 10677                           
 10678                           ;incstack = 0
 10679                           ;lcd_send_nibble@n stored from wreg
 10680  0033F8  6E30               	movwf	lcd_send_nibble@n,c
 10681                           
 10682                           ;lcd_x8.c: 31: lcd.data = n;
 10683  0033FA  C030  F02F         	movff	lcd_send_nibble@n,??_lcd_send_nibble
 10684  0033FE  3A2F               	swapf	??_lcd_send_nibble,f,c
 10685  003400  5083               	movf	3971,w,c
 10686  003402  182F               	xorwf	??_lcd_send_nibble,w,c
 10687  003404  0B0F               	andlw	-241
 10688  003406  182F               	xorwf	??_lcd_send_nibble,w,c
 10689  003408  6E83               	movwf	3971,c
 10690                           
 10691                           ;lcd_x8.c: 33: delay_cycles(1);
 10692  00340A  0E01               	movlw	1
 10693  00340C  EC65  F019         	call	_delay_cycles
 10694                           
 10695                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
 10696  003410  8284               	bsf	3972,1,c	;volatile
 10697                           
 10698                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
 10699  003412  0004               	clrwdt	
 10700  003414  F000               	nop		;2 cycle nop
 10701                           
 10702                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
 10703  003416  9284               	bcf	3972,1,c	;volatile
 10704  003418  0012               	return		;funcret
 10705  00341A                     __end_of_lcd_send_nibble:
 10706                           	opt stack 0
 10707                           tblptru	equ	0xFF8
 10708                           tblptrh	equ	0xFF7
 10709                           tblptrl	equ	0xFF6
 10710                           tablat	equ	0xFF5
 10711                           prodh	equ	0xFF4
 10712                           prodl	equ	0xFF3
 10713                           intcon	equ	0xFF2
 10714                           intcon2	equ	0xFF1
 10715                           intcon3	equ	0xFF0
 10716                           postinc0	equ	0xFEE
 10717                           wreg	equ	0xFE8
 10718                           indf1	equ	0xFE7
 10719                           postdec1	equ	0xFE5
 10720                           fsr1h	equ	0xFE2
 10721                           fsr1l	equ	0xFE1
 10722                           indf2	equ	0xFDF
 10723                           postinc2	equ	0xFDE
 10724                           postdec2	equ	0xFDD
 10725                           fsr2h	equ	0xFDA
 10726                           fsr2l	equ	0xFD9
 10727                           status	equ	0xFD8
 10728                           
 10729 ;; *************** function _delay_cycles *****************
 10730 ;; Defined at:
 10731 ;;		line 20 in file "lcd_x8.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  n               1    wreg     unsigned char 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;  n               1   43[COMRAM] unsigned char 
 10736 ;;  x               2   44[COMRAM] int 
 10737 ;; Return value:  Size  Location     Type
 10738 ;;                  1    wreg      void 
 10739 ;; Registers used:
 10740 ;;		wreg, status,2, status,0
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10749 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10750 ;;Total ram usage:        6 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; Hardware stack levels required when called:    4
 10753 ;; This function calls:
 10754 ;;		Nothing
 10755 ;; This function is called by:
 10756 ;;		_lcd_send_nibble
 10757 ;;		_lcd_send_byte
 10758 ;; This function uses a non-reentrant model
 10759 ;;
 10760                           
 10761                           	psect	text45
 10762  0032CA                     __ptext45:
 10763                           	opt stack 0
 10764  0032CA                     _delay_cycles:
 10765                           	opt stack 23
 10766                           
 10767                           ;incstack = 0
 10768                           ;delay_cycles@n stored from wreg
 10769  0032CA  6E2C               	movwf	delay_cycles@n,c
 10770                           
 10771                           ;lcd_x8.c: 21: int x;
 10772                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
 10773  0032CC  0E00               	movlw	0
 10774  0032CE  6E2E               	movwf	delay_cycles@x+1,c
 10775  0032D0  0E00               	movlw	0
 10776  0032D2  6E2D               	movwf	delay_cycles@x,c
 10777  0032D4  D003               	goto	l277
 10778  0032D6                     l278:
 10779  0032D6  0004               	clrwdt		;# 
 10780  0032D8  4A2D               	infsnz	delay_cycles@x,f,c
 10781  0032DA  2A2E               	incf	delay_cycles@x+1,f,c
 10782  0032DC                     l277:
 10783  0032DC  502C               	movf	delay_cycles@n,w,c
 10784  0032DE  6E29               	movwf	??_delay_cycles& (0+255),c
 10785  0032E0  6A2A               	clrf	(??_delay_cycles+1)& (0+255),c
 10786  0032E2  502D               	movf	delay_cycles@x,w,c
 10787  0032E4  5C29               	subwf	??_delay_cycles,w,c
 10788  0032E6  502A               	movf	??_delay_cycles+1,w,c
 10789  0032E8  0A80               	xorlw	128
 10790  0032EA  6E2B               	movwf	(??_delay_cycles+2)& (0+255),c
 10791  0032EC  502E               	movf	delay_cycles@x+1,w,c
 10792  0032EE  0A80               	xorlw	128
 10793  0032F0  582B               	subwfb	(??_delay_cycles+2)& (0+255),w,c
 10794  0032F2  A0D8               	btfss	status,0,c
 10795  0032F4  0012               	return	
 10796  0032F6  D7EF               	goto	l278
 10797  0032F8                     __end_of_delay_cycles:
 10798                           	opt stack 0
 10799                           tblptru	equ	0xFF8
 10800                           tblptrh	equ	0xFF7
 10801                           tblptrl	equ	0xFF6
 10802                           tablat	equ	0xFF5
 10803                           prodh	equ	0xFF4
 10804                           prodl	equ	0xFF3
 10805                           intcon	equ	0xFF2
 10806                           intcon2	equ	0xFF1
 10807                           intcon3	equ	0xFF0
 10808                           postinc0	equ	0xFEE
 10809                           wreg	equ	0xFE8
 10810                           indf1	equ	0xFE7
 10811                           postdec1	equ	0xFE5
 10812                           fsr1h	equ	0xFE2
 10813                           fsr1l	equ	0xFE1
 10814                           indf2	equ	0xFDF
 10815                           postinc2	equ	0xFDE
 10816                           postdec2	equ	0xFDD
 10817                           fsr2h	equ	0xFDA
 10818                           fsr2l	equ	0xFD9
 10819                           status	equ	0xFD8
 10820                           
 10821 ;; *************** function _delay_ms *****************
 10822 ;; Defined at:
 10823 ;;		line 12 in file "lcd_x8.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;  n               2   40[COMRAM] unsigned int 
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;  x               2   42[COMRAM] int 
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  1    wreg      void 
 10830 ;; Registers used:
 10831 ;;		wreg, status,2, status,0
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10837 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10840 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10841 ;;Total ram usage:        4 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; Hardware stack levels required when called:    4
 10844 ;; This function calls:
 10845 ;;		Nothing
 10846 ;; This function is called by:
 10847 ;;		_lcd_send_byte
 10848 ;;		_lcd_init
 10849 ;;		_lcd_putc
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           	psect	text46
 10854  003344                     __ptext46:
 10855                           	opt stack 0
 10856  003344                     _delay_ms:
 10857                           	opt stack 23
 10858                           
 10859                           ;lcd_x8.c: 13: int x;
 10860                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
 10861                           
 10862                           ;incstack = 0
 10863  003344  0E00               	movlw	0
 10864  003346  6E2C               	movwf	delay_ms@x+1,c
 10865  003348  0E00               	movlw	0
 10866  00334A  6E2B               	movwf	delay_ms@x,c
 10867  00334C  D007               	goto	l271
 10868  00334E                     
 10869                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
 10870  00334E  0EC8               	movlw	200
 10871  003350                     u6727:
 10872  003350  0004               	clrwdt	
 10873  003352  0004               	clrwdt	
 10874  003354  2EE8               	decfsz	wreg,f,c
 10875  003356  D7FC               	bra	u6727
 10876  003358  4A2B               	infsnz	delay_ms@x,f,c
 10877  00335A  2A2C               	incf	delay_ms@x+1,f,c
 10878  00335C                     l271:
 10879  00335C  502B               	movf	delay_ms@x,w,c
 10880  00335E  5C29               	subwf	delay_ms@n,w,c
 10881  003360  502C               	movf	delay_ms@x+1,w,c
 10882  003362  582A               	subwfb	delay_ms@n+1,w,c
 10883  003364  A0D8               	btfss	status,0,c
 10884  003366  0012               	return	
 10885  003368  D7F2               	goto	l272
 10886  00336A                     __end_of_delay_ms:
 10887                           	opt stack 0
 10888                           tblptru	equ	0xFF8
 10889                           tblptrh	equ	0xFF7
 10890                           tblptrl	equ	0xFF6
 10891                           tablat	equ	0xFF5
 10892                           prodh	equ	0xFF4
 10893                           prodl	equ	0xFF3
 10894                           intcon	equ	0xFF2
 10895                           intcon2	equ	0xFF1
 10896                           intcon3	equ	0xFF0
 10897                           postinc0	equ	0xFEE
 10898                           wreg	equ	0xFE8
 10899                           indf1	equ	0xFE7
 10900                           postdec1	equ	0xFE5
 10901                           fsr1h	equ	0xFE2
 10902                           fsr1l	equ	0xFE1
 10903                           indf2	equ	0xFDF
 10904                           postinc2	equ	0xFDE
 10905                           postdec2	equ	0xFDD
 10906                           fsr2h	equ	0xFDA
 10907                           fsr2l	equ	0xFD9
 10908                           status	equ	0xFD8
 10909                           
 10910 ;; *************** function _init_pwm1 *****************
 10911 ;; Defined at:
 10912 ;;		line 5 in file "my_pwm.c"
 10913 ;; Parameters:    Size  Location     Type
 10914 ;;		None
 10915 ;; Auto vars:     Size  Location     Type
 10916 ;;		None
 10917 ;; Return value:  Size  Location     Type
 10918 ;;                  1    wreg      void 
 10919 ;; Registers used:
 10920 ;;		wreg, status,2
 10921 ;; Tracked objects:
 10922 ;;		On entry : 0/0
 10923 ;;		On exit  : 0/0
 10924 ;;		Unchanged: 0/0
 10925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10930 ;;Total ram usage:        0 bytes
 10931 ;; Hardware stack levels used:    1
 10932 ;; Hardware stack levels required when called:    4
 10933 ;; This function calls:
 10934 ;;		Nothing
 10935 ;; This function is called by:
 10936 ;;		_CoolMode
 10937 ;;		_autoCool
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           	psect	text47
 10942  00347C                     __ptext47:
 10943                           	opt stack 0
 10944  00347C                     _init_pwm1:
 10945                           	opt stack 25
 10946                           
 10947                           ;my_pwm.c: 7: PR2 = 255;
 10948                           
 10949                           ;incstack = 0
 10950  00347C  68CB               	setf	4043,c	;volatile
 10951                           
 10952                           ;my_pwm.c: 8: T2CON = 0;
 10953  00347E  0E00               	movlw	0
 10954  003480  6ECA               	movwf	4042,c	;volatile
 10955                           
 10956                           ;my_pwm.c: 9: CCP1CON = 0x0C;
 10957  003482  0E0C               	movlw	12
 10958  003484  6EBD               	movwf	4029,c	;volatile
 10959                           
 10960                           ;my_pwm.c: 11: T2CONbits.TMR2ON = 1;
 10961  003486  84CA               	bsf	4042,2,c	;volatile
 10962                           
 10963                           ;my_pwm.c: 12: TRISCbits.RC2 =0;
 10964  003488  9494               	bcf	3988,2,c	;volatile
 10965  00348A  0012               	return		;funcret
 10966  00348C                     __end_of_init_pwm1:
 10967                           	opt stack 0
 10968                           tblptru	equ	0xFF8
 10969                           tblptrh	equ	0xFF7
 10970                           tblptrl	equ	0xFF6
 10971                           tablat	equ	0xFF5
 10972                           prodh	equ	0xFF4
 10973                           prodl	equ	0xFF3
 10974                           intcon	equ	0xFF2
 10975                           intcon2	equ	0xFF1
 10976                           intcon3	equ	0xFF0
 10977                           postinc0	equ	0xFEE
 10978                           wreg	equ	0xFE8
 10979                           indf1	equ	0xFE7
 10980                           postdec1	equ	0xFE5
 10981                           fsr1h	equ	0xFE2
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           fsr2h	equ	0xFDA
 10987                           fsr2l	equ	0xFD9
 10988                           status	equ	0xFD8
 10989                           
 10990 ;; *************** function ___ftdiv *****************
 10991 ;; Defined at:
 10992 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  f1              3   12[BANK0 ] float 
 10995 ;;  f2              3   15[BANK0 ] float 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  f3              3   22[BANK0 ] float 
 10998 ;;  sign            1   26[BANK0 ] unsigned char 
 10999 ;;  exp             1   25[BANK0 ] unsigned char 
 11000 ;;  cntr            1   21[BANK0 ] unsigned char 
 11001 ;; Return value:  Size  Location     Type
 11002 ;;                  3   12[BANK0 ] float 
 11003 ;; Registers used:
 11004 ;;		wreg, status,2, status,0, cstack
 11005 ;; Tracked objects:
 11006 ;;		On entry : 0/0
 11007 ;;		On exit  : 0/0
 11008 ;;		Unchanged: 0/0
 11009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11010 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11011 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11012 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11013 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;Total ram usage:       15 bytes
 11015 ;; Hardware stack levels used:    1
 11016 ;; Hardware stack levels required when called:    5
 11017 ;; This function calls:
 11018 ;;		___ftpack
 11019 ;; This function is called by:
 11020 ;;		_OffMode
 11021 ;;		_CoolMode
 11022 ;;		_heatMode
 11023 ;;		_autoCool
 11024 ;;		_printingOnScreen
 11025 ;;		_main
 11026 ;;		_SerialHandler
 11027 ;;		_read_adc_voltage
 11028 ;;		_set_pwm1_percent
 11029 ;;		_autoHeat
 11030 ;;		_set_pwm1_voltage
 11031 ;;		_set_pwm1_general
 11032 ;; This function uses a non-reentrant model
 11033 ;;
 11034                           
 11035                           	psect	text48
 11036  002686                     __ptext48:
 11037                           	opt stack 0
 11038  002686                     ___ftdiv:
 11039                           	opt stack 24
 11040                           
 11041                           ;incstack = 0
 11042  002686  C08E  F092         	movff	___ftdiv@f1+2,??___ftdiv
 11043  00268A  0100               	movlb	0	; () banked
 11044  00268C  6B93               	clrf	(??___ftdiv+1)& (0+255),b
 11045  00268E  6B94               	clrf	(??___ftdiv+2)& (0+255),b
 11046  002690  358D               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 11047  002692  3792               	rlcf	??___ftdiv& (0+255),f,b
 11048  002694  E301               	bnc	u5561
 11049  002696  8193               	bsf	(??___ftdiv+1)& (0+255),0,b
 11050  002698                     u5561:
 11051  002698  5192               	movf	??___ftdiv& (0+255),w,b
 11052  00269A  6F99               	movwf	___ftdiv@exp& (0+255),b
 11053  00269C  5199               	movf	___ftdiv@exp& (0+255),w,b
 11054  00269E  A4D8               	btfss	status,2,c
 11055  0026A0  D007               	goto	l850
 11056                           
 11057                           ; BSR set to: 0
 11058  0026A2  0E00               	movlw	0
 11059  0026A4  6F8C               	movwf	?___ftdiv& (0+255),b
 11060  0026A6  0E00               	movlw	0
 11061  0026A8  6F8D               	movwf	(?___ftdiv+1)& (0+255),b
 11062  0026AA  0E00               	movlw	0
 11063  0026AC  6F8E               	movwf	(?___ftdiv+2)& (0+255),b
 11064                           
 11065                           ; BSR set to: 0
 11066  0026AE  0012               	return	
 11067  0026B0                     l850:
 11068                           
 11069                           ; BSR set to: 0
 11070                           
 11071                           ; BSR set to: 0
 11072  0026B0  C091  F092         	movff	___ftdiv@f2+2,??___ftdiv
 11073  0026B4  6B93               	clrf	(??___ftdiv+1)& (0+255),b
 11074  0026B6  6B94               	clrf	(??___ftdiv+2)& (0+255),b
 11075  0026B8  3590               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 11076  0026BA  3792               	rlcf	??___ftdiv& (0+255),f,b
 11077  0026BC  E301               	bnc	u5581
 11078  0026BE  8193               	bsf	(??___ftdiv+1)& (0+255),0,b
 11079  0026C0                     u5581:
 11080  0026C0  5192               	movf	??___ftdiv& (0+255),w,b
 11081  0026C2  6F9A               	movwf	___ftdiv@sign& (0+255),b
 11082  0026C4  519A               	movf	___ftdiv@sign& (0+255),w,b
 11083  0026C6  A4D8               	btfss	status,2,c
 11084  0026C8  D007               	goto	l852
 11085                           
 11086                           ; BSR set to: 0
 11087  0026CA  0E00               	movlw	0
 11088  0026CC  6F8C               	movwf	?___ftdiv& (0+255),b
 11089  0026CE  0E00               	movlw	0
 11090  0026D0  6F8D               	movwf	(?___ftdiv+1)& (0+255),b
 11091  0026D2  0E00               	movlw	0
 11092  0026D4  6F8E               	movwf	(?___ftdiv+2)& (0+255),b
 11093                           
 11094                           ; BSR set to: 0
 11095  0026D6  0012               	return	
 11096  0026D8                     l852:
 11097                           
 11098                           ; BSR set to: 0
 11099                           
 11100                           ; BSR set to: 0
 11101  0026D8  0E00               	movlw	0
 11102  0026DA  6F96               	movwf	___ftdiv@f3& (0+255),b
 11103  0026DC  0E00               	movlw	0
 11104  0026DE  6F97               	movwf	(___ftdiv@f3+1)& (0+255),b
 11105  0026E0  0E00               	movlw	0
 11106  0026E2  6F98               	movwf	(___ftdiv@f3+2)& (0+255),b
 11107                           
 11108                           ; BSR set to: 0
 11109  0026E4  519A               	movf	___ftdiv@sign& (0+255),w,b
 11110  0026E6  0F89               	addlw	137
 11111  0026E8  5F99               	subwf	___ftdiv@exp& (0+255),f,b
 11112                           
 11113                           ; BSR set to: 0
 11114  0026EA  C08E  F09A         	movff	___ftdiv@f1+2,___ftdiv@sign
 11115                           
 11116                           ; BSR set to: 0
 11117  0026EE  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11118  0026F0  1B9A               	xorwf	___ftdiv@sign& (0+255),f,b
 11119                           
 11120                           ; BSR set to: 0
 11121  0026F2  0E80               	movlw	128
 11122  0026F4  179A               	andwf	___ftdiv@sign& (0+255),f,b
 11123                           
 11124                           ; BSR set to: 0
 11125  0026F6  8F8D               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 11126                           
 11127                           ; BSR set to: 0
 11128  0026F8  0EFF               	movlw	255
 11129  0026FA  178C               	andwf	___ftdiv@f1& (0+255),f,b
 11130  0026FC  0EFF               	movlw	255
 11131  0026FE  178D               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 11132  002700  0E00               	movlw	0
 11133  002702  178E               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 11134                           
 11135                           ; BSR set to: 0
 11136  002704  8F90               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 11137                           
 11138                           ; BSR set to: 0
 11139  002706  0EFF               	movlw	255
 11140  002708  178F               	andwf	___ftdiv@f2& (0+255),f,b
 11141  00270A  0EFF               	movlw	255
 11142  00270C  1790               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 11143  00270E  0E00               	movlw	0
 11144  002710  1791               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 11145                           
 11146                           ; BSR set to: 0
 11147  002712  0E18               	movlw	24
 11148  002714  6F95               	movwf	___ftdiv@cntr& (0+255),b
 11149  002716                     
 11150                           ; BSR set to: 0
 11151                           
 11152                           ; BSR set to: 0
 11153  002716  90D8               	bcf	status,0,c
 11154  002718  3796               	rlcf	___ftdiv@f3& (0+255),f,b
 11155  00271A  3797               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11156  00271C  3798               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11157                           
 11158                           ; BSR set to: 0
 11159  00271E  518F               	movf	___ftdiv@f2& (0+255),w,b
 11160  002720  5D8C               	subwf	___ftdiv@f1& (0+255),w,b
 11161  002722  5190               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11162  002724  598D               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 11163  002726  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11164  002728  598E               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 11165  00272A  A0D8               	btfss	status,0,c
 11166  00272C  D007               	goto	l854
 11167                           
 11168                           ; BSR set to: 0
 11169  00272E  518F               	movf	___ftdiv@f2& (0+255),w,b
 11170  002730  5F8C               	subwf	___ftdiv@f1& (0+255),f,b
 11171  002732  5190               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11172  002734  5B8D               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 11173  002736  5191               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11174  002738  5B8E               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 11175                           
 11176                           ; BSR set to: 0
 11177  00273A  8196               	bsf	___ftdiv@f3& (0+255),0,b
 11178  00273C                     l854:
 11179                           
 11180                           ; BSR set to: 0
 11181  00273C  90D8               	bcf	status,0,c
 11182  00273E  378C               	rlcf	___ftdiv@f1& (0+255),f,b
 11183  002740  378D               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 11184  002742  378E               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 11185                           
 11186                           ; BSR set to: 0
 11187  002744  2F95               	decfsz	___ftdiv@cntr& (0+255),f,b
 11188  002746  D7E7               	goto	l853
 11189                           
 11190                           ; BSR set to: 0
 11191                           
 11192                           ; BSR set to: 0
 11193  002748  C096  F029         	movff	___ftdiv@f3,___ftpack@arg
 11194  00274C  C097  F02A         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11195  002750  C098  F02B         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11196  002754  C099  F02C         	movff	___ftdiv@exp,___ftpack@exp
 11197  002758  C09A  F02D         	movff	___ftdiv@sign,___ftpack@sign
 11198  00275C  EC70  F014         	call	___ftpack	;wreg free
 11199  002760  C029  F08C         	movff	?___ftpack,?___ftdiv
 11200  002764  C02A  F08D         	movff	?___ftpack+1,?___ftdiv+1
 11201  002768  C02B  F08E         	movff	?___ftpack+2,?___ftdiv+2
 11202  00276C  0012               	return	
 11203  00276E                     __end_of___ftdiv:
 11204                           	opt stack 0
 11205                           tblptru	equ	0xFF8
 11206                           tblptrh	equ	0xFF7
 11207                           tblptrl	equ	0xFF6
 11208                           tablat	equ	0xFF5
 11209                           prodh	equ	0xFF4
 11210                           prodl	equ	0xFF3
 11211                           intcon	equ	0xFF2
 11212                           intcon2	equ	0xFF1
 11213                           intcon3	equ	0xFF0
 11214                           postinc0	equ	0xFEE
 11215                           wreg	equ	0xFE8
 11216                           indf1	equ	0xFE7
 11217                           postdec1	equ	0xFE5
 11218                           fsr1h	equ	0xFE2
 11219                           fsr1l	equ	0xFE1
 11220                           indf2	equ	0xFDF
 11221                           postinc2	equ	0xFDE
 11222                           postdec2	equ	0xFDD
 11223                           fsr2h	equ	0xFDA
 11224                           fsr2l	equ	0xFD9
 11225                           status	equ	0xFD8
 11226                           
 11227 ;; *************** function ___awtoft *****************
 11228 ;; Defined at:
 11229 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;  c               2   60[COMRAM] int 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;  sign            1   63[COMRAM] unsigned char 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  3   60[COMRAM] float 
 11236 ;; Registers used:
 11237 ;;		wreg, status,2, status,0, cstack
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11243 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11246 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;Total ram usage:        4 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    5
 11250 ;; This function calls:
 11251 ;;		___ftpack
 11252 ;; This function is called by:
 11253 ;;		_OffMode
 11254 ;;		_CoolMode
 11255 ;;		_heatMode
 11256 ;;		_autoCool
 11257 ;;		_printingOnScreen
 11258 ;;		_main
 11259 ;;		_read_adc_voltage
 11260 ;;		_autoHeat
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           	psect	text49
 11265  003236                     __ptext49:
 11266                           	opt stack 0
 11267  003236                     ___awtoft:
 11268                           	opt stack 24
 11269                           
 11270                           ;incstack = 0
 11271  003236  0E00               	movlw	0
 11272  003238  6E40               	movwf	___awtoft@sign,c
 11273  00323A  AE3E               	btfss	___awtoft@c+1,7,c
 11274  00323C  D006               	goto	l750
 11275  00323E  6C3D               	negf	___awtoft@c,c
 11276  003240  1E3E               	comf	___awtoft@c+1,f,c
 11277  003242  B0D8               	btfsc	status,0,c
 11278  003244  2A3E               	incf	___awtoft@c+1,f,c
 11279  003246  0E01               	movlw	1
 11280  003248  6E40               	movwf	___awtoft@sign,c
 11281  00324A                     l750:
 11282  00324A  C03D  F029         	movff	___awtoft@c,___ftpack@arg
 11283  00324E  C03E  F02A         	movff	___awtoft@c+1,___ftpack@arg+1
 11284  003252  6A2B               	clrf	___ftpack@arg+2,c
 11285  003254  0E8E               	movlw	142
 11286  003256  6E2C               	movwf	___ftpack@exp,c
 11287  003258  C040  F02D         	movff	___awtoft@sign,___ftpack@sign
 11288  00325C  EC70  F014         	call	___ftpack	;wreg free
 11289  003260  C029  F03D         	movff	?___ftpack,?___awtoft
 11290  003264  C02A  F03E         	movff	?___ftpack+1,?___awtoft+1
 11291  003268  C02B  F03F         	movff	?___ftpack+2,?___awtoft+2
 11292  00326C  0012               	return	
 11293  00326E                     __end_of___awtoft:
 11294                           	opt stack 0
 11295                           tblptru	equ	0xFF8
 11296                           tblptrh	equ	0xFF7
 11297                           tblptrl	equ	0xFF6
 11298                           tablat	equ	0xFF5
 11299                           prodh	equ	0xFF4
 11300                           prodl	equ	0xFF3
 11301                           intcon	equ	0xFF2
 11302                           intcon2	equ	0xFF1
 11303                           intcon3	equ	0xFF0
 11304                           postinc0	equ	0xFEE
 11305                           wreg	equ	0xFE8
 11306                           indf1	equ	0xFE7
 11307                           postdec1	equ	0xFE5
 11308                           fsr1h	equ	0xFE2
 11309                           fsr1l	equ	0xFE1
 11310                           indf2	equ	0xFDF
 11311                           postinc2	equ	0xFDE
 11312                           postdec2	equ	0xFDD
 11313                           fsr2h	equ	0xFDA
 11314                           fsr2l	equ	0xFD9
 11315                           status	equ	0xFD8
 11316                           
 11317 ;; *************** function ___ftpack *****************
 11318 ;; Defined at:
 11319 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;  arg             3   40[COMRAM] unsigned um
 11322 ;;  exp             1   43[COMRAM] unsigned char 
 11323 ;;  sign            1   44[COMRAM] unsigned char 
 11324 ;; Auto vars:     Size  Location     Type
 11325 ;;		None
 11326 ;; Return value:  Size  Location     Type
 11327 ;;                  3   40[COMRAM] float 
 11328 ;; Registers used:
 11329 ;;		wreg, status,2, status,0
 11330 ;; Tracked objects:
 11331 ;;		On entry : 0/0
 11332 ;;		On exit  : 0/0
 11333 ;;		Unchanged: 0/0
 11334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11335 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;Total ram usage:        8 bytes
 11340 ;; Hardware stack levels used:    1
 11341 ;; Hardware stack levels required when called:    4
 11342 ;; This function calls:
 11343 ;;		Nothing
 11344 ;; This function is called by:
 11345 ;;		___awtoft
 11346 ;;		___ftadd
 11347 ;;		___ftdiv
 11348 ;;		___ftmul
 11349 ;;		___lltoft
 11350 ;; This function uses a non-reentrant model
 11351 ;;
 11352                           
 11353                           	psect	text50
 11354  0028E0                     __ptext50:
 11355                           	opt stack 0
 11356  0028E0                     ___ftpack:
 11357                           	opt stack 24
 11358                           
 11359                           ;incstack = 0
 11360  0028E0  502C               	movf	___ftpack@exp,w,c
 11361  0028E2  B4D8               	btfsc	status,2,c
 11362  0028E4  D005               	goto	u4850
 11363  0028E6  5029               	movf	___ftpack@arg,w,c
 11364  0028E8  102A               	iorwf	___ftpack@arg+1,w,c
 11365  0028EA  102B               	iorwf	___ftpack@arg+2,w,c
 11366  0028EC  A4D8               	btfss	status,2,c
 11367  0028EE  D00C               	goto	l786
 11368  0028F0                     u4850:
 11369  0028F0  0E00               	movlw	0
 11370  0028F2  6E29               	movwf	?___ftpack,c
 11371  0028F4  0E00               	movlw	0
 11372  0028F6  6E2A               	movwf	?___ftpack+1,c
 11373  0028F8  0E00               	movlw	0
 11374  0028FA  6E2B               	movwf	?___ftpack+2,c
 11375  0028FC  0012               	return	
 11376  0028FE  2A2C               	incf	___ftpack@exp,f,c
 11377  002900  90D8               	bcf	status,0,c
 11378  002902  322B               	rrcf	___ftpack@arg+2,f,c
 11379  002904  322A               	rrcf	___ftpack@arg+1,f,c
 11380  002906  3229               	rrcf	___ftpack@arg,f,c
 11381  002908                     l786:
 11382  002908  0E00               	movlw	0
 11383  00290A  1429               	andwf	___ftpack@arg,w,c
 11384  00290C  6E2E               	movwf	??___ftpack& (0+255),c
 11385  00290E  0E00               	movlw	0
 11386  002910  142A               	andwf	___ftpack@arg+1,w,c
 11387  002912  6E2F               	movwf	(??___ftpack+1)& (0+255),c
 11388  002914  0EFE               	movlw	254
 11389  002916  142B               	andwf	___ftpack@arg+2,w,c
 11390  002918  6E30               	movwf	(??___ftpack+2)& (0+255),c
 11391  00291A  502E               	movf	??___ftpack,w,c
 11392  00291C  102F               	iorwf	??___ftpack+1,w,c
 11393  00291E  1030               	iorwf	??___ftpack+2,w,c
 11394  002920  B4D8               	btfsc	status,2,c
 11395  002922  D00C               	goto	l789
 11396  002924  D7EC               	goto	l787
 11397  002926  2A2C               	incf	___ftpack@exp,f,c
 11398  002928  0E01               	movlw	1
 11399  00292A  2629               	addwf	___ftpack@arg,f,c
 11400  00292C  0E00               	movlw	0
 11401  00292E  222A               	addwfc	___ftpack@arg+1,f,c
 11402  002930  0E00               	movlw	0
 11403  002932  222B               	addwfc	___ftpack@arg+2,f,c
 11404  002934  90D8               	bcf	status,0,c
 11405  002936  322B               	rrcf	___ftpack@arg+2,f,c
 11406  002938  322A               	rrcf	___ftpack@arg+1,f,c
 11407  00293A  3229               	rrcf	___ftpack@arg,f,c
 11408  00293C                     l789:
 11409  00293C  0E00               	movlw	0
 11410  00293E  1429               	andwf	___ftpack@arg,w,c
 11411  002940  6E2E               	movwf	??___ftpack& (0+255),c
 11412  002942  0E00               	movlw	0
 11413  002944  142A               	andwf	___ftpack@arg+1,w,c
 11414  002946  6E2F               	movwf	(??___ftpack+1)& (0+255),c
 11415  002948  0EFF               	movlw	255
 11416  00294A  142B               	andwf	___ftpack@arg+2,w,c
 11417  00294C  6E30               	movwf	(??___ftpack+2)& (0+255),c
 11418  00294E  502E               	movf	??___ftpack,w,c
 11419  002950  102F               	iorwf	??___ftpack+1,w,c
 11420  002952  1030               	iorwf	??___ftpack+2,w,c
 11421  002954  B4D8               	btfsc	status,2,c
 11422  002956  D006               	goto	l792
 11423  002958  D7E6               	goto	l790
 11424  00295A  062C               	decf	___ftpack@exp,f,c
 11425  00295C  90D8               	bcf	status,0,c
 11426  00295E  3629               	rlcf	___ftpack@arg,f,c
 11427  002960  362A               	rlcf	___ftpack@arg+1,f,c
 11428  002962  362B               	rlcf	___ftpack@arg+2,f,c
 11429  002964                     l792:
 11430  002964  BE2A               	btfsc	___ftpack@arg+1,7,c
 11431  002966  D003               	goto	u4890
 11432  002968  0E02               	movlw	2
 11433  00296A  602C               	cpfslt	___ftpack@exp,c
 11434  00296C  D7F6               	goto	l793
 11435  00296E                     u4890:
 11436  00296E  A02C               	btfss	___ftpack@exp,0,c
 11437  002970  9E2A               	bcf	___ftpack@arg+1,7,c
 11438  002972  90D8               	bcf	status,0,c
 11439  002974  322C               	rrcf	___ftpack@exp,f,c
 11440  002976  502C               	movf	___ftpack@exp,w,c
 11441  002978  122B               	iorwf	___ftpack@arg+2,f,c
 11442  00297A  502D               	movf	___ftpack@sign,w,c
 11443  00297C  A4D8               	btfss	status,2,c
 11444  00297E  8E2B               	bsf	___ftpack@arg+2,7,c
 11445  002980  C029  F029         	movff	___ftpack@arg,?___ftpack
 11446  002984  C02A  F02A         	movff	___ftpack@arg+1,?___ftpack+1
 11447  002988  C02B  F02B         	movff	___ftpack@arg+2,?___ftpack+2
 11448  00298C  0012               	return	
 11449  00298E                     __end_of___ftpack:
 11450                           	opt stack 0
 11451                           tblptru	equ	0xFF8
 11452                           tblptrh	equ	0xFF7
 11453                           tblptrl	equ	0xFF6
 11454                           tablat	equ	0xFF5
 11455                           prodh	equ	0xFF4
 11456                           prodl	equ	0xFF3
 11457                           intcon	equ	0xFF2
 11458                           intcon2	equ	0xFF1
 11459                           intcon3	equ	0xFF0
 11460                           postinc0	equ	0xFEE
 11461                           wreg	equ	0xFE8
 11462                           indf1	equ	0xFE7
 11463                           postdec1	equ	0xFE5
 11464                           fsr1h	equ	0xFE2
 11465                           fsr1l	equ	0xFE1
 11466                           indf2	equ	0xFDF
 11467                           postinc2	equ	0xFDE
 11468                           postdec2	equ	0xFDD
 11469                           fsr2h	equ	0xFDA
 11470                           fsr2l	equ	0xFD9
 11471                           status	equ	0xFD8
 11472                           
 11473 ;; *************** function _highIsr *****************
 11474 ;; Defined at:
 11475 ;;		line 103 in file "HW2_A.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;		None
 11478 ;; Auto vars:     Size  Location     Type
 11479 ;;		None
 11480 ;; Return value:  Size  Location     Type
 11481 ;;                  1    wreg      void 
 11482 ;; Registers used:
 11483 ;;		wreg, status,2, status,0, cstack
 11484 ;; Tracked objects:
 11485 ;;		On entry : 0/0
 11486 ;;		On exit  : 0/0
 11487 ;;		Unchanged: 0/0
 11488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;Total ram usage:       18 bytes
 11494 ;; Hardware stack levels used:    1
 11495 ;; Hardware stack levels required when called:    3
 11496 ;; This function calls:
 11497 ;;		_Int2ISR
 11498 ;;		_compare_isr
 11499 ;;		_dec
 11500 ;;		_tmr_isr
 11501 ;;		i2_Int0ISR
 11502 ;; This function is called by:
 11503 ;;		Interrupt level 2
 11504 ;; This function uses a non-reentrant model
 11505 ;;
 11506                           
 11507                           	psect	intcode
 11508  000008                     __pintcode:
 11509                           	opt stack 0
 11510  000008                     _highIsr:
 11511                           	opt stack 20
 11512                           
 11513                           ;incstack = 0
 11514  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11515  00000A  EDB7  F013         	call	int_func,f	;refresh shadow registers
 11516                           tblptru	equ	0xFF8
 11517                           tblptrh	equ	0xFF7
 11518                           tblptrl	equ	0xFF6
 11519                           tablat	equ	0xFF5
 11520                           prodh	equ	0xFF4
 11521                           prodl	equ	0xFF3
 11522                           intcon	equ	0xFF2
 11523                           intcon2	equ	0xFF1
 11524                           intcon3	equ	0xFF0
 11525                           postinc0	equ	0xFEE
 11526                           wreg	equ	0xFE8
 11527                           indf1	equ	0xFE7
 11528                           postdec1	equ	0xFE5
 11529                           fsr1h	equ	0xFE2
 11530                           fsr1l	equ	0xFE1
 11531                           indf2	equ	0xFDF
 11532                           postinc2	equ	0xFDE
 11533                           postdec2	equ	0xFDD
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538                           	psect	intcode_body
 11539  00276E                     __pintcode_body:
 11540                           	opt stack 20
 11541  00276E                     int_func:
 11542                           	opt stack 20
 11543  00276E  0006               	pop		; remove dummy address from shadow register refresh
 11544  002770  CFFA F017          	movff	pclath,??_highIsr
 11545  002774  CFFB F018          	movff	pclatu,??_highIsr+1
 11546  002778  CFE9 F019          	movff	fsr0l,??_highIsr+2
 11547  00277C  CFEA F01A          	movff	fsr0h,??_highIsr+3
 11548  002780  CFE1 F01B          	movff	fsr1l,??_highIsr+4
 11549  002784  CFE2 F01C          	movff	fsr1h,??_highIsr+5
 11550  002788  CFD9 F01D          	movff	fsr2l,??_highIsr+6
 11551  00278C  CFDA F01E          	movff	fsr2h,??_highIsr+7
 11552  002790  CFF3 F01F          	movff	prodl,??_highIsr+8
 11553  002794  CFF4 F020          	movff	prodh,??_highIsr+9
 11554  002798  CFF6 F021          	movff	tblptrl,??_highIsr+10
 11555  00279C  CFF7 F022          	movff	tblptrh,??_highIsr+11
 11556  0027A0  CFF8 F023          	movff	tblptru,??_highIsr+12
 11557  0027A4  CFF5 F024          	movff	tablat,??_highIsr+13
 11558  0027A8  C056  F025         	movff	btemp,??_highIsr+14
 11559  0027AC  C057  F026         	movff	btemp+1,??_highIsr+15
 11560  0027B0  C058  F027         	movff	btemp+2,??_highIsr+16
 11561  0027B4  C059  F028         	movff	btemp+3,??_highIsr+17
 11562                           
 11563                           ;HW2_A.c: 104: if (INTCON3bits.INT2IF) {
 11564  0027B8  A2F0               	btfss	intcon3,1,c	;volatile
 11565  0027BA  D003               	goto	i2l149
 11566                           
 11567                           ;HW2_A.c: 106: Int2ISR();
 11568  0027BC  ECC2  F016         	call	_Int2ISR	;wreg free
 11569                           
 11570                           ;HW2_A.c: 108: } else if (INTCONbits.INT0IF) {
 11571  0027C0  D012               	goto	i2l157
 11572  0027C2                     i2l149:
 11573  0027C2  A2F2               	btfss	intcon,1,c	;volatile
 11574  0027C4  D003               	goto	i2l151
 11575                           
 11576                           ;HW2_A.c: 109: Int0ISR();
 11577  0027C6  EC72  F018         	call	i2_Int0ISR	;wreg free
 11578                           
 11579                           ;HW2_A.c: 110: }else if (PIR2bits.CCP2IF) {
 11580  0027CA  D00D               	goto	i2l157
 11581  0027CC                     i2l151:
 11582  0027CC  A0A1               	btfss	4001,0,c	;volatile
 11583  0027CE  D003               	goto	i2l153
 11584                           
 11585                           ;HW2_A.c: 111: compare_isr();
 11586  0027D0  EC5E  F01A         	call	_compare_isr	;wreg free
 11587                           
 11588                           ;HW2_A.c: 112: }
 11589  0027D4  D008               	goto	i2l157
 11590  0027D6                     i2l153:
 11591                           
 11592                           ;HW2_A.c: 113: else if(PIR2bits.TMR3IF){
 11593  0027D6  A2A1               	btfss	4001,1,c	;volatile
 11594  0027D8  D003               	goto	i2l155
 11595                           
 11596                           ;HW2_A.c: 114: tmr_isr();
 11597  0027DA  EC46  F01A         	call	_tmr_isr	;wreg free
 11598                           
 11599                           ;HW2_A.c: 115: }
 11600  0027DE  D003               	goto	i2l157
 11601  0027E0                     i2l155:
 11602                           
 11603                           ;HW2_A.c: 116: else if(INTCON3bits.INT1IF){
 11604  0027E0  B0F0               	btfsc	intcon3,0,c	;volatile
 11605                           
 11606                           ;HW2_A.c: 117: dec();
 11607  0027E2  EC30  F017         	call	_dec	;wreg free
 11608  0027E6                     i2l157:
 11609  0027E6  C028  F059         	movff	??_highIsr+17,btemp+3
 11610  0027EA  C027  F058         	movff	??_highIsr+16,btemp+2
 11611  0027EE  C026  F057         	movff	??_highIsr+15,btemp+1
 11612  0027F2  C025  F056         	movff	??_highIsr+14,btemp
 11613  0027F6  C024  FFF5         	movff	??_highIsr+13,tablat
 11614  0027FA  C023  FFF8         	movff	??_highIsr+12,tblptru
 11615  0027FE  C022  FFF7         	movff	??_highIsr+11,tblptrh
 11616  002802  C021  FFF6         	movff	??_highIsr+10,tblptrl
 11617  002806  C020  FFF4         	movff	??_highIsr+9,prodh
 11618  00280A  C01F  FFF3         	movff	??_highIsr+8,prodl
 11619  00280E  C01E  FFDA         	movff	??_highIsr+7,fsr2h
 11620  002812  C01D  FFD9         	movff	??_highIsr+6,fsr2l
 11621  002816  C01C  FFE2         	movff	??_highIsr+5,fsr1h
 11622  00281A  C01B  FFE1         	movff	??_highIsr+4,fsr1l
 11623  00281E  C01A  FFEA         	movff	??_highIsr+3,fsr0h
 11624  002822  C019  FFE9         	movff	??_highIsr+2,fsr0l
 11625  002826  C018  FFFB         	movff	??_highIsr+1,pclatu
 11626  00282A  C017  FFFA         	movff	??_highIsr,pclath
 11627  00282E  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11628  002830  0011               	retfie		f
 11629  002832                     __end_of_highIsr:
 11630                           	opt stack 0
 11631                           pclatu	equ	0xFFB
 11632                           pclath	equ	0xFFA
 11633                           tblptru	equ	0xFF8
 11634                           tblptrh	equ	0xFF7
 11635                           tblptrl	equ	0xFF6
 11636                           tablat	equ	0xFF5
 11637                           prodh	equ	0xFF4
 11638                           prodl	equ	0xFF3
 11639                           intcon	equ	0xFF2
 11640                           intcon2	equ	0xFF1
 11641                           intcon3	equ	0xFF0
 11642                           postinc0	equ	0xFEE
 11643                           fsr0h	equ	0xFEA
 11644                           fsr0l	equ	0xFE9
 11645                           wreg	equ	0xFE8
 11646                           indf1	equ	0xFE7
 11647                           postdec1	equ	0xFE5
 11648                           fsr1h	equ	0xFE2
 11649                           fsr1l	equ	0xFE1
 11650                           indf2	equ	0xFDF
 11651                           postinc2	equ	0xFDE
 11652                           postdec2	equ	0xFDD
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           
 11657 ;; *************** function i2_Int0ISR *****************
 11658 ;; Defined at:
 11659 ;;		line 123 in file "HW2_A.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;		None
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;		None
 11664 ;; Return value:  Size  Location     Type
 11665 ;;                  1    wreg      void 
 11666 ;; Registers used:
 11667 ;;		wreg, status,2, status,0
 11668 ;; Tracked objects:
 11669 ;;		On entry : 0/0
 11670 ;;		On exit  : 0/0
 11671 ;;		Unchanged: 0/0
 11672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;Total ram usage:        2 bytes
 11678 ;; Hardware stack levels used:    1
 11679 ;; This function calls:
 11680 ;;		Nothing
 11681 ;; This function is called by:
 11682 ;;		_highIsr
 11683 ;; This function uses a non-reentrant model
 11684 ;;
 11685                           
 11686                           	psect	text52
 11687  0030E4                     __ptext52:
 11688                           	opt stack 0
 11689  0030E4                     i2_Int0ISR:
 11690                           	opt stack 22
 11691                           
 11692                           ;HW2_A.c: 125: _delay((unsigned long)((250)*(4000000/4000.0)));
 11693                           
 11694                           ;incstack = 0
 11695  0030E4  0E02               	movlw	2
 11696  0030E6  6E02               	movwf	(??i2_Int0ISR+1)& (0+255),c
 11697  0030E8  0E45               	movlw	69
 11698  0030EA  6E01               	movwf	??i2_Int0ISR& (0+255),c
 11699  0030EC  0EAA               	movlw	170
 11700  0030EE                     i2u673_47:
 11701  0030EE  2EE8               	decfsz	wreg,f,c
 11702  0030F0  D7FE               	bra	i2u673_47
 11703  0030F2  2E01               	decfsz	??i2_Int0ISR& (0+255),f,c
 11704  0030F4  D7FC               	bra	i2u673_47
 11705  0030F6  2E02               	decfsz	(??i2_Int0ISR+1)& (0+255),f,c
 11706  0030F8  D7FA               	bra	i2u673_47
 11707                           
 11708                           ;HW2_A.c: 126: INTCONbits.INT0IF = 0;
 11709  0030FA  92F2               	bcf	intcon,1,c	;volatile
 11710                           
 11711                           ;HW2_A.c: 128: mode_counter++;
 11712  0030FC  4A4A               	infsnz	_mode_counter,f,c
 11713  0030FE  2A4B               	incf	_mode_counter+1,f,c
 11714                           
 11715                           ;HW2_A.c: 129: if(mode_counter==0)
 11716  003100  504A               	movf	_mode_counter,w,c
 11717  003102  104B               	iorwf	_mode_counter+1,w,c
 11718  003104  A4D8               	btfss	status,2,c
 11719  003106  D003               	goto	i2l161
 11720                           
 11721                           ;HW2_A.c: 130: current_mode=COOL;
 11722  003108  0E01               	movlw	1
 11723  00310A  6E55               	movwf	_current_mode,c
 11724  00310C  0012               	return	
 11725  00310E                     i2l161:
 11726                           
 11727                           ;HW2_A.c: 131: else if(mode_counter==1)
 11728  00310E  044A               	decf	_mode_counter,w,c
 11729  003110  104B               	iorwf	_mode_counter+1,w,c
 11730  003112  A4D8               	btfss	status,2,c
 11731  003114  D003               	goto	i2l163
 11732                           
 11733                           ;HW2_A.c: 132: current_mode=HEAT;
 11734  003116  0E02               	movlw	2
 11735  003118  6E55               	movwf	_current_mode,c
 11736  00311A  0012               	return	
 11737  00311C                     i2l163:
 11738                           
 11739                           ;HW2_A.c: 133: else if(mode_counter==2)
 11740  00311C  0E02               	movlw	2
 11741  00311E  184A               	xorwf	_mode_counter,w,c
 11742  003120  104B               	iorwf	_mode_counter+1,w,c
 11743  003122  A4D8               	btfss	status,2,c
 11744  003124  0012               	return	
 11745                           
 11746                           ;HW2_A.c: 134: {
 11747                           ;HW2_A.c: 135: current_mode=AUTO_COOL_HEAT;
 11748  003126  0E03               	movlw	3
 11749  003128  6E55               	movwf	_current_mode,c
 11750                           
 11751                           ;HW2_A.c: 136: mode_counter=-1;
 11752  00312A  684A               	setf	_mode_counter,c
 11753  00312C  684B               	setf	_mode_counter+1,c
 11754  00312E  0012               	return	
 11755  003130                     __end_ofi2_Int0ISR:
 11756                           	opt stack 0
 11757                           pclatu	equ	0xFFB
 11758                           pclath	equ	0xFFA
 11759                           tblptru	equ	0xFF8
 11760                           tblptrh	equ	0xFF7
 11761                           tblptrl	equ	0xFF6
 11762                           tablat	equ	0xFF5
 11763                           prodh	equ	0xFF4
 11764                           prodl	equ	0xFF3
 11765                           intcon	equ	0xFF2
 11766                           intcon2	equ	0xFF1
 11767                           intcon3	equ	0xFF0
 11768                           postinc0	equ	0xFEE
 11769                           fsr0h	equ	0xFEA
 11770                           fsr0l	equ	0xFE9
 11771                           wreg	equ	0xFE8
 11772                           indf1	equ	0xFE7
 11773                           postdec1	equ	0xFE5
 11774                           fsr1h	equ	0xFE2
 11775                           fsr1l	equ	0xFE1
 11776                           indf2	equ	0xFDF
 11777                           postinc2	equ	0xFDE
 11778                           postdec2	equ	0xFDD
 11779                           fsr2h	equ	0xFDA
 11780                           fsr2l	equ	0xFD9
 11781                           status	equ	0xFD8
 11782                           
 11783 ;; *************** function _tmr_isr *****************
 11784 ;; Defined at:
 11785 ;;		line 214 in file "HW2_A.c"
 11786 ;; Parameters:    Size  Location     Type
 11787 ;;		None
 11788 ;; Auto vars:     Size  Location     Type
 11789 ;;		None
 11790 ;; Return value:  Size  Location     Type
 11791 ;;                  1    wreg      void 
 11792 ;; Registers used:
 11793 ;;		wreg, status,2, status,0
 11794 ;; Tracked objects:
 11795 ;;		On entry : 0/0
 11796 ;;		On exit  : 0/0
 11797 ;;		Unchanged: 0/0
 11798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11803 ;;Total ram usage:        0 bytes
 11804 ;; Hardware stack levels used:    1
 11805 ;; This function calls:
 11806 ;;		Nothing
 11807 ;; This function is called by:
 11808 ;;		_highIsr
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           	psect	text53
 11813  00348C                     __ptext53:
 11814                           	opt stack 0
 11815  00348C                     _tmr_isr:
 11816                           	opt stack 22
 11817                           
 11818                           ;HW2_A.c: 215: PIR2bits.TMR3IF = 0;
 11819                           
 11820                           ;incstack = 0
 11821  00348C  92A1               	bcf	4001,1,c	;volatile
 11822                           
 11823                           ;HW2_A.c: 216: PORTCbits.RC5=1;
 11824  00348E  8A82               	bsf	3970,5,c	;volatile
 11825                           
 11826                           ;HW2_A.c: 217: PORTDbits.RD1 ^= 1;
 11827  003490  7283               	btg	3971,1,c	;volatile
 11828                           
 11829                           ;HW2_A.c: 219: TMR3 = 0;
 11830  003492  0E00               	movlw	0
 11831  003494  6EB3               	movwf	4019,c	;volatile
 11832  003496  0E00               	movlw	0
 11833  003498  6EB2               	movwf	4018,c	;volatile
 11834  00349A  0012               	return		;funcret
 11835  00349C                     __end_of_tmr_isr:
 11836                           	opt stack 0
 11837                           pclatu	equ	0xFFB
 11838                           pclath	equ	0xFFA
 11839                           tblptru	equ	0xFF8
 11840                           tblptrh	equ	0xFF7
 11841                           tblptrl	equ	0xFF6
 11842                           tablat	equ	0xFF5
 11843                           prodh	equ	0xFF4
 11844                           prodl	equ	0xFF3
 11845                           intcon	equ	0xFF2
 11846                           intcon2	equ	0xFF1
 11847                           intcon3	equ	0xFF0
 11848                           postinc0	equ	0xFEE
 11849                           fsr0h	equ	0xFEA
 11850                           fsr0l	equ	0xFE9
 11851                           wreg	equ	0xFE8
 11852                           indf1	equ	0xFE7
 11853                           postdec1	equ	0xFE5
 11854                           fsr1h	equ	0xFE2
 11855                           fsr1l	equ	0xFE1
 11856                           indf2	equ	0xFDF
 11857                           postinc2	equ	0xFDE
 11858                           postdec2	equ	0xFDD
 11859                           fsr2h	equ	0xFDA
 11860                           fsr2l	equ	0xFD9
 11861                           status	equ	0xFD8
 11862                           
 11863 ;; *************** function _dec *****************
 11864 ;; Defined at:
 11865 ;;		line 157 in file "HW2_A.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;		None
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;		None
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  1    wreg      void 
 11872 ;; Registers used:
 11873 ;;		wreg, status,2, status,0, cstack
 11874 ;; Tracked objects:
 11875 ;;		On entry : 0/0
 11876 ;;		On exit  : 0/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;Total ram usage:        2 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; Hardware stack levels required when called:    2
 11886 ;; This function calls:
 11887 ;;		i2___ftadd
 11888 ;; This function is called by:
 11889 ;;		_highIsr
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           	psect	text54
 11894  002E60                     __ptext54:
 11895                           	opt stack 0
 11896  002E60                     _dec:
 11897                           	opt stack 20
 11898                           
 11899                           ;HW2_A.c: 158: _delay((unsigned long)((250)*(4000000/4000.0)));
 11900                           
 11901                           ;incstack = 0
 11902  002E60  0E02               	movlw	2
 11903  002E62  6E16               	movwf	(??_dec+1)& (0+255),c
 11904  002E64  0E45               	movlw	69
 11905  002E66  6E15               	movwf	??_dec& (0+255),c
 11906  002E68  0EAA               	movlw	170
 11907  002E6A                     i2u674_47:
 11908  002E6A  2EE8               	decfsz	wreg,f,c
 11909  002E6C  D7FE               	bra	i2u674_47
 11910  002E6E  2E15               	decfsz	??_dec& (0+255),f,c
 11911  002E70  D7FC               	bra	i2u674_47
 11912  002E72  2E16               	decfsz	(??_dec+1)& (0+255),f,c
 11913  002E74  D7FA               	bra	i2u674_47
 11914                           
 11915                           ;HW2_A.c: 159: INTCON3bits.INT1IF =0;
 11916  002E76  90F0               	bcf	intcon3,0,c	;volatile
 11917                           
 11918                           ;HW2_A.c: 160: if(current_mode==AUTO_COOL_HEAT){
 11919  002E78  0E03               	movlw	3
 11920  002E7A  1855               	xorwf	_current_mode,w,c
 11921  002E7C  A4D8               	btfss	status,2,c
 11922  002E7E  D00A               	goto	i2l178
 11923                           
 11924                           ;HW2_A.c: 162: Hs--;
 11925  002E80  0648               	decf	_Hs,f,c
 11926  002E82  A0D8               	btfss	status,0,c
 11927  002E84  0649               	decf	_Hs+1,f,c
 11928                           
 11929                           ;HW2_A.c: 163: if(Hs <0){
 11930  002E86  AE49               	btfss	_Hs+1,7,c
 11931  002E88  0012               	return	
 11932                           
 11933                           ;HW2_A.c: 164: Hs = 0;
 11934  002E8A  0E00               	movlw	0
 11935  002E8C  6E49               	movwf	_Hs+1,c
 11936  002E8E  0E00               	movlw	0
 11937  002E90  6E48               	movwf	_Hs,c
 11938                           
 11939                           ;HW2_A.c: 165: }
 11940                           ;HW2_A.c: 166: }
 11941  002E92  0012               	return	
 11942  002E94                     i2l178:
 11943                           
 11944                           ;HW2_A.c: 167: else if(current_mode==COOL || current_mode==HEAT){
 11945  002E94  0455               	decf	_current_mode,w,c
 11946  002E96  B4D8               	btfsc	status,2,c
 11947  002E98  D004               	goto	i2u448_40
 11948  002E9A  0E02               	movlw	2
 11949  002E9C  1855               	xorwf	_current_mode,w,c
 11950  002E9E  A4D8               	btfss	status,2,c
 11951  002EA0  0012               	return	
 11952  002EA2                     i2u448_40:
 11953                           
 11954                           ;HW2_A.c: 168: AI1=AI1-5;
 11955  002EA2  C045  F009         	movff	_AI1,i2___ftadd@f1
 11956  002EA6  C046  F00A         	movff	_AI1+1,i2___ftadd@f1+1
 11957  002EAA  C047  F00B         	movff	_AI1+2,i2___ftadd@f1+2
 11958  002EAE  0E00               	movlw	0
 11959  002EB0  6E0C               	movwf	i2___ftadd@f2,c
 11960  002EB2  0EA0               	movlw	160
 11961  002EB4  6E0D               	movwf	i2___ftadd@f2+1,c
 11962  002EB6  0EC0               	movlw	192
 11963  002EB8  6E0E               	movwf	i2___ftadd@f2+2,c
 11964  002EBA  EC49  F010         	call	i2___ftadd	;wreg free
 11965  002EBE  C009  F045         	movff	?i2___ftadd,_AI1
 11966  002EC2  C00A  F046         	movff	?i2___ftadd+1,_AI1+1
 11967  002EC6  C00B  F047         	movff	?i2___ftadd+2,_AI1+2
 11968  002ECA  0012               	return	
 11969  002ECC                     __end_of_dec:
 11970                           	opt stack 0
 11971                           pclatu	equ	0xFFB
 11972                           pclath	equ	0xFFA
 11973                           tblptru	equ	0xFF8
 11974                           tblptrh	equ	0xFF7
 11975                           tblptrl	equ	0xFF6
 11976                           tablat	equ	0xFF5
 11977                           prodh	equ	0xFF4
 11978                           prodl	equ	0xFF3
 11979                           intcon	equ	0xFF2
 11980                           intcon2	equ	0xFF1
 11981                           intcon3	equ	0xFF0
 11982                           postinc0	equ	0xFEE
 11983                           fsr0h	equ	0xFEA
 11984                           fsr0l	equ	0xFE9
 11985                           wreg	equ	0xFE8
 11986                           indf1	equ	0xFE7
 11987                           postdec1	equ	0xFE5
 11988                           fsr1h	equ	0xFE2
 11989                           fsr1l	equ	0xFE1
 11990                           indf2	equ	0xFDF
 11991                           postinc2	equ	0xFDE
 11992                           postdec2	equ	0xFDD
 11993                           fsr2h	equ	0xFDA
 11994                           fsr2l	equ	0xFD9
 11995                           status	equ	0xFD8
 11996                           
 11997 ;; *************** function _compare_isr *****************
 11998 ;; Defined at:
 11999 ;;		line 209 in file "HW2_A.c"
 12000 ;; Parameters:    Size  Location     Type
 12001 ;;		None
 12002 ;; Auto vars:     Size  Location     Type
 12003 ;;		None
 12004 ;; Return value:  Size  Location     Type
 12005 ;;                  1    wreg      void 
 12006 ;; Registers used:
 12007 ;;		wreg, status,2, status,0
 12008 ;; Tracked objects:
 12009 ;;		On entry : 0/0
 12010 ;;		On exit  : 0/0
 12011 ;;		Unchanged: 0/0
 12012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12017 ;;Total ram usage:        0 bytes
 12018 ;; Hardware stack levels used:    1
 12019 ;; This function calls:
 12020 ;;		Nothing
 12021 ;; This function is called by:
 12022 ;;		_highIsr
 12023 ;; This function uses a non-reentrant model
 12024 ;;
 12025                           
 12026                           	psect	text55
 12027  0034BC                     __ptext55:
 12028                           	opt stack 0
 12029  0034BC                     _compare_isr:
 12030                           	opt stack 22
 12031                           
 12032                           ;HW2_A.c: 210: PIR2bits.CCP2IF = 0;
 12033                           
 12034                           ;incstack = 0
 12035  0034BC  90A1               	bcf	4001,0,c	;volatile
 12036                           
 12037                           ;HW2_A.c: 211: PORTCbits.RC5=0;
 12038  0034BE  9A82               	bcf	3970,5,c	;volatile
 12039                           
 12040                           ;HW2_A.c: 212: PORTDbits.RD2 ^= 1;
 12041  0034C0  7483               	btg	3971,2,c	;volatile
 12042  0034C2  0012               	return		;funcret
 12043  0034C4                     __end_of_compare_isr:
 12044                           	opt stack 0
 12045                           pclatu	equ	0xFFB
 12046                           pclath	equ	0xFFA
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodh	equ	0xFF4
 12052                           prodl	equ	0xFF3
 12053                           intcon	equ	0xFF2
 12054                           intcon2	equ	0xFF1
 12055                           intcon3	equ	0xFF0
 12056                           postinc0	equ	0xFEE
 12057                           fsr0h	equ	0xFEA
 12058                           fsr0l	equ	0xFE9
 12059                           wreg	equ	0xFE8
 12060                           indf1	equ	0xFE7
 12061                           postdec1	equ	0xFE5
 12062                           fsr1h	equ	0xFE2
 12063                           fsr1l	equ	0xFE1
 12064                           indf2	equ	0xFDF
 12065                           postinc2	equ	0xFDE
 12066                           postdec2	equ	0xFDD
 12067                           fsr2h	equ	0xFDA
 12068                           fsr2l	equ	0xFD9
 12069                           status	equ	0xFD8
 12070                           
 12071 ;; *************** function _Int2ISR *****************
 12072 ;; Defined at:
 12073 ;;		line 143 in file "HW2_A.c"
 12074 ;; Parameters:    Size  Location     Type
 12075 ;;		None
 12076 ;; Auto vars:     Size  Location     Type
 12077 ;;		None
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  1    wreg      void 
 12080 ;; Registers used:
 12081 ;;		wreg, status,2, status,0, cstack
 12082 ;; Tracked objects:
 12083 ;;		On entry : 0/0
 12084 ;;		On exit  : 0/0
 12085 ;;		Unchanged: 0/0
 12086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;Total ram usage:        2 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:    2
 12094 ;; This function calls:
 12095 ;;		i2___ftadd
 12096 ;; This function is called by:
 12097 ;;		_highIsr
 12098 ;; This function uses a non-reentrant model
 12099 ;;
 12100                           
 12101                           	psect	text56
 12102  002D84                     __ptext56:
 12103                           	opt stack 0
 12104  002D84                     _Int2ISR:
 12105                           	opt stack 20
 12106                           
 12107                           ;HW2_A.c: 144: _delay((unsigned long)((250)*(4000000/4000.0)));
 12108                           
 12109                           ;incstack = 0
 12110  002D84  0E02               	movlw	2
 12111  002D86  6E16               	movwf	(??_Int2ISR+1)& (0+255),c
 12112  002D88  0E45               	movlw	69
 12113  002D8A  6E15               	movwf	??_Int2ISR& (0+255),c
 12114  002D8C  0EAA               	movlw	170
 12115  002D8E                     i2u675_47:
 12116  002D8E  2EE8               	decfsz	wreg,f,c
 12117  002D90  D7FE               	bra	i2u675_47
 12118  002D92  2E15               	decfsz	??_Int2ISR& (0+255),f,c
 12119  002D94  D7FC               	bra	i2u675_47
 12120  002D96  2E16               	decfsz	(??_Int2ISR+1)& (0+255),f,c
 12121  002D98  D7FA               	bra	i2u675_47
 12122                           
 12123                           ;HW2_A.c: 145: INTCON3bits.INT2IF = 0;
 12124  002D9A  92F0               	bcf	intcon3,1,c	;volatile
 12125                           
 12126                           ;HW2_A.c: 146: if(current_mode==AUTO_COOL_HEAT){
 12127  002D9C  0E03               	movlw	3
 12128  002D9E  1855               	xorwf	_current_mode,w,c
 12129  002DA0  A4D8               	btfss	status,2,c
 12130  002DA2  D00C               	goto	i2l169
 12131                           
 12132                           ;HW2_A.c: 148: Hs++;
 12133  002DA4  4A48               	infsnz	_Hs,f,c
 12134  002DA6  2A49               	incf	_Hs+1,f,c
 12135                           
 12136                           ;HW2_A.c: 149: if(Hs == 4){
 12137  002DA8  0E04               	movlw	4
 12138  002DAA  1848               	xorwf	_Hs,w,c
 12139  002DAC  1049               	iorwf	_Hs+1,w,c
 12140  002DAE  A4D8               	btfss	status,2,c
 12141  002DB0  0012               	return	
 12142                           
 12143                           ;HW2_A.c: 150: Hs = 3;
 12144  002DB2  0E00               	movlw	0
 12145  002DB4  6E49               	movwf	_Hs+1,c
 12146  002DB6  0E03               	movlw	3
 12147  002DB8  6E48               	movwf	_Hs,c
 12148                           
 12149                           ;HW2_A.c: 151: }
 12150                           ;HW2_A.c: 152: }
 12151  002DBA  0012               	return	
 12152  002DBC                     i2l169:
 12153                           
 12154                           ;HW2_A.c: 153: else if(current_mode==COOL || current_mode==HEAT){
 12155  002DBC  0455               	decf	_current_mode,w,c
 12156  002DBE  B4D8               	btfsc	status,2,c
 12157  002DC0  D004               	goto	i2u441_40
 12158  002DC2  0E02               	movlw	2
 12159  002DC4  1855               	xorwf	_current_mode,w,c
 12160  002DC6  A4D8               	btfss	status,2,c
 12161  002DC8  0012               	return	
 12162  002DCA                     i2u441_40:
 12163                           
 12164                           ;HW2_A.c: 154: AI1=AI1+5;
 12165  002DCA  C045  F009         	movff	_AI1,i2___ftadd@f1
 12166  002DCE  C046  F00A         	movff	_AI1+1,i2___ftadd@f1+1
 12167  002DD2  C047  F00B         	movff	_AI1+2,i2___ftadd@f1+2
 12168  002DD6  0E00               	movlw	0
 12169  002DD8  6E0C               	movwf	i2___ftadd@f2,c
 12170  002DDA  0EA0               	movlw	160
 12171  002DDC  6E0D               	movwf	i2___ftadd@f2+1,c
 12172  002DDE  0E40               	movlw	64
 12173  002DE0  6E0E               	movwf	i2___ftadd@f2+2,c
 12174  002DE2  EC49  F010         	call	i2___ftadd	;wreg free
 12175  002DE6  C009  F045         	movff	?i2___ftadd,_AI1
 12176  002DEA  C00A  F046         	movff	?i2___ftadd+1,_AI1+1
 12177  002DEE  C00B  F047         	movff	?i2___ftadd+2,_AI1+2
 12178  002DF2  0012               	return	
 12179  002DF4                     __end_of_Int2ISR:
 12180                           	opt stack 0
 12181                           pclatu	equ	0xFFB
 12182                           pclath	equ	0xFFA
 12183                           tblptru	equ	0xFF8
 12184                           tblptrh	equ	0xFF7
 12185                           tblptrl	equ	0xFF6
 12186                           tablat	equ	0xFF5
 12187                           prodh	equ	0xFF4
 12188                           prodl	equ	0xFF3
 12189                           intcon	equ	0xFF2
 12190                           intcon2	equ	0xFF1
 12191                           intcon3	equ	0xFF0
 12192                           postinc0	equ	0xFEE
 12193                           fsr0h	equ	0xFEA
 12194                           fsr0l	equ	0xFE9
 12195                           wreg	equ	0xFE8
 12196                           indf1	equ	0xFE7
 12197                           postdec1	equ	0xFE5
 12198                           fsr1h	equ	0xFE2
 12199                           fsr1l	equ	0xFE1
 12200                           indf2	equ	0xFDF
 12201                           postinc2	equ	0xFDE
 12202                           postdec2	equ	0xFDD
 12203                           fsr2h	equ	0xFDA
 12204                           fsr2l	equ	0xFD9
 12205                           status	equ	0xFD8
 12206                           
 12207 ;; *************** function i2___ftadd *****************
 12208 ;; Defined at:
 12209 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12210 ;; Parameters:    Size  Location     Type
 12211 ;;  f1              3    8[COMRAM] float 
 12212 ;;  f2              3   11[COMRAM] float 
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;  __ftadd         1   19[COMRAM] unsigned char 
 12215 ;;  __ftadd         1   18[COMRAM] unsigned char 
 12216 ;;  __ftadd         1   17[COMRAM] unsigned char 
 12217 ;; Return value:  Size  Location     Type
 12218 ;;                  3    8[COMRAM] float 
 12219 ;; Registers used:
 12220 ;;		wreg, status,2, status,0, cstack
 12221 ;; Tracked objects:
 12222 ;;		On entry : 0/0
 12223 ;;		On exit  : 0/0
 12224 ;;		Unchanged: 0/0
 12225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12226 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12227 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12228 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12229 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;Total ram usage:       12 bytes
 12231 ;; Hardware stack levels used:    1
 12232 ;; Hardware stack levels required when called:    1
 12233 ;; This function calls:
 12234 ;;		i2___ftpack
 12235 ;; This function is called by:
 12236 ;;		_Int2ISR
 12237 ;;		_dec
 12238 ;; This function uses a non-reentrant model
 12239 ;;
 12240                           
 12241                           	psect	text57
 12242  002092                     __ptext57:
 12243                           	opt stack 0
 12244  002092                     i2___ftadd:
 12245                           	opt stack 20
 12246                           
 12247                           ;incstack = 0
 12248  002092  C00B  F00F         	movff	i2___ftadd@f1+2,??i2___ftadd
 12249  002096  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 12250  002098  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 12251  00209A  340A               	rlcf	i2___ftadd@f1+1,w,c
 12252  00209C  360F               	rlcf	??i2___ftadd& (0+255),f,c
 12253  00209E  E301               	bnc	u417_41
 12254  0020A0  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 12255  0020A2                     u417_41:
 12256  0020A2  500F               	movf	??i2___ftadd,w,c
 12257  0020A4  6E14               	movwf	i2___ftadd@exp1,c
 12258  0020A6  C00E  F00F         	movff	i2___ftadd@f2+2,??i2___ftadd
 12259  0020AA  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 12260  0020AC  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 12261  0020AE  340D               	rlcf	i2___ftadd@f2+1,w,c
 12262  0020B0  360F               	rlcf	??i2___ftadd& (0+255),f,c
 12263  0020B2  E301               	bnc	u418_41
 12264  0020B4  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 12265  0020B6                     u418_41:
 12266  0020B6  500F               	movf	??i2___ftadd,w,c
 12267  0020B8  6E13               	movwf	i2___ftadd@exp2,c
 12268  0020BA  5014               	movf	i2___ftadd@exp1,w,c
 12269  0020BC  B4D8               	btfsc	status,2,c
 12270  0020BE  D00B               	goto	i2u421_40
 12271  0020C0  5013               	movf	i2___ftadd@exp2,w,c
 12272  0020C2  5C14               	subwf	i2___ftadd@exp1,w,c
 12273  0020C4  B0D8               	btfsc	status,0,c
 12274  0020C6  D00E               	goto	i2l817
 12275  0020C8  5014               	movf	i2___ftadd@exp1,w,c
 12276  0020CA  0800               	sublw	0
 12277  0020CC  2413               	addwf	i2___ftadd@exp2,w,c
 12278  0020CE  6E0F               	movwf	??i2___ftadd& (0+255),c
 12279  0020D0  0E18               	movlw	24
 12280  0020D2  640F               	cpfsgt	??i2___ftadd,c
 12281  0020D4  D007               	goto	i2l817
 12282  0020D6                     i2u421_40:
 12283  0020D6  C00C  F009         	movff	i2___ftadd@f2,?i2___ftadd
 12284  0020DA  C00D  F00A         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 12285  0020DE  C00E  F00B         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 12286  0020E2  0012               	return	
 12287  0020E4                     i2l817:
 12288  0020E4  5013               	movf	i2___ftadd@exp2,w,c
 12289  0020E6  B4D8               	btfsc	status,2,c
 12290  0020E8  D00B               	goto	i2u424_40
 12291  0020EA  5014               	movf	i2___ftadd@exp1,w,c
 12292  0020EC  5C13               	subwf	i2___ftadd@exp2,w,c
 12293  0020EE  B0D8               	btfsc	status,0,c
 12294  0020F0  D00E               	goto	i2l821
 12295  0020F2  5013               	movf	i2___ftadd@exp2,w,c
 12296  0020F4  0800               	sublw	0
 12297  0020F6  2414               	addwf	i2___ftadd@exp1,w,c
 12298  0020F8  6E0F               	movwf	??i2___ftadd& (0+255),c
 12299  0020FA  0E18               	movlw	24
 12300  0020FC  640F               	cpfsgt	??i2___ftadd,c
 12301  0020FE  D007               	goto	i2l821
 12302  002100                     i2u424_40:
 12303  002100  C009  F009         	movff	i2___ftadd@f1,?i2___ftadd
 12304  002104  C00A  F00A         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 12305  002108  C00B  F00B         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 12306  00210C  0012               	return	
 12307  00210E                     i2l821:
 12308  00210E  0E06               	movlw	6
 12309  002110  6E12               	movwf	i2___ftadd@sign,c
 12310  002112  BE0B               	btfsc	i2___ftadd@f1+2,7,c
 12311  002114  8E12               	bsf	i2___ftadd@sign,7,c
 12312  002116  BE0E               	btfsc	i2___ftadd@f2+2,7,c
 12313  002118  8C12               	bsf	i2___ftadd@sign,6,c
 12314  00211A  8E0A               	bsf	i2___ftadd@f1+1,7,c
 12315  00211C  0EFF               	movlw	255
 12316  00211E  1609               	andwf	i2___ftadd@f1,f,c
 12317  002120  0EFF               	movlw	255
 12318  002122  160A               	andwf	i2___ftadd@f1+1,f,c
 12319  002124  0E00               	movlw	0
 12320  002126  160B               	andwf	i2___ftadd@f1+2,f,c
 12321  002128  8E0D               	bsf	i2___ftadd@f2+1,7,c
 12322  00212A  0EFF               	movlw	255
 12323  00212C  160C               	andwf	i2___ftadd@f2,f,c
 12324  00212E  0EFF               	movlw	255
 12325  002130  160D               	andwf	i2___ftadd@f2+1,f,c
 12326  002132  0E00               	movlw	0
 12327  002134  160E               	andwf	i2___ftadd@f2+2,f,c
 12328  002136  5013               	movf	i2___ftadd@exp2,w,c
 12329  002138  5C14               	subwf	i2___ftadd@exp1,w,c
 12330  00213A  B0D8               	btfsc	status,0,c
 12331  00213C  D01B               	goto	i2l826
 12332  00213E                     i2u427_40:
 12333  00213E  90D8               	bcf	status,0,c
 12334  002140  360C               	rlcf	i2___ftadd@f2,f,c
 12335  002142  360D               	rlcf	i2___ftadd@f2+1,f,c
 12336  002144  360E               	rlcf	i2___ftadd@f2+2,f,c
 12337  002146  0613               	decf	i2___ftadd@exp2,f,c
 12338  002148  5014               	movf	i2___ftadd@exp1,w,c
 12339  00214A  1813               	xorwf	i2___ftadd@exp2,w,c
 12340  00214C  B4D8               	btfsc	status,2,c
 12341  00214E  D00D               	goto	i2l831
 12342  002150  0612               	decf	i2___ftadd@sign,f,c
 12343  002152  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 12344  002156  0E07               	movlw	7
 12345  002158  160F               	andwf	??i2___ftadd,f,c
 12346  00215A  B4D8               	btfsc	status,2,c
 12347  00215C  D006               	goto	i2l831
 12348  00215E  D7EF               	goto	i2u427_40
 12349  002160  90D8               	bcf	status,0,c
 12350  002162  320B               	rrcf	i2___ftadd@f1+2,f,c
 12351  002164  320A               	rrcf	i2___ftadd@f1+1,f,c
 12352  002166  3209               	rrcf	i2___ftadd@f1,f,c
 12353  002168  2A14               	incf	i2___ftadd@exp1,f,c
 12354  00216A                     i2l831:
 12355  00216A  5013               	movf	i2___ftadd@exp2,w,c
 12356  00216C  1814               	xorwf	i2___ftadd@exp1,w,c
 12357  00216E  B4D8               	btfsc	status,2,c
 12358  002170  D01F               	goto	i2u434_40
 12359  002172  D7F6               	goto	i2l832
 12360  002174                     i2l826:
 12361  002174  5014               	movf	i2___ftadd@exp1,w,c
 12362  002176  5C13               	subwf	i2___ftadd@exp2,w,c
 12363  002178  B0D8               	btfsc	status,0,c
 12364  00217A  D01A               	goto	i2u434_40
 12365  00217C                     i2u431_40:
 12366  00217C  90D8               	bcf	status,0,c
 12367  00217E  3609               	rlcf	i2___ftadd@f1,f,c
 12368  002180  360A               	rlcf	i2___ftadd@f1+1,f,c
 12369  002182  360B               	rlcf	i2___ftadd@f1+2,f,c
 12370  002184  0614               	decf	i2___ftadd@exp1,f,c
 12371  002186  5014               	movf	i2___ftadd@exp1,w,c
 12372  002188  1813               	xorwf	i2___ftadd@exp2,w,c
 12373  00218A  B4D8               	btfsc	status,2,c
 12374  00218C  D00D               	goto	i2l840
 12375  00218E  0612               	decf	i2___ftadd@sign,f,c
 12376  002190  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 12377  002194  0E07               	movlw	7
 12378  002196  160F               	andwf	??i2___ftadd,f,c
 12379  002198  B4D8               	btfsc	status,2,c
 12380  00219A  D006               	goto	i2l840
 12381  00219C  D7EF               	goto	i2u431_40
 12382  00219E  90D8               	bcf	status,0,c
 12383  0021A0  320E               	rrcf	i2___ftadd@f2+2,f,c
 12384  0021A2  320D               	rrcf	i2___ftadd@f2+1,f,c
 12385  0021A4  320C               	rrcf	i2___ftadd@f2,f,c
 12386  0021A6  2A13               	incf	i2___ftadd@exp2,f,c
 12387  0021A8                     i2l840:
 12388  0021A8  5013               	movf	i2___ftadd@exp2,w,c
 12389  0021AA  1814               	xorwf	i2___ftadd@exp1,w,c
 12390  0021AC  A4D8               	btfss	status,2,c
 12391  0021AE  D7F7               	goto	i2l841
 12392  0021B0                     i2u434_40:
 12393  0021B0  AE12               	btfss	i2___ftadd@sign,7,c
 12394  0021B2  D00C               	goto	i2l843
 12395  0021B4  0EFF               	movlw	255
 12396  0021B6  1A09               	xorwf	i2___ftadd@f1,f,c
 12397  0021B8  0EFF               	movlw	255
 12398  0021BA  1A0A               	xorwf	i2___ftadd@f1+1,f,c
 12399  0021BC  0EFF               	movlw	255
 12400  0021BE  1A0B               	xorwf	i2___ftadd@f1+2,f,c
 12401  0021C0  0E01               	movlw	1
 12402  0021C2  2609               	addwf	i2___ftadd@f1,f,c
 12403  0021C4  0E00               	movlw	0
 12404  0021C6  220A               	addwfc	i2___ftadd@f1+1,f,c
 12405  0021C8  0E00               	movlw	0
 12406  0021CA  220B               	addwfc	i2___ftadd@f1+2,f,c
 12407  0021CC                     i2l843:
 12408  0021CC  AC12               	btfss	i2___ftadd@sign,6,c
 12409  0021CE  D00C               	goto	i2l844
 12410  0021D0  0EFF               	movlw	255
 12411  0021D2  1A0C               	xorwf	i2___ftadd@f2,f,c
 12412  0021D4  0EFF               	movlw	255
 12413  0021D6  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 12414  0021D8  0EFF               	movlw	255
 12415  0021DA  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 12416  0021DC  0E01               	movlw	1
 12417  0021DE  260C               	addwf	i2___ftadd@f2,f,c
 12418  0021E0  0E00               	movlw	0
 12419  0021E2  220D               	addwfc	i2___ftadd@f2+1,f,c
 12420  0021E4  0E00               	movlw	0
 12421  0021E6  220E               	addwfc	i2___ftadd@f2+2,f,c
 12422  0021E8                     i2l844:
 12423  0021E8  0E00               	movlw	0
 12424  0021EA  6E12               	movwf	i2___ftadd@sign,c
 12425  0021EC  5009               	movf	i2___ftadd@f1,w,c
 12426  0021EE  260C               	addwf	i2___ftadd@f2,f,c
 12427  0021F0  500A               	movf	i2___ftadd@f1+1,w,c
 12428  0021F2  220D               	addwfc	i2___ftadd@f2+1,f,c
 12429  0021F4  500B               	movf	i2___ftadd@f1+2,w,c
 12430  0021F6  220E               	addwfc	i2___ftadd@f2+2,f,c
 12431  0021F8  AE0E               	btfss	i2___ftadd@f2+2,7,c
 12432  0021FA  D00E               	goto	i2l845
 12433  0021FC  0EFF               	movlw	255
 12434  0021FE  1A0C               	xorwf	i2___ftadd@f2,f,c
 12435  002200  0EFF               	movlw	255
 12436  002202  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 12437  002204  0EFF               	movlw	255
 12438  002206  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 12439  002208  0E01               	movlw	1
 12440  00220A  260C               	addwf	i2___ftadd@f2,f,c
 12441  00220C  0E00               	movlw	0
 12442  00220E  220D               	addwfc	i2___ftadd@f2+1,f,c
 12443  002210  0E00               	movlw	0
 12444  002212  220E               	addwfc	i2___ftadd@f2+2,f,c
 12445  002214  0E01               	movlw	1
 12446  002216  6E12               	movwf	i2___ftadd@sign,c
 12447  002218                     i2l845:
 12448  002218  C00C  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 12449  00221C  C00D  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 12450  002220  C00E  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 12451  002224  C014  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 12452  002228  C012  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 12453  00222C  ECC7  F014         	call	i2___ftpack	;wreg free
 12454  002230  C001  F009         	movff	?i2___ftpack,?i2___ftadd
 12455  002234  C002  F00A         	movff	?i2___ftpack+1,?i2___ftadd+1
 12456  002238  C003  F00B         	movff	?i2___ftpack+2,?i2___ftadd+2
 12457  00223C  0012               	return	
 12458  00223E                     __end_ofi2___ftadd:
 12459                           	opt stack 0
 12460                           pclatu	equ	0xFFB
 12461                           pclath	equ	0xFFA
 12462                           tblptru	equ	0xFF8
 12463                           tblptrh	equ	0xFF7
 12464                           tblptrl	equ	0xFF6
 12465                           tablat	equ	0xFF5
 12466                           prodh	equ	0xFF4
 12467                           prodl	equ	0xFF3
 12468                           intcon	equ	0xFF2
 12469                           intcon2	equ	0xFF1
 12470                           intcon3	equ	0xFF0
 12471                           postinc0	equ	0xFEE
 12472                           fsr0h	equ	0xFEA
 12473                           fsr0l	equ	0xFE9
 12474                           wreg	equ	0xFE8
 12475                           indf1	equ	0xFE7
 12476                           postdec1	equ	0xFE5
 12477                           fsr1h	equ	0xFE2
 12478                           fsr1l	equ	0xFE1
 12479                           indf2	equ	0xFDF
 12480                           postinc2	equ	0xFDE
 12481                           postdec2	equ	0xFDD
 12482                           fsr2h	equ	0xFDA
 12483                           fsr2l	equ	0xFD9
 12484                           status	equ	0xFD8
 12485                           
 12486 ;; *************** function i2___ftpack *****************
 12487 ;; Defined at:
 12488 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;  arg             3    0[COMRAM] unsigned um
 12491 ;;  exp             1    3[COMRAM] unsigned char 
 12492 ;;  sign            1    4[COMRAM] unsigned char 
 12493 ;; Auto vars:     Size  Location     Type
 12494 ;;		None
 12495 ;; Return value:  Size  Location     Type
 12496 ;;                  3    0[COMRAM] float 
 12497 ;; Registers used:
 12498 ;;		wreg, status,2, status,0
 12499 ;; Tracked objects:
 12500 ;;		On entry : 0/0
 12501 ;;		On exit  : 0/0
 12502 ;;		Unchanged: 0/0
 12503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12504 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12506 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12507 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12508 ;;Total ram usage:        8 bytes
 12509 ;; Hardware stack levels used:    1
 12510 ;; This function calls:
 12511 ;;		Nothing
 12512 ;; This function is called by:
 12513 ;;		i2___ftadd
 12514 ;; This function uses a non-reentrant model
 12515 ;;
 12516                           
 12517                           	psect	text58
 12518  00298E                     __ptext58:
 12519                           	opt stack 0
 12520  00298E                     i2___ftpack:
 12521                           	opt stack 20
 12522                           
 12523                           ;incstack = 0
 12524  00298E  5004               	movf	i2___ftpack@exp,w,c
 12525  002990  B4D8               	btfsc	status,2,c
 12526  002992  D005               	goto	i2u346_40
 12527  002994  5001               	movf	i2___ftpack@arg,w,c
 12528  002996  1002               	iorwf	i2___ftpack@arg+1,w,c
 12529  002998  1003               	iorwf	i2___ftpack@arg+2,w,c
 12530  00299A  A4D8               	btfss	status,2,c
 12531  00299C  D00C               	goto	i2l786
 12532  00299E                     i2u346_40:
 12533  00299E  0E00               	movlw	0
 12534  0029A0  6E01               	movwf	?i2___ftpack,c
 12535  0029A2  0E00               	movlw	0
 12536  0029A4  6E02               	movwf	?i2___ftpack+1,c
 12537  0029A6  0E00               	movlw	0
 12538  0029A8  6E03               	movwf	?i2___ftpack+2,c
 12539  0029AA  0012               	return	
 12540  0029AC  2A04               	incf	i2___ftpack@exp,f,c
 12541  0029AE  90D8               	bcf	status,0,c
 12542  0029B0  3203               	rrcf	i2___ftpack@arg+2,f,c
 12543  0029B2  3202               	rrcf	i2___ftpack@arg+1,f,c
 12544  0029B4  3201               	rrcf	i2___ftpack@arg,f,c
 12545  0029B6                     i2l786:
 12546  0029B6  0E00               	movlw	0
 12547  0029B8  1401               	andwf	i2___ftpack@arg,w,c
 12548  0029BA  6E06               	movwf	??i2___ftpack& (0+255),c
 12549  0029BC  0E00               	movlw	0
 12550  0029BE  1402               	andwf	i2___ftpack@arg+1,w,c
 12551  0029C0  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12552  0029C2  0EFE               	movlw	254
 12553  0029C4  1403               	andwf	i2___ftpack@arg+2,w,c
 12554  0029C6  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12555  0029C8  5006               	movf	??i2___ftpack,w,c
 12556  0029CA  1007               	iorwf	??i2___ftpack+1,w,c
 12557  0029CC  1008               	iorwf	??i2___ftpack+2,w,c
 12558  0029CE  B4D8               	btfsc	status,2,c
 12559  0029D0  D00C               	goto	i2l789
 12560  0029D2  D7EC               	goto	i2l787
 12561  0029D4  2A04               	incf	i2___ftpack@exp,f,c
 12562  0029D6  0E01               	movlw	1
 12563  0029D8  2601               	addwf	i2___ftpack@arg,f,c
 12564  0029DA  0E00               	movlw	0
 12565  0029DC  2202               	addwfc	i2___ftpack@arg+1,f,c
 12566  0029DE  0E00               	movlw	0
 12567  0029E0  2203               	addwfc	i2___ftpack@arg+2,f,c
 12568  0029E2  90D8               	bcf	status,0,c
 12569  0029E4  3203               	rrcf	i2___ftpack@arg+2,f,c
 12570  0029E6  3202               	rrcf	i2___ftpack@arg+1,f,c
 12571  0029E8  3201               	rrcf	i2___ftpack@arg,f,c
 12572  0029EA                     i2l789:
 12573  0029EA  0E00               	movlw	0
 12574  0029EC  1401               	andwf	i2___ftpack@arg,w,c
 12575  0029EE  6E06               	movwf	??i2___ftpack& (0+255),c
 12576  0029F0  0E00               	movlw	0
 12577  0029F2  1402               	andwf	i2___ftpack@arg+1,w,c
 12578  0029F4  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12579  0029F6  0EFF               	movlw	255
 12580  0029F8  1403               	andwf	i2___ftpack@arg+2,w,c
 12581  0029FA  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12582  0029FC  5006               	movf	??i2___ftpack,w,c
 12583  0029FE  1007               	iorwf	??i2___ftpack+1,w,c
 12584  002A00  1008               	iorwf	??i2___ftpack+2,w,c
 12585  002A02  B4D8               	btfsc	status,2,c
 12586  002A04  D006               	goto	i2l792
 12587  002A06  D7E6               	goto	i2l790
 12588  002A08  0604               	decf	i2___ftpack@exp,f,c
 12589  002A0A  90D8               	bcf	status,0,c
 12590  002A0C  3601               	rlcf	i2___ftpack@arg,f,c
 12591  002A0E  3602               	rlcf	i2___ftpack@arg+1,f,c
 12592  002A10  3603               	rlcf	i2___ftpack@arg+2,f,c
 12593  002A12                     i2l792:
 12594  002A12  BE02               	btfsc	i2___ftpack@arg+1,7,c
 12595  002A14  D003               	goto	i2u350_40
 12596  002A16  0E02               	movlw	2
 12597  002A18  6004               	cpfslt	i2___ftpack@exp,c
 12598  002A1A  D7F6               	goto	i2l793
 12599  002A1C                     i2u350_40:
 12600  002A1C  A004               	btfss	i2___ftpack@exp,0,c
 12601  002A1E  9E02               	bcf	i2___ftpack@arg+1,7,c
 12602  002A20  90D8               	bcf	status,0,c
 12603  002A22  3204               	rrcf	i2___ftpack@exp,f,c
 12604  002A24  5004               	movf	i2___ftpack@exp,w,c
 12605  002A26  1203               	iorwf	i2___ftpack@arg+2,f,c
 12606  002A28  5005               	movf	i2___ftpack@sign,w,c
 12607  002A2A  A4D8               	btfss	status,2,c
 12608  002A2C  8E03               	bsf	i2___ftpack@arg+2,7,c
 12609  002A2E  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 12610  002A32  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 12611  002A36  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 12612  002A3A  0012               	return	
 12613  002A3C                     __end_ofi2___ftpack:
 12614                           	opt stack 0
 12615                           pclatu	equ	0xFFB
 12616                           pclath	equ	0xFFA
 12617                           tblptru	equ	0xFF8
 12618                           tblptrh	equ	0xFF7
 12619                           tblptrl	equ	0xFF6
 12620                           tablat	equ	0xFF5
 12621                           prodh	equ	0xFF4
 12622                           prodl	equ	0xFF3
 12623                           intcon	equ	0xFF2
 12624                           intcon2	equ	0xFF1
 12625                           intcon3	equ	0xFF0
 12626                           postinc0	equ	0xFEE
 12627                           fsr0h	equ	0xFEA
 12628                           fsr0l	equ	0xFE9
 12629                           wreg	equ	0xFE8
 12630                           indf1	equ	0xFE7
 12631                           postdec1	equ	0xFE5
 12632                           fsr1h	equ	0xFE2
 12633                           fsr1l	equ	0xFE1
 12634                           indf2	equ	0xFDF
 12635                           postinc2	equ	0xFDE
 12636                           postdec2	equ	0xFDD
 12637                           fsr2h	equ	0xFDA
 12638                           fsr2l	equ	0xFD9
 12639                           status	equ	0xFD8
 12640                           pclatu	equ	0xFFB
 12641                           pclath	equ	0xFFA
 12642                           tblptru	equ	0xFF8
 12643                           tblptrh	equ	0xFF7
 12644                           tblptrl	equ	0xFF6
 12645                           tablat	equ	0xFF5
 12646                           prodh	equ	0xFF4
 12647                           prodl	equ	0xFF3
 12648                           intcon	equ	0xFF2
 12649                           intcon2	equ	0xFF1
 12650                           intcon3	equ	0xFF0
 12651                           postinc0	equ	0xFEE
 12652                           fsr0h	equ	0xFEA
 12653                           fsr0l	equ	0xFE9
 12654                           wreg	equ	0xFE8
 12655                           indf1	equ	0xFE7
 12656                           postdec1	equ	0xFE5
 12657                           fsr1h	equ	0xFE2
 12658                           fsr1l	equ	0xFE1
 12659                           indf2	equ	0xFDF
 12660                           postinc2	equ	0xFDE
 12661                           postdec2	equ	0xFDD
 12662                           fsr2h	equ	0xFDA
 12663                           fsr2l	equ	0xFD9
 12664                           status	equ	0xFD8
 12665                           
 12666                           	psect	rparam
 12667  0000                     pclatu	equ	0xFFB
 12668                           pclath	equ	0xFFA
 12669                           tblptru	equ	0xFF8
 12670                           tblptrh	equ	0xFF7
 12671                           tblptrl	equ	0xFF6
 12672                           tablat	equ	0xFF5
 12673                           prodh	equ	0xFF4
 12674                           prodl	equ	0xFF3
 12675                           intcon	equ	0xFF2
 12676                           intcon2	equ	0xFF1
 12677                           intcon3	equ	0xFF0
 12678                           postinc0	equ	0xFEE
 12679                           fsr0h	equ	0xFEA
 12680                           fsr0l	equ	0xFE9
 12681                           wreg	equ	0xFE8
 12682                           indf1	equ	0xFE7
 12683                           postdec1	equ	0xFE5
 12684                           fsr1h	equ	0xFE2
 12685                           fsr1l	equ	0xFE1
 12686                           indf2	equ	0xFDF
 12687                           postinc2	equ	0xFDE
 12688                           postdec2	equ	0xFDD
 12689                           fsr2h	equ	0xFDA
 12690                           fsr2l	equ	0xFD9
 12691                           status	equ	0xFD8
 12692                           
 12693                           	psect	temp
 12694  000056                     btemp:
 12695                           	opt stack 0
 12696  000056                     	ds	1
 12697  0000                     int$flags	set	btemp
 12698  0000                     wtemp6	set	btemp+1
 12699                           pclatu	equ	0xFFB
 12700                           pclath	equ	0xFFA
 12701                           tblptru	equ	0xFF8
 12702                           tblptrh	equ	0xFF7
 12703                           tblptrl	equ	0xFF6
 12704                           tablat	equ	0xFF5
 12705                           prodh	equ	0xFF4
 12706                           prodl	equ	0xFF3
 12707                           intcon	equ	0xFF2
 12708                           intcon2	equ	0xFF1
 12709                           intcon3	equ	0xFF0
 12710                           postinc0	equ	0xFEE
 12711                           fsr0h	equ	0xFEA
 12712                           fsr0l	equ	0xFE9
 12713                           wreg	equ	0xFE8
 12714                           indf1	equ	0xFE7
 12715                           postdec1	equ	0xFE5
 12716                           fsr1h	equ	0xFE2
 12717                           fsr1l	equ	0xFE1
 12718                           indf2	equ	0xFDF
 12719                           postinc2	equ	0xFDE
 12720                           postdec2	equ	0xFDD
 12721                           fsr2h	equ	0xFDA
 12722                           fsr2l	equ	0xFD9
 12723                           status	equ	0xFD8


Data Sizes:
    Strings     269
    Constant    118
    Data        11
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      85
    BANK0           128    105     127
    BANK1           256     26      58
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_15(CODE[28]), STR_14(CODE[18]), STR_13(CODE[20]), STR_12(CODE[18]), 
		 -> STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[22]), STR_8(CODE[17]), 
		 -> STR_7(CODE[18]), STR_6(CODE[22]), STR_5(CODE[17]), STR_4(CODE[18]), 
		 -> STR_3(CODE[18]), STR_2(CODE[17]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> Buffer(BANK1[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 32
		 -> Buffer(BANK1[32]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> Buffer(BANK1[32]), 


Critical Paths under _main in COMRAM

    _main->___awtoft
    _setupAllThings->_lcd_init
    _lcd_init->_lcd_send_byte
    _read_adc_voltage->___awtoft
    _printingOnScreen->___awtoft
    _heatMode->___awtoft
    _autoCool->___awtoft
    _send_string_no_lib->_send_byte_no_lib
    _OffMode->___awtoft
    _CoolMode->___awtoft
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftadd->___awtoft
    ___ftneg->___awtoft
    ___ftge->___awtoft
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles
    ___ftdiv->___awtoft
    ___awtoft->___wmul

Critical Paths under _highIsr in COMRAM

    _highIsr->_Int2ISR
    _highIsr->_dec
    _dec->i2___ftadd
    _Int2ISR->i2___ftadd
    i2___ftadd->i2___ftpack

Critical Paths under _main in BANK0

    _main->_heatMode
    _read_adc_voltage->___ftdiv
    _printingOnScreen->_sprintf
    _heatMode->_sprintf
    _autoCool->_sprintf
    _set_pwm1_percent->___fttol
    _SerialHandler->_sprintf
    _OffMode->_sprintf
    _CoolMode->_sprintf
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftadd
    ___ftdiv->___ftmul

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_autoCool

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  842817
                                            102 BANK0      3     3      0
                           _CoolMode
                            _Int0ISR
                            _OffMode
                      _SerialHandler
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           _autoCool
                           _heatMode
                   _printingOnScreen
                _read_adc_raw_no_lib
                   _read_adc_voltage
                     _setupAllThings
                        _setupSerial
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupAllThings                                       0     0      0    2043
                          _initPorts
                    _init_adc_no_lib
                           _lcd_init
                    _setupInterpurts
                      _setup_compare
 ---------------------------------------------------------------------------------
 (2) _setup_compare                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupInterpurts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0    2043
                                             50 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (2) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                     9     6      3   18155
                                             27 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (1) _printingOnScreen                                     3     3      0  126975
                                             97 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                         _lcd_gotoxy
                           _lcd_puts
                _read_adc_raw_no_lib
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _heatMode                                             5     5      0  127074
                                             97 BANK0      5     5      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                         _lcd_gotoxy
                           _lcd_puts
                _read_adc_raw_no_lib
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _autoCool                                            26    26      0  170464
                                              0 BANK1     26    26      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                          _init_pwm1
                         _lcd_gotoxy
                           _lcd_puts
                _read_adc_raw_no_lib
                   _set_pwm1_percent
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _set_pwm1_percent                                     8     5      3   30738
                                             49 BANK0      8     5      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                       _set_pwm1_raw
 ---------------------------------------------------------------------------------
 (1) _SerialHandler                                        4     4      0  113927
                                             97 BANK0      4     4      0
                            ___ftdiv
                            ___ftmul
                   _read_byte_no_lib
                 _send_string_no_lib
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _send_string_no_lib                                   2     0      2     143
                                             41 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (3) _send_byte_no_lib                                     1     1      0      22
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_byte_no_lib                                     1     1      0      23
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _OffMode                                              3     3      0  127009
                                             97 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                         _lcd_gotoxy
                           _lcd_puts
                _read_adc_raw_no_lib
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _Int0ISR                                              2     2      0       0
                                             40 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _CoolMode                                             3     3      0  127431
                                             97 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                          _init_pwm1
                         _lcd_gotoxy
                           _lcd_puts
                _read_adc_raw_no_lib
                       _set_pwm1_raw
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             49    36     13   91628
                                             49 BANK0     48    35     13
                            ___awdiv
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   20620
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             40 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   20341
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3652
                                             54 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6   12041
                                             60 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2053
                                             40 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             46 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             40 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             40 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3145
                                             48 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     952
                                             53 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             40 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4    1091
                                             34 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    7294
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    6878
                                             22 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     695
                                              0 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    3258
                                             34 BANK0      9     3      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) _set_pwm1_raw                                         4     2      2     422
                                             40 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             40 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    6061
                                             54 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    4646
                                             53 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    2807
                                             50 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1349
                                             48 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      99
                                             46 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (4) _delay_cycles                                         6     6      0      68
                                             40 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     428
                                             40 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    9993
                                             12 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    4346
                                             60 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
                _read_adc_raw_no_lib (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2953
                                             40 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _highIsr                                             18    18      0    2506
                                             22 COMRAM    18    18      0
                            _Int2ISR
                        _compare_isr
                                _dec
                            _tmr_isr
                          i2_Int0ISR
 ---------------------------------------------------------------------------------
 (9) i2_Int0ISR                                            2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _tmr_isr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _dec                                                  2     2      0    1253
                                             20 COMRAM     2     2      0
                          i2___ftadd
 ---------------------------------------------------------------------------------
 (9) _compare_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Int2ISR                                              2     2      0    1253
                                             20 COMRAM     2     2      0
                          i2___ftadd
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1253
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CoolMode
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _init_pwm1
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _read_adc_raw_no_lib
     _set_pwm1_raw
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Int0ISR
   _OffMode
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _read_adc_raw_no_lib
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SerialHandler
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _read_byte_no_lib
     _send_string_no_lib
       _send_byte_no_lib
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _autoCool
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
     ___fttol
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _init_pwm1
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _read_adc_raw_no_lib
     _set_pwm1_percent
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _set_pwm1_raw
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _heatMode
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _read_adc_raw_no_lib
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _printingOnScreen
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _read_adc_raw_no_lib
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _read_adc_raw_no_lib
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib
   _setupAllThings
     _initPorts
     _init_adc_no_lib
     _lcd_init
       _delay_ms
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
       _lcd_send_nibble
         _delay_cycles
     _setupInterpurts
     _setup_compare
   _setupSerial

 _highIsr (ROOT)
   _Int2ISR
     i2___ftadd
       i2___ftpack
   _compare_isr
   _dec
     i2___ftadd
       i2___ftpack
   _tmr_isr
   i2_Int0ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1A      3A       7       22.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     69      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      55       1       67.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10E      34        0.0%
DATA                 0      0     10E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Nov 06 22:14:37 2024

           ?_read_adc_voltage 009B            ??_read_adc_voltage 0041                            _OT 00E9  
              ?_lcd_send_byte 0031                  ?_compare_isr 0001                            _TT 004F  
                          _Hs 0048                  ___awdiv@sign 0034                 _autoCool$1898 0128  
               _autoCool$1899 0137           ___wmul@multiplicand 0039                   __CFG_BORV$3 000000  
                  i2___ftpack 298E                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$XT 000000  
                ___ftadd@exp1 00A1                  ___ftadd@exp2 00A0                   __CFG_LVP$ON 000000  
                ___ftadd@sign 009F                   __CFG_WDT$ON 000000                           l300 31EA  
                         l220 107C                           l301 31C2                           l302 31C6  
                         l310 300C                           l214 0E0E                           _AI0 00FC  
                         l303 31CA                           l311 3018                           l215 0DC6  
                         _AI1 0045                           l312 3024                           l216 0DF8  
                         l240 194C                           _AI2 00F9                           l161 30C2  
                         l217 0E8E                           _AI3 00F6                           l218 10DC  
                         l250 198A                           l307 3030                           l163 30D0  
                         l219 104A                           l243 1954                           l308 2FF4  
                         l316 33C6                           l244 1966                           l317 33B4  
                         l501 043E                           l237 17B8                           l342 3212  
                         l422 33A2                           l246 1972                           l271 335C  
                         l511 0566                           l423 3390                           l239 1890  
                         l272 334E                           l520 0674                           l416 3472  
                         l248 1980                           l521 065E                           l513 0592  
                         l417 3470                           l257 28D0                           l450 1344  
                         l530 07FC                           l514 057C                           l370 2B6E  
                         l451 126A                           l523 0698                           l507 04FA  
                         l291 2F4E                           l444 169A                           l540 0908  
                         l532 0856                           l524 069C                           l277 32DC  
                         l533 086E                           l525 06BE                           l517 0654  
                         l461 0020                           l293 2F76                           l278 32D6  
                         l286 316A                           l454 131E                           l550 0A2E  
                         l542 092A                           l526 07F0                           l518 05C0  
                         l462 003C                           l447 176A                           l455 1474  
                         l551 09A6                           l543 0932                           l527 070E  
                         l471 01EC                           l544 0956                           l480 017E  
                         l464 006A                           l457 1528                           l545 095E  
                         l537 08C6                           l529 0812                           l298 31D0  
                         l730 2C7A                           l722 2C22                           l490 0230  
                         l482 0198                           l474 0148                           l466 013A  
                         l299 31BE                           l731 2C88                           l723 2C32  
                         l539 08E6                           l491 0272                           l475 021C  
                         l483 0188                           l467 0124                           l468 00EC  
                         l821 1F62                           l725 2C50                           l493 0304  
                         l485 01C6                           l750 324A                           l726 2C48  
                         l742 2D62                           l494 036C                           l486 01AA  
                         l478 014C                           l831 1FBE                           l911 2562  
                         l903 24C6                           l743 2D6C                           l735 2D28  
                         l479 0168                           l840 1FFC                           l832 1FB4  
                         l912 2556                           l760 245C                           l744 2D7A  
                         l736 2D34                           l496 0392                           l488 01DA  
                         l841 1FF2                           l817 1F38                           l905 253E  
                         l761 244C                           l729 2C70                           l489 081C  
                         l497 03D0                           l850 26B0                           l826 1FC8  
                         l914 257E                           l906 252E                           l754 238E  
                         l738 2D4A                           l498 0494                           l843 2020  
                         l739 2D42                           l852 26D8                           l844 203C  
                         l756 23AC                           l860 2296                           l853 2716  
                         l845 206C                           l757 23EE                           l861 22D0  
                         l790 2926                           l854 273C                           l766 2480  
                         l758 241E                           l870 2358                           l862 22F8  
                         l918 344E                           l767 2474                           l871 234C  
                         l792 2964                           l944 2CC0                           l864 2334  
                         l793 295A                           l945 2CB4                           l865 2324  
                         l786 2908                           l954 2EEA                           l858 226A  
                         l882 25BA                           l787 28FE                           l875 2BAE  
                         l955 2EDE                           l876 2BDE                           l948 2CF4  
                         l884 25E2                           l789 293C                           l893 3336  
                         l949 2D02                           l965 2FA6                           l885 2614  
                         l958 2F12                           l966 2F9A                           l886 2624  
                         l959 2F20                           l888 263C                           l889 264C  
                         l899 3190                  __CFG_CPB$OFF 000000                           _RB3 007C0B  
                         _PR2 000FCB                  __CFG_CPD$OFF 000000                           _SSP 004C  
                         _dec 2E60                           _lcd 000F83                  ___awmod@sign 002E  
                         prod 000FF3     read_adc_voltage@raw_value 00A2                           wreg 000FE8  
                 lcd_gotoxy@x 0034                   lcd_gotoxy@y 0033                  ___ftdiv@cntr 0095  
                ___ftdiv@sign 009A                          ?_dec 0001                          l5253 2F46  
                        l5601 0A2A                          l5417 0418                          l5409 03D0  
                        l5345 01AA                          l4571 2C0A                          l5339 0188  
                        l5267 2F6E                          l5461 058C                          l5437 04FE  
                        l5543 0872                          l5481 065E                          l5457 057C  
                        l5597 09A6                          STR_1 FFA7                          STR_2 FFCB  
                        STR_3 FF4D                          STR_4 FF83                          STR_5 FFDC  
                        STR_6 FF0D                          STR_7 FF95                          STR_8 FFED  
                        STR_9 FF23                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          _LATE 000F8D  
                        u5020 1F92                          _IPR2 000FA2                          _PIE1 000F9D  
                        u6000 02AA                          _PIE2 000FA0                          u5131 25A2  
                        u5060 1FD0                          u5220 2C54                          u6005 02A0  
                        u5151 25CA                          u6120 0536                          u6040 03A2  
                        u5401 224E                          u5090 2004                          u6050 03E2  
                        u5421 227A                          u6150 05A0                          u5280 2D4E  
                        u6400 0A58                          u6080 0418                          u6180 0682  
                        u5550 2486                          u6190 0692                          u5720 2568  
                        u5480 235E                          u6360 0966                          u6280 08AA  
                        u5561 2698                          u4825 313A                          u4921 1EF6  
                        u4850 28F0                          u4826 313C                          u6370 0984  
                        u6610 1948                          _PIR2 000FA1                          u4931 1F0A  
                        u5820 2F64                          u5581 26C0                          u5661 24AA  
                        u5750 2CC4                          u6390 0A3E                          u4960 1F2A  
                        u5680 24E4                          u4890 296E                          u6707 30A2  
                        u5780 2EEE                          u6717 3162                          u5685 24DC  
                        u4990 1F54                          u6727 3350                          u5880 00C8  
                        _RCON 000FD0                          _TMR3 000FB2              ?_lcd_send_nibble 0001  
                        _main 17AC                  ___ftpack@arg 0029              _send_byte_no_lib 346C  
                ___ftpack@exp 002C                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 0056                  i2___ftadd@f1 0009                  i2___ftadd@f2 000C  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000               __end_of_Int0ISR 30E4                  _sprintf$1907 00C4  
             __end_of_Int2ISR 2DF4                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 008A  
                ___param_bank 000000                  ___ftmul@sign 008B               __end_of_OffMode 1EE4  
       __end_of_SerialHandler 28E0                  ___fttol@exp1 00B0              _set_pwm1_percent 2ADC  
                       ??_dec 0015                  ___fttol@lval 00AC          __end_of_delay_cycles 32F8  
                       ?_main 0001               __end_of___awdiv 2C92               __end_of___ftadd 2092  
                       STR_10 FF71                         STR_11 FFB9                         STR_12 FF4D  
                       STR_13 FF39                         STR_14 FF5F                         STR_15 FEF1  
             __end_of___awmod 2D84               __end_of___ftdiv 276E               __end_of___ftneg 3344  
             __end_of___lldiv 2D14               __end_of___ftmul 2686               ___awdiv@divisor 0031  
             __end_of___llmod 2F32               __end_of___ftsub 31BA             ?_printingOnScreen 0001  
             __end_of___fttol 2590                         _T2CON 000FCA                         _T3CON 000FB1  
                       i2l151 27CC                         i2l161 310E                         i2l153 27D6  
                       i2l163 311C                         i2l155 27E0                         i2l157 27E6  
                       i2l149 27C2                         i2l169 2DBC                         i2l178 2E94  
                       i2l821 210E                         i2l831 216A                         i2l840 21A8  
                       i2l832 2160                         i2l841 219E                         i2l817 20E4  
                       i2l826 2174                         i2l843 21CC                         i2l844 21E8  
                       i2l845 2218                         i2l790 29D4                         i2l792 2A12  
                       i2l793 2A08                         i2l786 29B6                         i2l787 29AC  
             ___awdiv@counter 0033                         i2l789 29EA                         _RCREG 000FAE  
                       _RCSTA 000FAB                         _SPBRG 000FAF       read_adc_voltage@channel 00A1  
            ??_setupAllThings 0034                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _TXREG 000FAD                         _TXSTA 000FAC                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000            ??_printingOnScreen 0041  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0039  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000               __end_of_highIsr 2832  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
          __size_ofi2_Int0ISR 004C                __CFG_EBTRB$OFF 000000                 ___awtoft@sign 0040  
             __end_of_dpowers FEA3                         _scale 112E               __end_of_isdigit 3456  
             _init_adc_no_lib 349C                 ___ftpack@sign 002D               ??_setup_compare 0029  
                       pclath 000FFA                         tablat 000FF5               __end_of_tmr_isr 349C  
                       status 000FD8       read_adc_voltage@voltage 009E                         wtemp6 0057  
             __end_of_sprintf 0A66            __size_ofi2___ftadd 01AC                __CFG_PBADEN$ON 000000  
            __end_of_CoolMode 1B6E               __initialization 3046                  __end_of_main 19A4  
             ??_lcd_send_byte 0032                   ?i2___ftpack 0001                        ??_main 0041  
               ___fttol@sign1 00AB                 __activetblptr 000002      __size_of_setupInterpurts 001E  
        __size_of__tdiv_to_l_ 0132                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0              ___llmod@dividend 0036                        ?_scale 008C  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        _CCPR2H 000FBC  
                      _CCPR1L 000FBE                        _CCPR2L 000FBB              ___awdiv@dividend 002F  
            __end_of___awtoft 326E              __end_of___ftpack 298E              __end_of___lltoft 2FF0  
                      _INTCON 000FF2                        u417_41 20A2                        u418_41 20B6  
                   ??_Int0ISR 0029                     ??_Int2ISR 0015                        _SPBRGH 000FB0  
                   ??_OffMode 0041              __end_of_delay_ms 336A                    _SerialFlag 00F2  
                      _Buffer 0100              __end_of_heatMode 1D2E                __CFG_XINST$OFF 000000  
            __end_of__powers_ FECA              __end_of_lcd_init 2F94              __end_of_lcd_putc 3046  
            __end_of_lcd_puts 33D6                        ___ftge 2B7C             __end_ofi2_Int0ISR 3130  
            __end_of_autoCool 112E                        ___wmul 32F8                     ??___awdiv 0033  
                   ??___ftadd 009C                __CFG_STVREN$ON 000000                     ??___awmod 002D  
                   ??___ftdiv 0092                     ??___ftneg 0041                     ??___lldiv 0031  
                   ??___ftmul 003D                     ??___llmod 003E                     ??___ftsub 0041  
                   ??___fttol 00A6                  _AnalogInput0 00EF                  _AnalogInput1 00EC  
                _AnalogInput2 0052                        _fround 154E                        clear_0 306C  
                      clear_1 3078                        clear_2 3084              ___awdiv@quotient 0035  
             ___awmod@divisor 002B               ___awmod@counter 002D                     ??_highIsr 0017  
        __size_of_compare_isr 0008         ___ftmul@f3_as_product 0087       __end_of_init_adc_no_lib 34A8  
                __pdataCOMRAM 0041                     ??_isdigit 0029             __end_ofi2___ftadd 223E  
              i2___ftadd@exp1 0014                i2___ftadd@exp2 0013                i2___ftadd@sign 0012  
                __mediumconst FE7A           send_string_no_lib@p 002A                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8            _send_string_no_lib 338E  
                   ??_tmr_isr 0001                  ?_setupSerial 0001                     ??_sprintf 00BE  
                  __accesstop 0080       __end_of__initialization 308A           ?_send_string_no_lib 002A  
                  ___ftadd@f1 0096                    ___ftadd@f2 0099           __size_ofi2___ftpack 00AE  
                  ___ftge@ff1 00A2                    ___ftge@ff2 00A5             ?_read_byte_no_lib 0001  
               ___rparam_used 000001                    ___ftdiv@f1 008C                    ___ftdiv@f2 008F  
                  ___ftdiv@f3 0096                    ___ftneg@f1 0080                    ___awtoft@c 003D  
              i2___ftpack@arg 0001                i2___ftpack@exp 0004            ??_read_byte_no_lib 0029  
                  ___ftmul@f1 0080                    ___ftmul@f2 0083                    ___ftsub@f1 00A2  
                  ___ftsub@f2 00A5                    ___fttol@f1 00A2                __pcstackCOMRAM 0001  
       __size_of_delay_cycles 002E                    ___lltoft@c 0031                 __end_of_scale 154E  
        ??_send_string_no_lib 002C      __end_of_send_byte_no_lib 347C                    __div_to_l_ 2370  
   __size_of_read_adc_voltage 006C             lcd_gotoxy@address 0035               __div_to_l_@exp1 0034  
                   ?_CoolMode 0001               __div_to_l_@cntr 0033                       ??_scale 0040  
           ??_setupInterpurts 0029               __div_to_l_@quot 002F                  sprintf@width 00D9  
    __end_of_set_pwm1_percent 2B7C                    __pbssBANK0 00E9                    __pbssBANK1 0100  
 __end_of_read_adc_raw_no_lib 3236                  _delay_cycles 32CA            __size_of_initPorts 002E  
               __div_to_l_@f1 0029                 __div_to_l_@f2 002C            __size_of_init_pwm1 0010  
           read_byte_no_lib@c 0029         autoCool@percent_value 012B                lcd_send_byte@n 0031  
                     ?___ftge 00A2                       ?___wmul 0037              lcd_send_nibble@n 0030  
                     _CCP1CON 000FBD                       _CCP2CON 000FBA                       ?_fround 008C  
                   ?___awtoft 003D                     ?___ftpack 0029         SerialHandler@received 00E4  
                   ?___lltoft 0031              ?_init_adc_no_lib 0001                       _INTCON2 000FF1  
                     _INTCON3 000FF0                     ?_delay_ms 0029                    _lcd_gotoxy 31BA  
                   ?_heatMode 0001                    ??_CoolMode 0041                     ?_lcd_init 0001  
                   ?_lcd_putc 0001                     ?_lcd_puts 0037                     ?_autoCool 0001  
                     _Int0ISR 3098                       _Int2ISR 2D84     __size_of_printingOnScreen 00A0  
                     _OffMode 1D2E             __end_of__npowers_ FEF1                       __Hparam 0000  
                  _scale$1906 008F                       __Lparam 0000      __size_of_lcd_send_nibble 0022  
             __size_of___ftge 0092                       ___awdiv 2C0E                       ___ftadd 1EE4  
                     ___awmod 2D14             autoCool@heatError 0123                       ___ftdiv 2686  
                     ___ftneg 331E                       ___lldiv 2C92               __size_of___wmul 0026  
                     ___ftmul 2590                       ___llmod 2ECC                       ___ftsub 3178  
                     ___fttol 2498                 ?_set_pwm1_raw 0029                       __pcinit 3046  
                ??i2___ftpack 0006                    ??___awtoft 0040                    ??___ftpack 002E  
             __size_of_fround 025E                       __ramtop 1000             autoCool@coolError 0120  
                  ??___lltoft 0035                       __ptext0 17AC                       __ptext1 336A  
                     __ptext2 3456                       __ptext3 33D6                       __ptext4 341A  
                     __ptext5 2F32                       __ptext6 349C                       __ptext7 326E  
                     __ptext8 2DF4                       __ptext9 2A3C                       _highIsr 0008  
                 ?__div_to_l_ 0029             __end_of_initPorts 329C                       _dpowers FE7B  
                   _T2CONbits 000FCA                  __size_of_dec 006C                       _isdigit 3438  
                   _T3CONbits 000FB1             __end_of_init_pwm1 348C              ___awmod@dividend 0029  
          _SerialHandler$1903 00E1                    ??_delay_ms 002B                    ??_heatMode 0041  
                     _tmr_isr 348C                       _sprintf 0012                  _OffMode$1895 00E1  
                  ??_lcd_init 0033                __pintcode_body 276E                    ??_lcd_putc 0036  
                  ??_lcd_puts 0039          end_of_initialization 308A                    ??_autoCool 0041  
      __size_of_SerialHandler 00AE          __size_of_setupSerial 0024         __end_of_setup_compare 33F8  
               __Lmediumconst FE7A                       int_func 276E          lcd_send_byte@cm_data 0032  
          __end_ofi2___ftpack 2A3C               ___lldiv@divisor 002D               ___lldiv@counter 0035  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                ??_set_pwm1_raw 002B  
              __tdiv_to_l_@f1 0029                __tdiv_to_l_@f2 002C         __end_of_lcd_send_byte 3178  
            setupSerial@dummy 0029                 ??__tdiv_to_l_ 002F                     i2_Int0ISR 30E4  
                   _PORTCbits 000F82                     _PORTDbits 000F83                     _PORTEbits 000F84  
         set_pwm1_percent@tmp 00B4              _read_adc_voltage 2DF4                     _TRISCbits 000F94  
                 ?_lcd_gotoxy 0033                     i2___ftadd 2092               _LCD_INIT_STRING 0041  
     __size_of_setupAllThings 0016                   _CCP1CONbits 000FBD                   ___ftdiv@exp 0099  
                   _TXSTAbits 000FAC               i2___ftpack@sign 0005           __size_of__div_to_l_ 0128  
                 ___ftmul@exp 0086             send_byte_no_lib@c 0029                    autoCool@SP 0131  
               ??_compare_isr 0001                __end_of___ftge 2C0E                 _SerialHandler 2832  
              __end_of___wmul 331E                   _BAUDCONbits 000FB8                 __pidataCOMRAM 34A8  
               delay_cycles@n 002C                 delay_cycles@x 002D                    ?i2_Int0ISR 0001  
             _setupInterpurts 341A             ??_lcd_send_nibble 002F     __size_of_read_byte_no_lib 0008  
              __end_of_fround 17AC             ?_send_byte_no_lib 0001           start_initialization 3046  
          ??_send_byte_no_lib 0029           __end_of__tdiv_to_l_ 2370                   __end_of_dec 2ECC  
                  ?i2___ftadd 0009             ?_set_pwm1_percent 00B1             __size_of_CoolMode 01CA  
            _printingOnScreen 2A3C            ??_set_pwm1_percent 0041               ___llmod@divisor 003A  
             ___llmod@counter 003E                      ??___ftge 00A8           __size_of_lcd_gotoxy 0042  
                    ??___wmul 003B                ?_SerialHandler 0001  read_adc_raw_no_lib@raw_value 002E  
            __CFG_LPT1OSC$OFF 000000                      ??_fround 0040                 sprintf@tmpval 00CF  
 __size_of_send_string_no_lib 0024                    fround@prec 0095             __size_of___awtoft 0038  
           __size_of___ftpack 00AE             __size_of___lltoft 005C           __end_of_compare_isr 34C4  
                 __pbssCOMRAM 004C                 __pcstackBANK0 0080                 __pcstackBANK1 0120  
                _isdigit$1517 002A             __size_of_delay_ms 0026          __end_of_set_pwm1_raw 32CA  
           __size_of_heatMode 01C0                      ?_Int0ISR 0001                      ?_Int2ISR 0001  
           __size_of_lcd_init 0062                   sprintf@flag 00CD             __size_of_lcd_putc 0056  
           __size_of_lcd_puts 0024                   sprintf@fval 00DB                   sprintf@prec 00DE  
           __size_of_autoCool 06C8                      ?_OffMode 0001                  _current_mode 0055  
                   _main$1902 00E6          autoCool@percent_heat 012E             __CFG_CCP2MX$PORTC 000000  
     __end_of_setupInterpurts 3438                     __pintcode 0008  __size_of_read_adc_raw_no_lib 003A  
               __pmediumconst FE7A                      ?___awdiv 002F                      ?___ftadd 0096  
                    ?___awmod 0029                      ?___ftdiv 008C                      ?___ftneg 0080  
                    ?___lldiv 0029                      ?___ftmul 0080                      ?___llmod 0036  
                    ?___ftsub 00A2                     __npowers_ FECA                      ?___fttol 00A2  
                 ??i2_Int0ISR 0001                   __tdiv_to_l_ 223E                      ?_highIsr 0001  
                ??__div_to_l_ 002F         _printingOnScreen$1901 00E1                      ?_isdigit 0001  
               _heatMode$1897 00E3                 _CoolMode$1896 00E1                  _mode_counter 004A  
                   _initPorts 326E                      ?_tmr_isr 0001                   ??i2___ftadd 000F  
                    ?_sprintf 00B1                     _init_pwm1 347C                __size_of_scale 0420  
    __size_of_init_adc_no_lib 000C                _setupAllThings 3456                ___wmul@product 003B  
                   delay_ms@n 0029                     delay_ms@x 002B                      _PIE2bits 000FA0  
                   _raw_value 00F4                      i2u421_40 20D6                      i2u350_40 2A1C  
                    i2u431_40 217C                      i2u424_40 2100                      i2u441_40 2DCA  
                    _PIR1bits 000F9E            __end_of__div_to_l_ 2498                      i2u346_40 299E  
                    i2u434_40 21B0                      i2u427_40 213E                      _PIR2bits 000FA1  
    __end_of_read_adc_voltage 2E60                      i2u448_40 2EA2                      i2u673_47 30EE  
                    i2u674_47 2E6A               ??_SerialHandler 0041                      i2u675_47 2D8E  
            __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 002D                   _compare_isr 34BC  
            _read_byte_no_lib 34B4                    _ADCON0bits 000FC2             ___wmul@multiplier 0037  
                   lcd_init@i 0033                     lcd_putc@c 0036                     lcd_puts@s 0037  
                ??_lcd_gotoxy 0034                     autoCool@T 0134                    ?_initPorts 0001  
               ??_setupSerial 0029                      _CoolMode 19A4                    ?_init_pwm1 0001  
      __end_of_setupAllThings 346C                   _INTCON3bits 000FF0                     copy_data0 305A  
            __size_of_Int0ISR 004C              __size_of_Int2ISR 0070         autoCool@compare_value 0126  
            __size_of_OffMode 01B6               _lcd_send_nibble 33F8                      __Hrparam 0000  
       set_pwm1_raw@raw_value 0029                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
            ?_setupInterpurts 0001            __end_of_lcd_gotoxy 31FC              __size_of___awdiv 0084  
            __size_of___ftadd 01AE              __size_of___awmod 0070              __size_of___ftdiv 00E8  
            __size_of___ftneg 0026              __size_of___lldiv 0082              __size_of___ftmul 00F6  
            __size_of___llmod 0066              __size_of___ftsub 0042              __size_of___fttol 00F8  
                    ___awtoft 3236                      ___ftpack 28E0                   _fround$1904 0092  
                 _fround$1905 008F                      ___lltoft 2F94      __end_of_printingOnScreen 2ADC  
      __size_of_setup_compare 0022              __size_of_highIsr 282A                    sprintf@len 00CB  
                  sprintf@exp 00D7                    sprintf@val 00D3         __size_of_set_pwm1_raw 002E  
            __size_of_isdigit 001E                      _delay_ms 3344                      _heatMode 1B6E  
                    __ptext10 1B6E                      __ptext11 0A66                      __ptext20 0012  
                    __ptext12 2ADC                      __ptext21 112E                      __ptext13 2832  
                    __ptext30 2F94                      __ptext22 3438                      __ptext14 338E  
                    __ptext31 2ECC                      __ptext23 154E                      __ptext15 346C  
                    __ptext40 33B2                      __ptext32 2C92                      __ptext24 32F8  
                    __ptext16 34B4                      __ptext41 2FF0                      __ptext33 2498  
                    __ptext25 2590                      __ptext17 1D2E                      __ptext50 28E0  
                    __ptext42 31BA                      __ptext34 3178                      __ptext26 2D14  
                    __ptext18 3098                      __ptext43 3130                      __ptext35 1EE4  
                    __ptext27 2C0E                      __ptext19 19A4                      __ptext52 30E4  
                    __ptext44 33F8                      __ptext36 331E                      __ptext28 223E  
                    __ptext53 348C                      __ptext45 32CA                      __ptext37 2B7C  
                    __ptext29 2370                      __ptext54 2E60                      __ptext46 3344  
                    __ptext38 329C                      __ptext55 34BC                      __ptext47 347C  
                    __ptext39 31FC                      __ptext56 2D84                      __ptext48 2686  
                    __ptext57 2092                      __ptext49 3236                      __ptext58 298E  
                    __powers_ FEA3                      _lcd_init 2F32               ?_setupAllThings 0001  
                    _lcd_putc 2FF0              __size_of_tmr_isr 0010                      _lcd_puts 33B2  
                    _autoCool 0A66              __size_of_sprintf 0A54       set_pwm1_percent@raw_val 00B7  
      __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001                 __size_of_main 01F8  
   __size_of_send_byte_no_lib 0010           __end_of_setupSerial 338E             ??_init_adc_no_lib 0029  
                    int$flags 0056     __size_of_set_pwm1_percent 00A0                  _set_pwm1_raw 329C  
                  _INTCONbits 000FF2                      isdigit@c 002B                   ??_initPorts 0029  
         _read_adc_raw_no_lib 31FC                      scale@scl 0092                   ??_init_pwm1 0029  
                    intlevel2 0000                     sprintf@ap 00C9                     sprintf@cp 00C7  
     __end_of_lcd_send_nibble 341A              __tdiv_to_l_@exp1 0037              __tdiv_to_l_@cntr 0036  
                   sprintf@sp 00B1                ??_delay_cycles 0029              __tdiv_to_l_@quot 0032  
            ___lldiv@dividend 0029                 _setup_compare 33D6         heatMode@compare_value 00E1  
        ?_read_adc_raw_no_lib 0029    __end_of_send_string_no_lib 33B2                 _lcd_send_byte 3130  
                ?__tdiv_to_l_ 0029                      sprintf@c 00E0                      sprintf@f 00B3  
            ___lldiv@quotient 0031         set_pwm1_percent@value 00B1                   _setupSerial 336A  
              ?_setup_compare 0001      __end_of_read_byte_no_lib 34BC         ??_read_adc_raw_no_lib 002B  
